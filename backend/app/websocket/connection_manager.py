from typing import Dict, List, Set
from fastapi import WebSocket
import json
import redis.asyncio as redis
import asyncio
import logging
from app.core.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class ConnectionManager:
    def __init__(self):
        # –ê–∫—Ç–∏–≤–Ω—ã–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ user_id
        self.active_connections: Dict[int, List[WebSocket]] = {}
        # –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º
        self.channel_connections: Dict[int, Dict[int, WebSocket]] = {}
        self.redis_client = None
        
        # –ù–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        self.connection_metadata: Dict[WebSocket, Dict] = {}
        self.user_channels: Dict[int, Set[int]] = {}  # user_id -> set of channel_ids
        
    async def init_redis(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –¥–ª—è pub/sub"""
        try:
            self.redis_client = redis.from_url("redis://redis:6379")
            await self.redis_client.ping()
            logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print("‚úÖ Redis connected successfully")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Redis: {e}")
            print(f"‚ùå Redis connection failed: {e}")
            self.redis_client = None
    
    async def connect(self, websocket: WebSocket, user_id: int, channel_id: int = None):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º"""
        await websocket.accept()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.connection_metadata[websocket] = {
            'user_id': user_id,
            'channel_id': channel_id,
            'connected_at': asyncio.get_event_loop().time(),
            'type': 'voice' if channel_id else 'notifications'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.active_connections:
            self.active_connections[user_id] = []
        self.active_connections[user_id].append(websocket)
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–∞–Ω–∞–ª, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if channel_id:
            if channel_id not in self.channel_connections:
                self.channel_connections[channel_id] = {}
            self.channel_connections[channel_id][user_id] = websocket
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.user_channels:
                self.user_channels[user_id] = set()
            self.user_channels[user_id].add(channel_id)
        
        logger.info(f"üîó WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: user_id={user_id}, channel_id={channel_id}, "
                   f"—Ç–∏–ø={'–≥–æ–ª–æ—Å–æ–≤–æ–π' if channel_id else '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._log_connection_stats()
    
    async def disconnect(self, websocket: WebSocket, user_id: int = None, channel_id: int = None):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
        metadata = self.connection_metadata.get(websocket, {})
        if user_id is None:
            user_id = metadata.get('user_id')
        if channel_id is None:
            channel_id = metadata.get('channel_id')
            
        if user_id is None:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WebSocket")
            return
            
        logger.info(f"üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket: user_id={user_id}, channel_id={channel_id}")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        if user_id in self.active_connections:
            if websocket in self.active_connections[user_id]:
                self.active_connections[user_id].remove(websocket)
                logger.debug(f"üîå –£–¥–∞–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            if not self.active_connections[user_id]:
                del self.active_connections[user_id]
                logger.debug(f"üîå –£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        if channel_id and channel_id in self.channel_connections:
            if user_id in self.channel_connections[channel_id]:
                del self.channel_connections[channel_id][user_id]
                logger.debug(f"üîå –£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
            if not self.channel_connections[channel_id]:
                del self.channel_connections[channel_id]
                logger.debug(f"üîå –£–¥–∞–ª–µ–Ω –ø—É—Å—Ç–æ–π –∫–∞–Ω–∞–ª {channel_id}")
                
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self.user_channels and channel_id:
            self.user_channels[user_id].discard(channel_id)
            if not self.user_channels[user_id]:
                del self.user_channels[user_id]
                
        # –£–¥–∞–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if websocket in self.connection_metadata:
            del self.connection_metadata[websocket]
            
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._log_connection_stats()
    
    async def send_personal_message(self, message: str, websocket: WebSocket):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            await websocket.send_text(message)
            logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await self._handle_broken_connection(websocket)
    
    async def send_to_channel(self, channel_id: int, message: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–∞–Ω–∞–ª–∞"""
        if channel_id not in self.channel_connections:
            logger.debug(f"üì§ –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
            
        message_str = json.dumps(message)
        disconnected = []
        sent_count = 0
        
        for user_id, websocket in self.channel_connections[channel_id].items():
            try:
                await websocket.send_text(message_str)
                sent_count += 1
                logger.debug(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                disconnected.append(user_id)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for user_id in disconnected:
            if user_id in self.channel_connections[channel_id]:
                broken_ws = self.channel_connections[channel_id][user_id]
                del self.channel_connections[channel_id][user_id]
                await self._handle_broken_connection(broken_ws)
                
        logger.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –∫–∞–Ω–∞–ª–µ {channel_id}, "
                   f"–æ—Ç–∫–ª—é—á–µ–Ω–æ: {len(disconnected)}")
    
    async def send_to_user(self, user_id: int, message: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if user_id not in self.active_connections:
            logger.debug(f"üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
            
        message_str = json.dumps(message)
        disconnected = []
        sent_count = 0
        
        for websocket in self.active_connections[user_id]:
            try:
                await websocket.send_text(message_str)
                sent_count += 1
                logger.debug(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                disconnected.append(websocket)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for websocket in disconnected:
            if websocket in self.active_connections[user_id]:
                self.active_connections[user_id].remove(websocket)
                await self._handle_broken_connection(websocket)
                
        logger.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({sent_count} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π), "
                   f"–æ—Ç–∫–ª—é—á–µ–Ω–æ: {len(disconnected)}")
    
    async def broadcast_to_all(self, message: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        message_str = json.dumps(message)
        disconnected_users = []
        total_sent = 0
        total_disconnected = 0
        
        for user_id, connections in self.active_connections.items():
            disconnected_connections = []
            user_sent = 0
            
            for websocket in connections:
                try:
                    await websocket.send_text(message_str)
                    user_sent += 1
                    total_sent += 1
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ broadcast —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    disconnected_connections.append(websocket)
                    total_disconnected += 1
            
            # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for websocket in disconnected_connections:
                connections.remove(websocket)
                await self._handle_broken_connection(websocket)
            
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, –ø–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            if not connections:
                disconnected_users.append(user_id)
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        for user_id in disconnected_users:
            del self.active_connections[user_id]
            if user_id in self.user_channels:
                del self.user_channels[user_id]
                
        logger.info(f"üì° Broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {total_sent} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º, "
                   f"–æ—Ç–∫–ª—é—á–µ–Ω–æ: {total_disconnected}, —É–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(disconnected_users)}")
    
    async def broadcast_to_text_channel(self, text_channel_id: int, message: dict):
        """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª"""
        if self.redis_client:
            try:
                await self.redis_client.publish(
                    f"text_channel:{text_channel_id}",
                    json.dumps(message)
                )
                logger.debug(f"üì° –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Redis –∫–∞–Ω–∞–ª text_channel:{text_channel_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Redis: {e}")
        else:
            logger.warning("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª")
    
    async def handle_redis_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Redis"""
        if message["type"] == "message":
            try:
                channel = message["channel"].decode()
                data = json.loads(message["data"])
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ channel_id –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
                if channel.startswith("channel:"):
                    channel_id = int(channel.split(":")[1])
                    # –†–∞—Å—Å—ã–ª–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º
                    if channel_id in self.channel_connections:
                        for user_id, connection in self.channel_connections[channel_id].items():
                            try:
                                await connection.send_json(data)
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Redis —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                                
                logger.debug(f"üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ Redis —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Redis —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
    async def _handle_broken_connection(self, websocket: WebSocket):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–º–∞–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        logger.debug("üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–º–∞–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        metadata = self.connection_metadata.get(websocket, {})
        user_id = metadata.get('user_id')
        channel_id = metadata.get('channel_id')
        
        if user_id:
            await self.disconnect(websocket, user_id, channel_id)
        else:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –µ—Å–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã
            if websocket in self.connection_metadata:
                del self.connection_metadata[websocket]
                
    def _log_connection_stats(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        total_connections = sum(len(connections) for connections in self.active_connections.values())
        total_channels = len(self.channel_connections)
        total_users = len(self.active_connections)
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π={total_users}, "
                   f"—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π={total_connections}, –∫–∞–Ω–∞–ª–æ–≤={total_channels}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if logger.isEnabledFor(logging.DEBUG):
            for user_id, connections in self.active_connections.items():
                connection_types = []
                for ws in connections:
                    metadata = self.connection_metadata.get(ws, {})
                    connection_types.append(metadata.get('type', 'unknown'))
                logger.debug(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {len(connections)} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π {connection_types}")
    
    def get_connection_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è API"""
        total_connections = sum(len(connections) for connections in self.active_connections.values())
        
        users_by_type = {'voice': 0, 'notifications': 0, 'unknown': 0}
        connections_by_type = {'voice': 0, 'notifications': 0, 'unknown': 0}
        
        for user_id, connections in self.active_connections.items():
            user_types = set()
            for ws in connections:
                metadata = self.connection_metadata.get(ws, {})
                conn_type = metadata.get('type', 'unknown')
                connections_by_type[conn_type] += 1
                user_types.add(conn_type)
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
            for user_type in user_types:
                users_by_type[user_type] += 1
        
        return {
            'total_users': len(self.active_connections),
            'total_connections': total_connections,
            'active_channels': len(self.channel_connections),
            'users_by_type': users_by_type,
            'connections_by_type': connections_by_type,
            'redis_connected': self.redis_client is not None
        }
    
    async def cleanup_stale_connections(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        logger.info("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
        
        current_time = asyncio.get_event_loop().time()
        stale_threshold = 300  # 5 –º–∏–Ω—É—Ç
        
        stale_connections = []
        
        # –ù–∞—Ö–æ–¥–∏–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for websocket, metadata in self.connection_metadata.items():
            connected_at = metadata.get('connected_at', current_time)
            if current_time - connected_at > stale_threshold:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                try:
                    await websocket.ping()
                except Exception:
                    stale_connections.append(websocket)
        
        # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for websocket in stale_connections:
            await self._handle_broken_connection(websocket)
            
        if stale_connections:
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {len(stale_connections)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
        else:
            logger.debug("üßπ –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
manager = ConnectionManager()