from typing import Dict, List, Set
from fastapi import WebSocket
import json
import redis.asyncio as redis
from app.core.config import settings
from sqlalchemy.ext.asyncio import AsyncSession

class ConnectionManager:
    def __init__(self):
        # –ê–∫—Ç–∏–≤–Ω—ã–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ user_id
        self.active_connections: Dict[int, List[WebSocket]] = {}
        # –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º
        self.channel_connections: Dict[int, Dict[int, WebSocket]] = {}
        self.redis_client = None
    
    async def init_redis(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –¥–ª—è pub/sub"""
        try:
            self.redis_client = redis.from_url("redis://redis:6379")
            await self.redis_client.ping()
            print("Redis connected successfully")
        except Exception as e:
            print(f"Redis connection failed: {e}")
            self.redis_client = None
    
    async def connect(self, websocket: WebSocket, user_id: int, channel_id: int = None):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket"""
        print(f"[ConnectionManager] üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∫–∞–Ω–∞–ª: {channel_id}")
        await websocket.accept()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.active_connections:
            self.active_connections[user_id] = []
            print(f"[ConnectionManager] üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        self.active_connections[user_id].append(websocket)
        print(f"[ConnectionManager] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–≤—Å–µ–≥–æ: {len(self.active_connections[user_id])})")
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–∞–Ω–∞–ª, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if channel_id:
            if channel_id not in self.channel_connections:
                self.channel_connections[channel_id] = {}
                print(f"[ConnectionManager] üÜï –°–æ–∑–¥–∞–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            self.channel_connections[channel_id][user_id] = websocket
            print(f"[ConnectionManager] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {channel_id}")
        
        print(f"[ConnectionManager] üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {len(self.active_connections)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {len(self.channel_connections)} –∫–∞–Ω–∞–ª–æ–≤")
    
    async def disconnect(self, websocket: WebSocket, user_id: int, channel_id: int = None):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket"""
        print(f"[ConnectionManager] üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∫–∞–Ω–∞–ª: {channel_id}")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        if user_id in self.active_connections:
            if websocket in self.active_connections[user_id]:
                self.active_connections[user_id].remove(websocket)
                print(f"[ConnectionManager] üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–æ—Å—Ç–∞–ª–æ—Å—å: {len(self.active_connections[user_id])})")
            
            if not self.active_connections[user_id]:
                del self.active_connections[user_id]
                print(f"[ConnectionManager] üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
        else:
            print(f"[ConnectionManager] ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        if channel_id and channel_id in self.channel_connections:
            if user_id in self.channel_connections[channel_id]:
                del self.channel_connections[channel_id][user_id]
                print(f"[ConnectionManager] üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
            if not self.channel_connections[channel_id]:
                del self.channel_connections[channel_id]
                print(f"[ConnectionManager] üóëÔ∏è –ö–∞–Ω–∞–ª {channel_id} —É–¥–∞–ª–µ–Ω - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        print(f"[ConnectionManager] üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {len(self.active_connections)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {len(self.channel_connections)} –∫–∞–Ω–∞–ª–æ–≤")
    
    async def send_personal_message(self, message: str, websocket: WebSocket):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        await websocket.send_text(message)
    
    async def send_to_channel(self, channel_id: int, message: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–∞–Ω–∞–ª–∞"""
        if channel_id in self.channel_connections:
            message_str = json.dumps(message)
            disconnected = []
            
            for user_id, websocket in self.channel_connections[channel_id].items():
                try:
                    await websocket.send_text(message_str)
                except:
                    disconnected.append(user_id)
            
            # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for user_id in disconnected:
                if user_id in self.channel_connections[channel_id]:
                    del self.channel_connections[channel_id][user_id]
    
    async def send_to_user(self, user_id: int, message: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if user_id in self.active_connections:
            message_str = json.dumps(message)
            disconnected = []
            
            for websocket in self.active_connections[user_id]:
                try:
                    await websocket.send_text(message_str)
                except:
                    disconnected.append(websocket)
            
            # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for websocket in disconnected:
                if websocket in self.active_connections[user_id]:
                    self.active_connections[user_id].remove(websocket)
    
    async def broadcast_to_all(self, message: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        message_str = json.dumps(message)
        disconnected_users = []
        
        for user_id, connections in self.active_connections.items():
            disconnected_connections = []
            
            for websocket in connections:
                try:
                    await websocket.send_text(message_str)
                except:
                    disconnected_connections.append(websocket)
            
            # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for websocket in disconnected_connections:
                connections.remove(websocket)
            
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, –ø–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            if not connections:
                disconnected_users.append(user_id)
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        for user_id in disconnected_users:
            del self.active_connections[user_id]

    async def broadcast(self, message: dict):
        """–ê–ª–∏–∞—Å –¥–ª—è broadcast_to_all"""
        await self.broadcast_to_all(message)

    def get_connected_users(self) -> Set[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return set(self.active_connections.keys())

    def is_user_connected(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        return user_id in self.active_connections and len(self.active_connections[user_id]) > 0
    
    async def broadcast_to_text_channel(self, text_channel_id: int, message: dict):
        """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª"""
        # –ü–æ–ª—É—á–∞–µ–º channel_id –∏–∑ text_channel_id (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ)
        # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º channel_id –Ω–∞–ø—Ä—è–º—É—é
        await self.redis_client.publish(
            f"text_channel:{text_channel_id}",
            json.dumps(message)
        )
    
    async def handle_redis_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Redis"""
        if message["type"] == "message":
            channel = message["channel"].decode()
            data = json.loads(message["data"])
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ channel_id –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
            if channel.startswith("channel:"):
                channel_id = int(channel.split(":")[1])
                # –†–∞—Å—Å—ã–ª–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º
                if channel_id in self.active_connections:
                    for user_id, connection in self.active_connections[channel_id].items():
                        try:
                            await connection.send_json(data)
                        except:
                            pass

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
manager = ConnectionManager()