"""
üöÄ –û—Å–Ω–æ–≤–Ω–æ–π WebSocket Endpoint –¥–ª—è –ß–∞—Ç–∞ –∏ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
Enterprise-level implementation –¥–ª—è 1000+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç:
- –°–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–∞—Ö  
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤/—Å–µ—Ä–≤–µ—Ä–æ–≤)
- –°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
- –¢–∏–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å—ã
"""

import asyncio
import json
import time
from datetime import timezone
from typing import Optional, Dict, Any, List
from fastapi import WebSocket, WebSocketDisconnect, Query
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from app.db.database import AsyncSessionLocal
from app.models import User, Message, TextChannel, Attachment, Reaction
from app.core.security import decode_access_token
from app.services.user_activity_service import user_activity_service
from .enhanced_connection_manager import enhanced_manager
import logging

logger = logging.getLogger(__name__)

class MainWebSocketHandler:
    """
    üéØ –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ï–¥–∏–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    - –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –±–∞—Ç—á–∏–Ω–≥–æ–º
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ heartbeat
    - Graceful error handling
    - Real-time –º–µ—Ç—Ä–∏–∫–∏
    """
    
    def __init__(self):
        self.active_connections: Dict[int, WebSocket] = {}
        self.user_channels: Dict[int, Optional[int]] = {}  # user_id -> channel_id
        
    async def get_user_by_token(self, token: str, db: AsyncSession) -> Optional[User]:
        """üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É"""
        try:
            payload = decode_access_token(token)
            if not payload:
                return None
            
            user_id = payload.get("sub")
            if not user_id:
                return None

            result = await db.execute(select(User).where(User.id == int(user_id)))
            user = result.scalar_one_or_none()
            return user if user and user.is_active else None
            
        except Exception as e:
            logger.error(f"üîê Auth error: {e}")
            return None

    async def handle_connection(self, websocket: WebSocket, token: str):
        """
        üîå –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        """
        db = None
        user = None
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
            db = AsyncSessionLocal()
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            user = await self.get_user_by_token(token, db)
            if not user:
                await websocket.close(code=1008)  # Policy violation
                return

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ enhanced manager
            connected = await enhanced_manager.connect(websocket, user.id)
            if not connected:
                await websocket.close(code=1013)  # Try again later
                return

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            self.active_connections[user.id] = websocket
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await user_activity_service.update_user_activity(user.id, db)
            
            logger.info(f"üéâ User {user.username} (ID: {user.id}) connected to main WebSocket")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ welcome —Å–æ–æ–±—â–µ–Ω–∏—è
            await enhanced_manager.send_to_user(user.id, {
                'type': 'connection_established',
                'user_id': user.id,
                'timestamp': time.time(),
                'server_info': {
                    'version': '2.0.0',
                    'features': ['batching', 'compression', 'heartbeat']
                }
            }, priority=3)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ –æ–Ω–ª–∞–π–Ω
            await enhanced_manager.broadcast({
                'type': 'user_status_changed',
                'user_id': user.id,
                'username': user.display_name or user.username,
                'status': 'online',
                'timestamp': time.time()
            }, exclude_users={user.id})
            
            # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            await self._message_loop(websocket, user, db)
            
        except WebSocketDisconnect:
            logger.info(f"üîå User {user.username if user else 'Unknown'} disconnected normally")
        except Exception as e:
            logger.error(f"üí• Critical error in main WebSocket handler: {e}")
            import traceback
            traceback.print_exc()
        finally:
            await self._cleanup_connection(user, db)

    async def _message_loop(self, websocket: WebSocket, user: User, db: AsyncSession):
        """
        üîÑ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        last_heartbeat = time.time()
        
        while True:
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è heartbeat
                data = await asyncio.wait_for(websocket.receive_text(), timeout=30.0)
                
                try:
                    message_data = json.loads(data)
                except json.JSONDecodeError:
                    await enhanced_manager.send_to_user(user.id, {
                        'type': 'error',
                        'message': 'Invalid JSON format',
                        'timestamp': time.time()
                    })
                    continue
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                enhanced_manager.metrics.messages_received += 1
                enhanced_manager.metrics.bytes_received += len(data.encode())
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                await self._handle_message(message_data, user, db)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                await user_activity_service.update_user_activity(user.id, db)
                last_heartbeat = time.time()
                
            except asyncio.TimeoutError:
                # Heartbeat –ø—Ä–æ–≤–µ—Ä–∫–∞
                if time.time() - last_heartbeat > 60:  # 1 –º–∏–Ω—É—Ç–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    logger.warning(f"‚è∞ Heartbeat timeout for user {user.id}")
                    break
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ ping
                await enhanced_manager.send_to_user(user.id, {
                    'type': 'ping',
                    'timestamp': time.time()
                }, priority=3)

    async def _handle_message(self, message_data: Dict[str, Any], user: User, db: AsyncSession):
        """
        üì® –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        message_type = message_data.get('type')
        
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —Å–æ–æ–±—â–µ–Ω–∏—è
        handlers = {
            'chat_message': self._handle_chat_message,
            'typing': self._handle_typing,
            'heartbeat': self._handle_heartbeat,
            'pong': self._handle_pong,
            'join_channel': self._handle_join_channel,
            'leave_channel': self._handle_leave_channel,
            'reaction_add': self._handle_reaction_add,
            'reaction_remove': self._handle_reaction_remove,
        }
        
        handler = handlers.get(message_type)
        if handler:
            await handler(message_data, user, db)
        else:
            logger.warning(f"ü§∑ Unknown message type: {message_type} from user {user.id}")
            await enhanced_manager.send_to_user(user.id, {
                'type': 'error',
                'message': f'Unknown message type: {message_type}',
                'timestamp': time.time()
            })

    async def _handle_chat_message(self, data: Dict[str, Any], user: User, db: AsyncSession):
        """
        üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
        """
        content = data.get('content', '').strip()
        channel_id = data.get('channel_id')
        attachments = data.get('attachments', [])
        reply_to_id = data.get('reply_to_id')

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not channel_id:
            await enhanced_manager.send_to_user(user.id, {
                'type': 'error',
                'message': 'Channel ID is required',
                'timestamp': time.time()
            })
            return

        if not content and not attachments:
            return

        if len(content) > 5000:
            await enhanced_manager.send_to_user(user.id, {
                'type': 'error', 
                'message': 'Message too long (max 5000 characters)',
                'timestamp': time.time()
            })
            return

        if len(attachments) > 3:
            await enhanced_manager.send_to_user(user.id, {
                'type': 'error',
                'message': 'Too many attachments (max 3)',
                'timestamp': time.time()
            })
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
            channel_result = await db.execute(
                select(TextChannel).where(TextChannel.id == channel_id)
            )
            channel = channel_result.scalar_one_or_none()
            
            if not channel:
                await enhanced_manager.send_to_user(user.id, {
                    'type': 'error',
                    'message': 'Channel not found',
                    'timestamp': time.time()
                })
                return

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            db_message = Message(
                content=content if content else None,
                author_id=user.id,
                text_channel_id=channel_id,
                reply_to_id=reply_to_id if reply_to_id else None,
            )
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π
            for url in attachments:
                attachment = Attachment(file_url=url)
                db_message.attachments.append(attachment)

            db.add(db_message)
            await db.commit()
            await db.refresh(db_message)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
            message_result = await db.execute(
                select(Message)
                .where(Message.id == db_message.id)
                .options(
                    selectinload(Message.author),
                    selectinload(Message.attachments),
                    selectinload(Message.reactions).selectinload(Reaction.user),
                    selectinload(Message.reply_to).selectinload(Message.author)
                )
            )
            full_message = message_result.scalar_one()
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            message_dict = {
                'type': 'new_message',
                'data': {
                    'id': full_message.id,
                    'content': full_message.content,
                    'channelId': full_message.text_channel_id,
                    'timestamp': full_message.timestamp.replace(tzinfo=timezone.utc).isoformat(),
                    'is_edited': full_message.is_edited,
                    'is_deleted': full_message.is_deleted,
                    'author': {
                        'id': full_message.author.id,
                        'username': full_message.author.display_name or full_message.author.username,
                        'email': full_message.author.email,
                        'display_name': full_message.author.display_name,
                        'avatar_url': getattr(full_message.author, 'avatar_url', None)
                    },
                    'attachments': [
                        {
                            'id': att.id,
                            'file_url': att.file_url,
                            'filename': getattr(att, 'filename', None)
                        } for att in full_message.attachments
                    ],
                    'reactions': [],
                    'reply_to': None if not full_message.reply_to else {
                        'id': full_message.reply_to.id,
                        'content': "–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ" if full_message.reply_to.is_deleted else full_message.reply_to.content,
                        'is_deleted': full_message.reply_to.is_deleted,
                        'author': {
                            'id': full_message.reply_to.author.id,
                            'username': full_message.reply_to.author.display_name or full_message.reply_to.author.username,
                            'email': full_message.reply_to.author.email,
                            'display_name': full_message.reply_to.author.display_name,
                            'avatar_url': getattr(full_message.reply_to.author, 'avatar_url', None)
                        }
                    }
                }
            }
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ –±–∞—Ç—á–∏–Ω–≥
            await enhanced_manager.send_to_channel(
                channel_id, 
                message_dict, 
                priority=2  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
            )
            
            logger.info(f"üì® Message sent by {user.username} to channel {channel_id}")
            
        except Exception as e:
            logger.error(f"üí• Error processing chat message: {e}")
            await enhanced_manager.send_to_user(user.id, {
                'type': 'error',
                'message': 'Failed to send message',
                'timestamp': time.time()
            })

    async def _handle_typing(self, data: Dict[str, Any], user: User, db: AsyncSession):
        """
        ‚å®Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—á–∞—Ç–∏
        """
        channel_id = data.get('channel_id')
        if not channel_id:
            return
            
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—á–∞—Ç–∏ —á–µ—Ä–µ–∑ –±–∞—Ç—á–∏–Ω–≥
        await enhanced_manager.send_to_channel(channel_id, {
            'type': 'typing',
            'user': {
                'id': user.id,
                'username': user.display_name or user.username
            },
            'channel_id': channel_id,
            'timestamp': time.time()
        }, exclude_user=user.id, priority=1)  # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è typing

    async def _handle_heartbeat(self, data: Dict[str, Any], user: User, db: AsyncSession):
        """
        üíì –û–±—Ä–∞–±–æ—Ç–∫–∞ heartbeat
        """
        await user_activity_service.heartbeat_user(user.id, db)
        await enhanced_manager.send_to_user(user.id, {
            'type': 'heartbeat_ack',
            'timestamp': time.time()
        }, priority=3)

    async def _handle_pong(self, data: Dict[str, Any], user: User, db: AsyncSession):
        """
        üèì –û–±—Ä–∞–±–æ—Ç–∫–∞ pong –æ—Ç–≤–µ—Ç–∞
        """
        # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        enhanced_manager.pool.update_activity(user.id)

    async def _handle_join_channel(self, data: Dict[str, Any], user: User, db: AsyncSession):
        """
        üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É
        """
        channel_id = data.get('channel_id')
        if not channel_id:
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_channels[user.id] = channel_id
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
        await enhanced_manager.send_to_channel(channel_id, {
            'type': 'user_joined_channel',
            'user': {
                'id': user.id,
                'username': user.display_name or user.username,
                'avatar_url': getattr(user, 'avatar_url', None)
            },
            'channel_id': channel_id,
            'timestamp': time.time()
        }, exclude_user=user.id)

    async def _handle_leave_channel(self, data: Dict[str, Any], user: User, db: AsyncSession):
        """
        üö™ –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        """
        channel_id = data.get('channel_id')
        if not channel_id:
            return
            
        # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        self.user_channels.pop(user.id, None)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
        await enhanced_manager.send_to_channel(channel_id, {
            'type': 'user_left_channel',
            'user': {
                'id': user.id,
                'username': user.display_name or user.username
            },
            'channel_id': channel_id,
            'timestamp': time.time()
        }, exclude_user=user.id)

    async def _handle_reaction_add(self, data: Dict[str, Any], user: User, db: AsyncSession):
        """
        üòÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
        """
        message_id = data.get('message_id')
        emoji = data.get('emoji')
        
        if not message_id or not emoji:
            return
            
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏
        # –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –æ–ø—É—â–µ–Ω–∞, –Ω–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ chat_message
        
        await enhanced_manager.send_to_channel(
            data.get('channel_id', 0),  # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å channel_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            {
                'type': 'reaction_added',
                'message_id': message_id,
                'emoji': emoji,
                'user': {
                    'id': user.id,
                    'username': user.display_name or user.username
                },
                'timestamp': time.time()
            }
        )

    async def _handle_reaction_remove(self, data: Dict[str, Any], user: User, db: AsyncSession):
        """
        ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
        """
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ _handle_reaction_add
        pass

    async def _cleanup_connection(self, user: Optional[User], db: Optional[AsyncSession]):
        """
        üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
        """
        try:
            if user:
                # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                self.active_connections.pop(user.id, None)
                self.user_channels.pop(user.id, None)
                
                # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ enhanced manager
                await enhanced_manager.disconnect(None, user.id)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if not enhanced_manager.is_user_connected(user.id):
                    if db:
                        await user_activity_service.set_user_offline(user.id, db)
                    
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ—Ñ—Ñ–ª–∞–π–Ω
                    await enhanced_manager.broadcast({
                        'type': 'user_status_changed',
                        'user_id': user.id,
                        'username': user.display_name or user.username,
                        'status': 'offline',
                        'timestamp': time.time()
                    })
                
                logger.info(f"üßπ Cleaned up connection for user {user.username}")
            
        except Exception as e:
            logger.error(f"üí• Error during cleanup: {e}")
        finally:
            if db:
                await db.close()

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
main_handler = MainWebSocketHandler()

async def websocket_main_endpoint(websocket: WebSocket, token: str = Query(...)):
    """
    üéØ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
    - –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
    - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    - –°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    - –†–µ–∞–∫—Ü–∏–∏
    - Typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    """
    await main_handler.handle_connection(websocket, token) 