"""
üöÄ Enterprise WebSocket Connection Manager
Optimized for 1000+ concurrent users with advanced features:
- Connection pooling and batching
- Memory optimization
- Real-time metrics
- Auto-scaling capabilities
- Circuit breaker pattern
"""

import asyncio
import time
import weakref
from typing import Dict, List, Set, Optional, Any, Callable
from dataclasses import dataclass, field
from collections import defaultdict, deque
from fastapi import WebSocket
import json
import psutil
import logging
from contextlib import asynccontextmanager

logger = logging.getLogger(__name__)

@dataclass
class ConnectionMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    total_connections: int = 0
    active_channels: int = 0
    messages_sent: int = 0
    messages_received: int = 0
    bytes_sent: int = 0
    bytes_received: int = 0
    avg_latency: float = 0.0
    peak_connections: int = 0
    connection_errors: int = 0
    last_updated: float = field(default_factory=time.time)

@dataclass
class BatchedMessage:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞"""
    channel_id: Optional[int]
    data: Dict[str, Any]
    recipients: Set[int]
    priority: int = 1  # 1=low, 2=normal, 3=high
    timestamp: float = field(default_factory=time.time)

class ConnectionPool:
    """–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏"""
    
    def __init__(self, max_connections: int = 1000):
        self.max_connections = max_connections
        self._connections: Dict[int, WebSocket] = {}
        self._user_channels: Dict[int, Set[int]] = defaultdict(set)
        self._channel_users: Dict[int, Set[int]] = defaultdict(set)
        self._connection_times: Dict[int, float] = {}
        self._last_activity: Dict[int, float] = {}
        
    def add_connection(self, user_id: int, websocket: WebSocket, channel_id: Optional[int] = None) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤"""
        if len(self._connections) >= self.max_connections:
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            self._cleanup_inactive_connections()
            if len(self._connections) >= self.max_connections:
                return False
                
        self._connections[user_id] = websocket
        self._connection_times[user_id] = time.time()
        self._last_activity[user_id] = time.time()
        
        if channel_id:
            self._user_channels[user_id].add(channel_id)
            self._channel_users[channel_id].add(user_id)
            
        return True
    
    def remove_connection(self, user_id: int, channel_id: Optional[int] = None):
        """–£–¥–∞–ª–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        self._connections.pop(user_id, None)
        self._connection_times.pop(user_id, None)
        self._last_activity.pop(user_id, None)
        
        if channel_id and user_id in self._user_channels:
            self._user_channels[user_id].discard(channel_id)
            self._channel_users[channel_id].discard(user_id)
            
            # –û—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            if not self._channel_users[channel_id]:
                del self._channel_users[channel_id]
    
    def get_channel_users(self, channel_id: int) -> Set[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–Ω–∞–ª–∞"""
        return self._channel_users.get(channel_id, set())
    
    def get_user_channels(self, user_id: int) -> Set[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self._user_channels.get(user_id, set())
    
    def update_activity(self, user_id: int):
        """–û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self._last_activity[user_id] = time.time()
    
    def _cleanup_inactive_connections(self, timeout: int = 300):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (5 –º–∏–Ω—É—Ç)"""
        current_time = time.time()
        inactive_users = [
            user_id for user_id, last_activity in self._last_activity.items()
            if current_time - last_activity > timeout
        ]
        
        for user_id in inactive_users:
            self.remove_connection(user_id)

class MessageBatcher:
    """–ë–∞—Ç—á–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, batch_size: int = 50, flush_interval: float = 0.1):
        self.batch_size = batch_size
        self.flush_interval = flush_interval
        self._batches: Dict[int, List[BatchedMessage]] = defaultdict(list)
        self._last_flush = time.time()
        
    def add_message(self, message: BatchedMessage):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞—Ç—á"""
        for recipient in message.recipients:
            self._batches[recipient].append(message)
            
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π flush –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞
        if any(len(batch) >= self.batch_size for batch in self._batches.values()):
            asyncio.create_task(self.flush_all())
    
    async def flush_all(self) -> Dict[int, List[Dict[str, Any]]]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –±–∞—Ç—á–∏"""
        if not self._batches:
            return {}
            
        batched_messages = {}
        for user_id, messages in self._batches.items():
            if messages:
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –≤—Ä–µ–º–µ–Ω–∏
                messages.sort(key=lambda x: (-x.priority, x.timestamp))
                batched_messages[user_id] = [msg.data for msg in messages]
                
        self._batches.clear()
        self._last_flush = time.time()
        return batched_messages
    
    def should_flush(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ flush –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        return time.time() - self._last_flush >= self.flush_interval

class EnhancedConnectionManager:
    """
    üéØ –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 1000+ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    - –ë–∞—Ç—á–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    - Circuit breaker –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
    """
    
    def __init__(self, max_connections: int = 1000):
        # Core connection management
        self.pool = ConnectionPool(max_connections)
        self.batcher = MessageBatcher()
        self.metrics = ConnectionMetrics()
        
        # Performance optimization
        self._send_queue: asyncio.Queue = asyncio.Queue(maxsize=10000)
        self._worker_tasks: List[asyncio.Task] = []
        self._circuit_breaker_failures = 0
        self._circuit_breaker_last_failure = 0
        self._circuit_breaker_open = False
        
        # Monitoring
        self._performance_monitor_task: Optional[asyncio.Task] = None
        self._batch_flush_task: Optional[asyncio.Task] = None
        
        # Start background tasks
        self._start_background_tasks()
    
    def _start_background_tasks(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        # Worker threads for message processing
        for i in range(4):  # 4 worker threads
            task = asyncio.create_task(self._message_worker(f"worker-{i}"))
            self._worker_tasks.append(task)
        
        # Performance monitoring
        self._performance_monitor_task = asyncio.create_task(self._performance_monitor())
        
        # Batch flushing
        self._batch_flush_task = asyncio.create_task(self._batch_flush_worker())
    
    async def connect(self, websocket: WebSocket, user_id: int, channel_id: Optional[int] = None) -> bool:
        """
        üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤
        """
        if self._circuit_breaker_open:
            logger.warning(f"Circuit breaker open, rejecting connection for user {user_id}")
            await websocket.close(code=1013)  # Try again later
            return False
        
        try:
            await websocket.accept()
            
            success = self.pool.add_connection(user_id, websocket, channel_id)
            if not success:
                logger.warning(f"Connection limit reached, rejecting user {user_id}")
                await websocket.close(code=1013)
                return False
            
            # Update metrics
            self.metrics.total_connections = len(self.pool._connections)
            self.metrics.peak_connections = max(self.metrics.peak_connections, self.metrics.total_connections)
            if channel_id:
                self.metrics.active_channels = len(self.pool._channel_users)
            
            logger.info(f"‚úÖ User {user_id} connected to channel {channel_id}. "
                       f"Total connections: {self.metrics.total_connections}")
            return True
            
        except Exception as e:
            logger.error(f"Connection error for user {user_id}: {e}")
            self._circuit_breaker_failures += 1
            self._circuit_breaker_last_failure = time.time()
            self.metrics.connection_errors += 1
            return False
    
    async def disconnect(self, websocket: WebSocket, user_id: int, channel_id: Optional[int] = None):
        """
        üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            self.pool.remove_connection(user_id, channel_id)
            
            # Update metrics
            self.metrics.total_connections = len(self.pool._connections)
            if channel_id:
                self.metrics.active_channels = len(self.pool._channel_users)
            
            logger.info(f"‚ùå User {user_id} disconnected from channel {channel_id}. "
                       f"Total connections: {self.metrics.total_connections}")
            
        except Exception as e:
            logger.error(f"Disconnect error for user {user_id}: {e}")
    
    async def send_to_user(self, user_id: int, message: Dict[str, Any], priority: int = 1):
        """
        üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        await self._send_queue.put({
            'type': 'user',
            'target': user_id,
            'message': message,
            'priority': priority,
            'timestamp': time.time()
        })
    
    async def send_to_channel(self, channel_id: int, message: Dict[str, Any], 
                            exclude_user: Optional[int] = None, priority: int = 1):
        """
        üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫–∞–Ω–∞–ª–∞
        """
        recipients = self.pool.get_channel_users(channel_id)
        if exclude_user:
            recipients = recipients - {exclude_user}
        
        if recipients:
            batched_message = BatchedMessage(
                channel_id=channel_id,
                data=message,
                recipients=recipients,
                priority=priority
            )
            self.batcher.add_message(batched_message)
    
    async def broadcast(self, message: Dict[str, Any], exclude_users: Optional[Set[int]] = None):
        """
        üì° –®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        """
        recipients = set(self.pool._connections.keys())
        if exclude_users:
            recipients = recipients - exclude_users
        
        if recipients:
            batched_message = BatchedMessage(
                channel_id=None,
                data=message,
                recipients=recipients,
                priority=2  # Broadcast –∏–º–µ–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            )
            self.batcher.add_message(batched_message)
    
    async def _message_worker(self, worker_name: str):
        """
        ‚öôÔ∏è –í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        logger.info(f"üîß Message worker {worker_name} started")
        
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                task = await self._send_queue.get()
                
                if task['type'] == 'user':
                    await self._send_direct_message(
                        task['target'], 
                        task['message'], 
                        task['priority']
                    )
                
                self._send_queue.task_done()
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Worker {worker_name} error: {e}")
    
    async def _send_direct_message(self, user_id: int, message: Dict[str, Any], priority: int):
        """
        üì® –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        websocket = self.pool._connections.get(user_id)
        if not websocket:
            return
        
        try:
            start_time = time.time()
            message_json = json.dumps(message)
            await websocket.send_text(message_json)
            
            # Update metrics
            self.metrics.messages_sent += 1
            self.metrics.bytes_sent += len(message_json.encode())
            
            # Update latency
            latency = time.time() - start_time
            self.metrics.avg_latency = (self.metrics.avg_latency * 0.9) + (latency * 0.1)
            
            # Update user activity
            self.pool.update_activity(user_id)
            
        except Exception as e:
            logger.warning(f"Failed to send message to user {user_id}: {e}")
            # Remove broken connection
            self.pool.remove_connection(user_id)
    
    async def _batch_flush_worker(self):
        """
        üîÑ –í–æ—Ä–∫–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞—Ç—á–µ–π
        """
        while True:
            try:
                await asyncio.sleep(self.batcher.flush_interval)
                
                if self.batcher.should_flush():
                    batched_messages = await self.batcher.flush_all()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á–∏
                    for user_id, messages in batched_messages.items():
                        if messages:
                            batch_message = {
                                'type': 'batch',
                                'messages': messages,
                                'timestamp': time.time()
                            }
                            await self.send_to_user(user_id, batch_message, priority=2)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Batch flush worker error: {e}")
    
    async def _performance_monitor(self):
        """
        üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        while True:
            try:
                await asyncio.sleep(10)  # –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                
                # System metrics
                memory_usage = psutil.virtual_memory().percent
                cpu_usage = psutil.cpu_percent()
                
                # Connection metrics
                self.metrics.last_updated = time.time()
                
                # Circuit breaker logic
                if self._circuit_breaker_failures > 10:  # 10 failures in window
                    if time.time() - self._circuit_breaker_last_failure < 60:  # 1 minute window
                        self._circuit_breaker_open = True
                        logger.warning("üö® Circuit breaker opened due to high failure rate")
                    else:
                        self._circuit_breaker_failures = 0
                
                # Reset circuit breaker if no recent failures
                if self._circuit_breaker_open and time.time() - self._circuit_breaker_last_failure > 120:
                    self._circuit_breaker_open = False
                    self._circuit_breaker_failures = 0
                    logger.info("‚úÖ Circuit breaker closed - system recovered")
                
                # Log performance metrics
                logger.info(
                    f"üìä Performance: "
                    f"Connections: {self.metrics.total_connections}/{self.pool.max_connections}, "
                    f"Channels: {self.metrics.active_channels}, "
                    f"Messages sent: {self.metrics.messages_sent}, "
                    f"Avg latency: {self.metrics.avg_latency:.3f}s, "
                    f"Memory: {memory_usage}%, "
                    f"CPU: {cpu_usage}%"
                )
                
                # Memory cleanup if usage is high
                if memory_usage > 80:
                    logger.warning(f"High memory usage ({memory_usage}%), cleaning up connections")
                    self.pool._cleanup_inactive_connections(timeout=120)  # 2 minutes instead of 5
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Performance monitor error: {e}")
    
    def get_metrics(self) -> ConnectionMetrics:
        """üìà –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return self.metrics
    
    def is_user_connected(self, user_id: int) -> bool:
        """üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        return user_id in self.pool._connections
    
    def get_channel_participant_count(self, channel_id: int) -> int:
        """üë• –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞"""
        return len(self.pool.get_channel_users(channel_id))
    
    async def shutdown(self):
        """üõë Graceful shutdown"""
        logger.info("üõë Shutting down EnhancedConnectionManager...")
        
        # Cancel all background tasks
        for task in self._worker_tasks:
            task.cancel()
        
        if self._performance_monitor_task:
            self._performance_monitor_task.cancel()
        
        if self._batch_flush_task:
            self._batch_flush_task.cancel()
        
        # Wait for tasks to complete
        await asyncio.gather(*self._worker_tasks, return_exceptions=True)
        
        # Close all connections
        for websocket in self.pool._connections.values():
            try:
                await websocket.close()
            except:
                pass
        
        logger.info("‚úÖ EnhancedConnectionManager shutdown complete")

# Singleton instance
enhanced_manager = EnhancedConnectionManager(max_connections=1000) 