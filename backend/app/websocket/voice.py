from fastapi import WebSocket, WebSocketDisconnect, Depends, Query
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_, delete
import json
import asyncio
from typing import Dict
from app.db.database import get_db, AsyncSessionLocal
from app.models import User, VoiceChannel, VoiceChannelUser, ChannelMember
from app.core.security import decode_access_token
from app.websocket.connection_manager import manager
from app.core.config import settings

# –•—Ä–∞–Ω–∏–ª–∏—â–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
voice_connections: Dict[int, Dict[int, dict]] = {}  # voice_channel_id -> {user_id -> connection_info}

async def get_current_user_voice(
    websocket: WebSocket,
    token: str,
    db: AsyncSession
) -> User:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–π WebSocket"""
    payload = decode_access_token(token)
    if not payload:
        await websocket.close(code=4001, reason="Invalid token")
        return None
    
    user_id = payload.get("sub")
    if not user_id:
        await websocket.close(code=4001, reason="Invalid token")
        return None
    
    result = await db.execute(
        select(User).where(User.id == int(user_id))
    )
    user = result.scalar_one_or_none()
    
    if not user:
        await websocket.close(code=4001, reason="User not found")
        return None
    
    return user

async def websocket_voice_endpoint(
    websocket: WebSocket,
    channel_id: int,
    token: str
):
    """WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–≤—è–∑–∏"""
    print(f"[VOICE_WS] üéôÔ∏è –ó–∞–ø—Ä–æ—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É {channel_id}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é
    async with AsyncSessionLocal() as db:
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        print(f"[VOICE_WS] üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user = await get_current_user_voice(websocket, token, db)
        if not user:
            print(f"[VOICE_WS] ‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return
        
        print(f"[VOICE_WS] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {user.username} (ID: {user.id})")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        print(f"[VOICE_WS] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ {channel_id}")
        voice_result = await db.execute(
            select(VoiceChannel).where(VoiceChannel.id == channel_id)
        )
        voice_channel = voice_result.scalar_one_or_none()
        
        if not voice_channel:
            print(f"[VOICE_WS] ‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await websocket.close(code=4004, reason="Voice channel not found")
            return
        
        print(f"[VOICE_WS] ‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {voice_channel.name} (–ª–∏–º–∏—Ç: {voice_channel.max_users})")
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–ª–µ–Ω—Å—Ç–≤–∞ - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –ª—é–±—ã–µ –∫–∞–Ω–∞–ª—ã
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print(f"[VOICE_WS] üë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        active_users_result = await db.execute(
            select(VoiceChannelUser).where(
                VoiceChannelUser.voice_channel_id == channel_id
            )
        )
        active_users = active_users_result.scalars().all()
        print(f"[VOICE_WS] üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª–µ: {len(active_users)}/{voice_channel.max_users}")
        
        if len(active_users) >= voice_channel.max_users:
            print(f"[VOICE_WS] ‚ùå –ö–∞–Ω–∞–ª –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω ({len(active_users)}/{voice_channel.max_users})")
            await websocket.close(code=4005, reason="Voice channel is full")
            return
        
        print(f"[VOICE_WS] ü§ù –ü—Ä–∏–Ω–∏–º–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
        await websocket.accept()
        print(f"[VOICE_WS] ‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –≤ –ë–î
        print(f"[VOICE_WS] üíæ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –≤ –ë–î –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
        voice_user = VoiceChannelUser(
            voice_channel_id=channel_id,
            user_id=user.id
        )
        db.add(voice_user)
        await db.commit()
        print(f"[VOICE_WS] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        if channel_id not in voice_connections:
            voice_connections[channel_id] = {}
            print(f"[VOICE_WS] üÜï –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        voice_connections[channel_id][user.id] = {
            "websocket": websocket,
            "user_id": user.id,
            "username": user.display_name or user.username,
            "is_muted": False,
            "is_deafened": False
        }
        print(f"[VOICE_WS] üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            participants = []
            for uid, conn_info in voice_connections[channel_id].items():
                if uid != user.id:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user_info_result = await db.execute(select(User).where(User.id == uid))
                    user_info = user_info_result.scalar_one_or_none()
                    
                    participants.append({
                        "user_id": uid,
                        "username": conn_info["username"],
                        "display_name": user_info.display_name if user_info else None,
                        "avatar_url": user_info.avatar_url if user_info else None,
                        "is_muted": conn_info["is_muted"],
                        "is_deafened": conn_info["is_deafened"]
                    })
            
            print(f"[VOICE_WS] üë• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}")
            await websocket.send_json({
                "type": "participants",
                "participants": participants,
                "ice_servers": settings.ICE_SERVERS
            })
            print(f"[VOICE_WS] ‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            join_message = {
                "type": "user_joined_voice",
                "user_id": user.id,
                "username": user.display_name or user.username,
                "display_name": user.display_name,
                "avatar_url": user.avatar_url
            }
            
            notification_count = 0
            for uid, conn_info in voice_connections[channel_id].items():
                if uid != user.id:
                    try:
                        await conn_info["websocket"].send_json(join_message)
                        notification_count += 1
                        print(f"[VOICE_WS] üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}")
                    except Exception as e:
                        print(f"[VOICE_WS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
            
            print(f"[VOICE_WS] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {notification_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            
            # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            global_join_message = {
                "type": "voice_channel_join",
                "user_id": user.id,
                "username": user.display_name or user.username,
                "voice_channel_id": channel_id,
                "voice_channel_name": voice_channel.name
            }
            await manager.broadcast_to_all(global_join_message)
            print(f"[VOICE_WS] üì¢ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–∞–Ω–∞–ª—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π WebRTC
            print(f"[VOICE_WS] üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É WebRTC —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {user.username}")
            while True:
                try:
                    data = await websocket.receive_json()
                    print(f"[VOICE_WS] üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.username}: {data.get('type', 'unknown')}")
                    
                    if data["type"] == "offer":
                        target_id = data.get("target_id")
                        print(f"[VOICE_WS] üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º offer –æ—Ç {user.id} –¥–ª—è {target_id}")
                        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ offer —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        if target_id and target_id in voice_connections[channel_id]:
                            await voice_connections[channel_id][target_id]["websocket"].send_json({
                                "type": "offer",
                                "from_id": user.id,
                                "offer": data["offer"]
                            })
                            print(f"[VOICE_WS] ‚úÖ Offer –ø–µ—Ä–µ—Å–ª–∞–Ω –æ—Ç {user.id} –∫ {target_id}")
                        else:
                            print(f"[VOICE_WS] ‚ö†Ô∏è –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è offer")
                    
                    elif data["type"] == "answer":
                        target_id = data.get("target_id")
                        print(f"[VOICE_WS] üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º answer –æ—Ç {user.id} –¥–ª—è {target_id}")
                        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ answer —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        if target_id and target_id in voice_connections[channel_id]:
                            await voice_connections[channel_id][target_id]["websocket"].send_json({
                                "type": "answer",
                                "from_id": user.id,
                                "answer": data["answer"]
                            })
                            print(f"[VOICE_WS] ‚úÖ Answer –ø–µ—Ä–µ—Å–ª–∞–Ω –æ—Ç {user.id} –∫ {target_id}")
                        else:
                            print(f"[VOICE_WS] ‚ö†Ô∏è –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è answer")
                    
                    elif data["type"] == "ice_candidate":
                        target_id = data.get("target_id")
                        print(f"[VOICE_WS] üßä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ICE candidate –æ—Ç {user.id} –¥–ª—è {target_id}")
                        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ ICE candidate —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        if target_id and target_id in voice_connections[channel_id]:
                            await voice_connections[channel_id][target_id]["websocket"].send_json({
                                "type": "ice_candidate",
                                "from_id": user.id,
                                "candidate": data["candidate"]
                            })
                            print(f"[VOICE_WS] ‚úÖ ICE candidate –ø–µ—Ä–µ—Å–ª–∞–Ω –æ—Ç {user.id} –∫ {target_id}")
                        else:
                            print(f"[VOICE_WS] ‚ö†Ô∏è –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ICE candidate")
                    
                    elif data["type"] == "mute":
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ mute
                        is_muted = data.get("is_muted", False)
                        print(f"[VOICE_WS] üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {'–∑–∞–≥–ª—É—à–µ–Ω' if is_muted else '–≤–∫–ª—é—á–µ–Ω'}")
                        voice_connections[channel_id][user.id]["is_muted"] = is_muted
                        
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
                        voice_user_result = await db.execute(
                            select(VoiceChannelUser).where(
                                and_(
                                    VoiceChannelUser.voice_channel_id == channel_id,
                                    VoiceChannelUser.user_id == user.id
                                )
                            )
                        )
                        voice_user_db = voice_user_result.scalar_one_or_none()
                        if voice_user_db:
                            voice_user_db.is_muted = is_muted
                            await db.commit()
                            print(f"[VOICE_WS] üíæ –°—Ç–∞—Ç—É—Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")
                        
                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                        mute_message = {
                            "type": "user_muted",
                            "user_id": user.id,
                            "is_muted": is_muted
                        }
                        
                        notification_count = 0
                        for uid, conn_info in voice_connections[channel_id].items():
                            if uid != user.id:
                                try:
                                    await conn_info["websocket"].send_json(mute_message)
                                    notification_count += 1
                                except Exception as e:
                                    print(f"[VOICE_WS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ mute –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
                        
                        print(f"[VOICE_WS] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {notification_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                    
                    elif data["type"] == "deafen":
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ deafen
                        is_deafened = data.get("is_deafened", False)
                        print(f"[VOICE_WS] üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –Ω–∞—É—à–Ω–∏–∫–æ–≤: {'–∑–∞–≥–ª—É—à–µ–Ω—ã' if is_deafened else '–≤–∫–ª—é—á–µ–Ω—ã'}")
                        voice_connections[channel_id][user.id]["is_deafened"] = is_deafened
                        
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
                        voice_user_result = await db.execute(
                            select(VoiceChannelUser).where(
                                and_(
                                    VoiceChannelUser.voice_channel_id == channel_id,
                                    VoiceChannelUser.user_id == user.id
                                )
                            )
                        )
                        voice_user_db = voice_user_result.scalar_one_or_none()
                        if voice_user_db:
                            voice_user_db.is_deafened = is_deafened
                            await db.commit()
                            print(f"[VOICE_WS] üíæ –°—Ç–∞—Ç—É—Å –Ω–∞—É—à–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")
                        
                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                        deafen_message = {
                            "type": "user_deafened",
                            "user_id": user.id,
                            "is_deafened": is_deafened
                        }
                        
                        notification_count = 0
                        for uid, conn_info in voice_connections[channel_id].items():
                            if uid != user.id:
                                try:
                                    await conn_info["websocket"].send_json(deafen_message)
                                    notification_count += 1
                                except Exception as e:
                                    print(f"[VOICE_WS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ deafen –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
                        
                        print(f"[VOICE_WS] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—É—à–Ω–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {notification_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                    
                    elif data["type"] == "speaking":
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        is_speaking = data.get("is_speaking", False)
                        print(f"[VOICE_WS] üó£Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} {'–≥–æ–≤–æ—Ä–∏—Ç' if is_speaking else '–∑–∞–º–æ–ª—á–∞–ª'}")
                        
                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        speaking_message = {
                            "type": "user_speaking",
                            "user_id": user.id,
                            "is_speaking": is_speaking
                        }
                        
                        notification_count = 0
                        for uid, conn_info in voice_connections[channel_id].items():
                            if uid != user.id:
                                try:
                                    await conn_info["websocket"].send_json(speaking_message)
                                    notification_count += 1
                                except Exception as e:
                                    print(f"[VOICE_WS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ speaking –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
                        
                        # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è speaking, —Ç–∞–∫ –∫–∞–∫ –∏—Ö –º–Ω–æ–≥–æ
                    
                    elif data["type"] == "screen_share_start":
                        print(f"[VOICE_WS] üñ•Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –Ω–∞—á–∞–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞")
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ –æ –Ω–∞—á–∞–ª–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
                        screen_share_message = {
                            "type": "screen_share_started",
                            "user_id": user.id,
                            "username": user.display_name or user.username
                        }
                        
                        notification_count = 0
                        for uid, conn_info in voice_connections[channel_id].items():
                            if uid != user.id:
                                try:
                                    await conn_info["websocket"].send_json(screen_share_message)
                                    notification_count += 1
                                except Exception as e:
                                    print(f"[VOICE_WS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
                        
                        print(f"[VOICE_WS] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {notification_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                    
                    elif data["type"] == "screen_share_stop":
                        print(f"[VOICE_WS] üñ•Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞")
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
                        screen_share_message = {
                            "type": "screen_share_stopped",
                            "user_id": user.id,
                            "username": user.display_name or user.username
                        }
                        
                        notification_count = 0
                        for uid, conn_info in voice_connections[channel_id].items():
                            if uid != user.id:
                                try:
                                    await conn_info["websocket"].send_json(screen_share_message)
                                    notification_count += 1
                                except Exception as e:
                                    print(f"[VOICE_WS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
                        
                        print(f"[VOICE_WS] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {notification_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                    
                    else:
                        print(f"[VOICE_WS] ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.username}: {data['type']}")
                        await websocket.send_text(json.dumps({
                            "type": "error",
                            "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {data['type']}"
                        }))
                
                except json.JSONDecodeError as e:
                    print(f"[VOICE_WS] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç {user.username}: {e}")
                except Exception as e:
                    print(f"[VOICE_WS] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.username}: {e}")
                    break
        
        except WebSocketDisconnect:
            print(f"[VOICE_WS] üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ {channel_id}")
        except Exception as e:
            print(f"[VOICE_WS] ‚ùå –û—à–∏–±–∫–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º WebSocket –¥–ª—è {user.username}: {e}")
            import traceback
            traceback.print_exc()
        finally:
            print(f"[VOICE_WS] üßπ –ù–∞—á–∏–Ω–∞–µ–º cleanup –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            if channel_id in voice_connections and user.id in voice_connections[channel_id]:
                del voice_connections[channel_id][user.id]
                print(f"[VOICE_WS] üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É–¥–∞–ª–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
                
                # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—É—Å—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                if not voice_connections[channel_id]:
                    del voice_connections[channel_id]
                    print(f"[VOICE_WS] üóëÔ∏è –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞–Ω–∞–ª–∞ {channel_id} —É–¥–∞–ª–µ–Ω–æ (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ë–î
            try:
                await db.execute(
                    delete(VoiceChannelUser).where(
                        and_(
                            VoiceChannelUser.voice_channel_id == channel_id,
                            VoiceChannelUser.user_id == user.id
                        )
                    )
                )
                await db.commit()
                print(f"[VOICE_WS] üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
            except Exception as e:
                print(f"[VOICE_WS] ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î: {e}")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–± —É—Ö–æ–¥–µ
            leave_message = {
                "type": "user_left_voice",
                "user_id": user.id
            }
            
            notification_count = 0
            if channel_id in voice_connections:
                for uid, conn_info in voice_connections[channel_id].items():
                    try:
                        await conn_info["websocket"].send_json(leave_message)
                        notification_count += 1
                    except Exception as e:
                        print(f"[VOICE_WS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
            
            print(f"[VOICE_WS] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {notification_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            
            # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            global_leave_message = {
                "type": "voice_channel_leave",
                "user_id": user.id,
                "username": user.display_name or user.username,
                "voice_channel_id": channel_id
            }
            await manager.broadcast_to_all(global_leave_message)
            print(f"[VOICE_WS] üì¢ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            print(f"[VOICE_WS] ‚úÖ Cleanup –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")