from fastapi import FastAPI, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from contextlib import asynccontextmanager
import asyncio

from app.core.config import settings
from app.db.database import engine, Base
from app.api import auth, channels, uploads, reactions
from app.websocket import chat, voice
from app.websocket.connection_manager import manager
from app.websocket.chat import websocket_chat_endpoint, websocket_notifications_endpoint
from app.websocket.voice import websocket_voice_endpoint
from app.websocket.main_websocket import websocket_main_endpoint
from app.websocket.enhanced_voice import websocket_voice_endpoint as enhanced_voice_endpoint
from app.websocket.enhanced_connection_manager import enhanced_manager
from app.websocket.enhanced_voice import enhanced_voice_manager
from app.services.user_activity_service import user_activity_service
from app.db.database import AsyncSessionLocal

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –¥–ª—è WebSocket
    await manager.init_redis()
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await user_activity_service.start_cleanup_task(AsyncSessionLocal)
    
    yield
    # Shutdown
    await user_activity_service.stop_cleanup_task()
    if manager.redis_client:
        await manager.redis_client.close()
    
    # Shutdown enhanced managers
    await enhanced_manager.shutdown()
    await enhanced_voice_manager.shutdown()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Miscord API",
    description="Discord-like chat application API",
    version="1.0.0",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(auth.router, prefix="/api/auth", tags=["auth"])
app.include_router(channels.router, prefix="/api/channels", tags=["channels"])
app.include_router(uploads.router, prefix="/api", tags=["uploads"])
app.include_router(reactions.router, prefix="/api", tags=["reactions"])

# üöÄ Enhanced WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (Enterprise-level)
@app.websocket("/ws/main")
async def websocket_main_endpoint_route(websocket: WebSocket, token: str):
    """
    üéØ –û—Å–Ω–æ–≤–Ω–æ–π WebSocket –¥–ª—è —á–∞—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 1000+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞—Ç—á–∏–Ω–≥–æ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
    """
    await websocket_main_endpoint(websocket, token)

@app.websocket("/ws/voice/{voice_channel_id}")
async def websocket_enhanced_voice_endpoint_route(websocket: WebSocket, voice_channel_id: int, token: str):
    """
    üéôÔ∏è Enhanced –≥–æ–ª–æ—Å–æ–≤–æ–π WebSocket —Å WebRTC –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
    –ù–∏–∑–∫–∞—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å, –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 1000+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    await enhanced_voice_endpoint(websocket, voice_channel_id, token)

# üìû Legacy WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
@app.websocket("/ws/legacy/chat/{text_channel_id}")
async def websocket_chat_endpoint_route(websocket: WebSocket, text_channel_id: int, token: str):
    await websocket_chat_endpoint(websocket, text_channel_id, token)

@app.websocket("/ws/legacy/notifications")
async def websocket_notifications_endpoint_route(websocket: WebSocket, token: str):
    await websocket_notifications_endpoint(websocket, token)

@app.websocket("/ws/legacy/voice/{channel_id}")
async def websocket_voice_endpoint_route(websocket: WebSocket, channel_id: int, token: str):
    await websocket_voice_endpoint(websocket, channel_id, token)

# –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
@app.get("/")
async def root():
    return {
        "message": "Welcome to Miscord API - Enhanced Edition",
        "version": "2.0.0",
        "description": "Enterprise-level chat application optimized for 1000+ users",
        "features": [
            "üöÄ High-performance WebSocket with batching",
            "üéôÔ∏è Enhanced voice communication with WebRTC",
            "üìä Real-time performance monitoring", 
            "üîÑ Automatic reconnection and failover",
            "‚ö° Circuit breaker pattern for reliability",
            "üì¶ Message queuing for offline support"
        ],
        "endpoints": {
            "auth": "/api/auth",
            "channels": "/api/channels",
            "uploads": "/api/uploads",
            "reactions": "/api/reactions",
            "enhanced_main_websocket": "/ws/main?token={token}",
            "enhanced_voice_websocket": "/ws/voice/{voice_channel_id}?token={token}",
            "legacy_chat_websocket": "/ws/legacy/chat/{text_channel_id}?token={token}",
            "legacy_voice_websocket": "/ws/legacy/voice/{channel_id}?token={token}",
            "legacy_notifications_websocket": "/ws/legacy/notifications?token={token}"
        },
        "performance": {
            "max_concurrent_connections": 1000,
            "message_batching": "50ms intervals",
            "heartbeat_interval": "15s",
            "auto_reconnection": "exponential backoff",
            "circuit_breaker": "10 failures/60s window"
        }
    }

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
@app.get("/health")
async def health_check():
    return {"status": "healthy"}

# üìä –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
@app.get("/metrics")
async def get_performance_metrics():
    """
    üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    """
    main_metrics = enhanced_manager.get_metrics()
    voice_metrics = enhanced_voice_manager.get_metrics()
    
    return {
        "timestamp": asyncio.get_event_loop().time(),
        "main_websocket": {
            "total_connections": main_metrics.total_connections,
            "active_channels": main_metrics.active_channels,
            "messages_sent": main_metrics.messages_sent,
            "messages_received": main_metrics.messages_received,
            "bytes_sent": main_metrics.bytes_sent,
            "bytes_received": main_metrics.bytes_received,
            "average_latency": main_metrics.avg_latency,
            "peak_connections": main_metrics.peak_connections,
            "connection_errors": main_metrics.connection_errors,
            "last_updated": main_metrics.last_updated
        },
        "voice_websocket": voice_metrics,
        "system": {
            "version": "2.0.0",
            "uptime": asyncio.get_event_loop().time()
        }
    }

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)