from fastapi import FastAPI, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from contextlib import asynccontextmanager
import asyncio
import logging

from app.core.config import settings
from app.db.database import engine, Base
from app.api import auth, channels
from app.websocket import chat, voice
from app.websocket.connection_manager import manager
from app.websocket.chat import websocket_chat_endpoint, websocket_notifications_endpoint
from app.websocket.voice import websocket_voice_endpoint

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
async def cleanup_task():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    while True:
        try:
            await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            await manager.cleanup_stale_connections()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –¥–ª—è WebSocket
    await manager.init_redis()
    
    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    cleanup_task_handle = asyncio.create_task(cleanup_task())
    logger.info("üßπ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
    
    yield
    
    # Shutdown
    cleanup_task_handle.cancel()
    if manager.redis_client:
        await manager.redis_client.close()
    logger.info("üî¥ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Miscord API",
    description="Discord-like chat application API",
    version="1.0.0",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(auth.router, prefix="/api/auth", tags=["auth"])
app.include_router(channels.router, prefix="/api/channels", tags=["channels"])

# WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.websocket("/ws/chat/{channel_id}")
async def websocket_chat_endpoint_route(websocket: WebSocket, channel_id: int, token: str):
    await websocket_chat_endpoint(websocket, channel_id, token)

@app.websocket("/ws/notifications")
async def websocket_notifications_endpoint_route(websocket: WebSocket, token: str):
    await websocket_notifications_endpoint(websocket, token)

@app.websocket("/ws/voice/{channel_id}")
async def websocket_voice_endpoint_route(websocket: WebSocket, channel_id: int, token: str):
    await websocket_voice_endpoint(websocket, channel_id, token)

# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–ª–∞–¥–∫–∏
@app.get("/api/debug/websocket-stats")
async def get_websocket_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    return manager.get_connection_stats()

@app.post("/api/debug/cleanup-connections")
async def force_cleanup_connections():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    await manager.cleanup_stale_connections()
    return {"message": "–û—á–∏—Å—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"}

@app.get("/api/debug/health")
async def debug_health_check():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    stats = manager.get_connection_stats()
    
    return {
        "status": "healthy",
        "websocket_manager": {
            "total_users": stats['total_users'],
            "total_connections": stats['total_connections'],
            "active_channels": stats['active_channels'],
            "redis_connected": stats['redis_connected']
        },
        "services": {
            "database": "connected",  # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ë–î
            "redis": "connected" if stats['redis_connected'] else "disconnected"
        }
    }

# –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
@app.get("/")
async def root():
    stats = manager.get_connection_stats()
    return {
        "message": "Welcome to Miscord API",
        "version": "1.0.0",
        "websocket_stats": {
            "active_users": stats['total_users'],
            "active_connections": stats['total_connections'],
            "active_channels": stats['active_channels']
        },
        "endpoints": {
            "auth": "/api/auth",
            "channels": "/api/channels",
            "websocket_chat": "/ws/chat/{channel_id}",
            "websocket_voice": "/ws/voice/{channel_id}",
            "websocket_notifications": "/ws/notifications",
            "debug": {
                "websocket_stats": "/api/debug/websocket-stats",
                "cleanup_connections": "/api/debug/cleanup-connections",
                "health": "/api/debug/health"
            }
        }
    }

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
@app.get("/health")
async def health_check():
    return {"status": "healthy"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)