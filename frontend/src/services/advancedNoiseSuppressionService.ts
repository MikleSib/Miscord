interface AdvancedNoiseSuppressionSettings {
  enabled: boolean;
  sensitivity: number; // 0-100
  mode: 'gentle' | 'balanced' | 'aggressive'; // –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
  vadEnabled: boolean; // –î–µ—Ç–µ–∫—Ç–æ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  adaptiveThreshold: boolean; // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
  bandCount: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –ø–æ–ª–æ—Å (4, 8, 16)
  debugMode: boolean; // –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
}

interface NoiseSuppressionStats {
  processedFrames: number;
  sensitivity: number;
  noisePowers: number[];
  speechPowers: number[];
  avgSuppression: number;
  vadActivity: boolean;
}

class AdvancedNoiseSuppressionService {
  private audioContext: AudioContext | null = null;
  private workletNode: AudioWorkletNode | null = null;
  private isInitialized = false;
  private settings: AdvancedNoiseSuppressionSettings = {
    enabled: true,
    sensitivity: 75,
    mode: 'balanced',
    vadEnabled: true,
    adaptiveThreshold: true,
    bandCount: 8,
    debugMode: false
  };
  private isSettingsLoaded = false;
  private stats: NoiseSuppressionStats | null = null;

  constructor() {
    // –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –¥–ª—è SSR —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  }

  private ensureSettingsLoaded() {
    if (!this.isSettingsLoaded && typeof window !== 'undefined') {
      this.loadSettings();
      this.isSettingsLoaded = true;
    }
  }

  private loadSettings() {
    if (typeof window === 'undefined') return;
    
    try {
      const saved = localStorage.getItem('advanced-noise-suppression-settings');
      if (saved) {
        const parsedSettings = JSON.parse(saved);
        this.settings = { ...this.settings, ...parsedSettings };
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º —à—É–º–æ–¥–∞–≤, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω
        if (this.settings.enabled === false) {
          console.log('üîá Advanced —à—É–º–æ–¥–∞–≤ –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –≤–∫–ª—é—á–∞–µ–º –µ–≥–æ');
          this.settings.enabled = true;
          this.saveSettings(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        }
      }
    } catch (error) {
      console.error('üîá –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —à—É–º–æ–¥–∞–≤–∞:', error);
    }
  }

  private saveSettings() {
    if (typeof window === 'undefined') return;
    
    try {
      localStorage.setItem('advanced-noise-suppression-settings', JSON.stringify(this.settings));
    } catch (error) {
      console.error('üîá –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —à—É–º–æ–¥–∞–≤–∞:', error);
    }
  }

  async initialize(audioContext: AudioContext): Promise<void> {
    this.ensureSettingsLoaded();
    this.audioContext = audioContext;
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º —à—É–º–æ–¥–∞–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (!this.settings.enabled) {
      console.log('üîá Advanced: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º —à—É–º–æ–¥–∞–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
      this.settings.enabled = true;
      this.saveSettings();
    }
    
    try {
      console.log('üîá –ó–∞–≥—Ä—É–∂–∞–µ–º Advanced Noise Processor...');
      await this.audioContext.audioWorklet.addModule('/advanced-noise-processor.js');
      console.log('üîá Advanced Noise Processor –∑–∞–≥—Ä—É–∂–µ–Ω');
      this.isInitialized = true;
    } catch (error) {
      console.error('üîá –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Advanced Noise Processor:', error);
      throw error;
    }
  }

  async processStream(inputStream: MediaStream): Promise<MediaStream> {
    this.ensureSettingsLoaded();
    
    console.log('üîá Advanced processStream –≤—ã–∑–≤–∞–Ω:', {
      initialized: this.isInitialized,
      hasAudioContext: !!this.audioContext,
      settings: this.settings,
      inputStreamTracks: inputStream.getTracks().length,
      inputStreamActive: inputStream.active
    });

    if (!this.isInitialized || !this.audioContext) {
      console.warn('üîá Advanced —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫');
      return inputStream;
    }

    if (!this.settings.enabled) {
      console.log('üîá Advanced —à—É–º–æ–¥–∞–≤ –æ—Ç–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫');
      return inputStream;
    }

    return await this.processWithAdvancedFilter(inputStream);
  }

  private async processWithAdvancedFilter(inputStream: MediaStream): Promise<MediaStream> {
    if (!this.audioContext) {
      return inputStream;
    }

    try {
      // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
      const source = this.audioContext.createMediaStreamSource(inputStream);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–∞—à –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AudioWorklet —É–∑–µ–ª
      this.workletNode = new AudioWorkletNode(this.audioContext, 'advanced-noise-processor', {
        processorOptions: {
          sensitivity: this.calculateEffectiveSensitivity(),
          mode: this.settings.mode,
          vadEnabled: this.settings.vadEnabled,
          bandCount: this.settings.bandCount
        }
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.setupWorkletMessageHandling();

      // –°–æ–∑–¥–∞–µ–º destination –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
      const destination = this.audioContext.createMediaStreamDestination();

      // –°–æ–µ–¥–∏–Ω—è–µ–º: –∏—Å—Ç–æ—á–Ω–∏–∫ -> Advanced Processor -> destination
      source.connect(this.workletNode);
      this.workletNode.connect(destination);

      console.log('üîá Advanced –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:', this.settings);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      this.startStatsCollection();
      
      return destination.stream;
    } catch (error) {
      console.error('üîá –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å Advanced Filter:', error);
      return inputStream;
    }
  }

  private calculateEffectiveSensitivity(): number {
    let baseSensitivity = this.settings.sensitivity;
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    switch (this.settings.mode) {
      case 'gentle':
        baseSensitivity = Math.max(0, baseSensitivity - 20);
        break;
      case 'aggressive':
        baseSensitivity = Math.min(100, baseSensitivity + 20);
        break;
      case 'balanced':
      default:
        // –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        break;
    }
    
    return baseSensitivity;
  }

  private setupWorkletMessageHandling() {
    if (!this.workletNode) return;

    this.workletNode.port.onmessage = (event) => {
      const { type, data } = event.data;
      
      switch (type) {
        case 'stats':
          this.stats = {
            ...data,
            avgSuppression: data.noisePowers.reduce((a: number, b: number) => a + b, 0) / data.noisePowers.length,
            vadActivity: data.processedFrames % 100 < 10 // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
          };
          break;
        case 'debug':
          if (this.settings.debugMode) {
            console.log('üîá Advanced Debug:', data);
          }
          break;
      }
    };
  }

  private startStatsCollection() {
    if (!this.workletNode) return;
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    setInterval(() => {
      if (this.workletNode && this.settings.enabled) {
        this.workletNode.port.postMessage({ type: 'getStats' });
      }
    }, 2000);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  setEnabled(enabled: boolean) {
    this.ensureSettingsLoaded();
    this.settings.enabled = enabled;
    this.saveSettings();
    console.log('üîá Advanced —à—É–º–æ–¥–∞–≤', enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω');
  }

  setSensitivity(sensitivity: number) {
    this.ensureSettingsLoaded();
    this.settings.sensitivity = Math.max(0, Math.min(100, sensitivity));
    this.saveSettings();
    
    if (this.workletNode) {
      this.workletNode.port.postMessage({
        type: 'setSensitivity',
        sensitivity: this.calculateEffectiveSensitivity()
      });
    }
    
    console.log('üîá Advanced —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', this.settings.sensitivity);
  }

  setMode(mode: 'gentle' | 'balanced' | 'aggressive') {
    this.ensureSettingsLoaded();
    this.settings.mode = mode;
    this.saveSettings();
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (this.workletNode) {
      this.workletNode.port.postMessage({
        type: 'setSensitivity',
        sensitivity: this.calculateEffectiveSensitivity()
      });
    }
    
    console.log('üîá Advanced —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:', mode);
  }

  setVadEnabled(enabled: boolean) {
    this.ensureSettingsLoaded();
    this.settings.vadEnabled = enabled;
    this.saveSettings();
    
    if (this.workletNode) {
      this.workletNode.port.postMessage({
        type: 'setVadEnabled',
        enabled: enabled
      });
    }
    
    console.log('üîá Advanced VAD', enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω');
  }

  setAdaptiveThreshold(enabled: boolean) {
    this.ensureSettingsLoaded();
    this.settings.adaptiveThreshold = enabled;
    this.saveSettings();
    
    if (this.workletNode) {
      this.workletNode.port.postMessage({
        type: 'setAdaptiveThreshold',
        enabled: enabled
      });
    }
    
    console.log('üîá Advanced –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏', enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã');
  }

  setBandCount(bandCount: number) {
    this.ensureSettingsLoaded();
    this.settings.bandCount = Math.max(4, Math.min(16, bandCount));
    this.saveSettings();
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª–æ—Å —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    console.log('üîá Advanced –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ—Å:', this.settings.bandCount, '(—Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)');
  }

  setDebugMode(enabled: boolean) {
    this.ensureSettingsLoaded();
    this.settings.debugMode = enabled;
    this.saveSettings();
    
    if (this.workletNode) {
      this.workletNode.port.postMessage({
        type: 'setDebugMode',
        enabled: enabled
      });
    }
    
    console.log('üîá Advanced —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏', enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω');
  }

  getSettings(): AdvancedNoiseSuppressionSettings {
    this.ensureSettingsLoaded();
    return { ...this.settings };
  }

  getStats(): NoiseSuppressionStats | null {
    return this.stats;
  }

  isSupported(): boolean {
    if (typeof window === 'undefined') return false;
    
    return !!(
      window.AudioContext || 
      (window as any).webkitAudioContext
    ) && 'audioWorklet' in AudioContext.prototype;
  }

  cleanup() {
    if (this.workletNode) {
      this.workletNode.disconnect();
      this.workletNode = null;
    }
    
    console.log('üîá Advanced Noise Suppression –æ—á–∏—â–µ–Ω');
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  getFrequencyAnalysis(): number[] {
    return this.stats?.noisePowers || [];
  }

  getSpeechAnalysis(): number[] {
    return this.stats?.speechPowers || [];
  }

  getRealtimeQuality(): number {
    if (!this.stats) return 0;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const avgNoise = this.stats.noisePowers.reduce((a, b) => a + b, 0) / this.stats.noisePowers.length;
    const avgSpeech = this.stats.speechPowers.reduce((a, b) => a + b, 0) / this.stats.speechPowers.length;
    
    if (avgSpeech === 0) return 0;
    
    const snr = avgSpeech / (avgNoise + 0.001);
    return Math.min(100, Math.max(0, snr * 20)); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 0-100
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const advancedNoiseSuppressionService = new AdvancedNoiseSuppressionService();

export default advancedNoiseSuppressionService;
export type { AdvancedNoiseSuppressionSettings, NoiseSuppressionStats }; 