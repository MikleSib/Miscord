import { Message } from '../types';

const WS_URL = process.env.NEXT_PUBLIC_WS_URL || 'wss://miscord.ru';

interface WebSocketMessage {
  type: string;
  [key: string]: any;
}

type MessageHandler = (message: WebSocketMessage) => void;

class WebSocketService {
  private ws: WebSocket | null = null;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 60;
  private reconnectDelay = 1000;
  private messageHandlers: { [key: string]: (data: any) => void } = {};
  private isReconnecting = false;
  private lastError: string | null = null;
  private connectionStatusHandlers: ((status: {
    isConnected: boolean;
    isReconnecting: boolean;
    reconnectAttempts: number;
    maxReconnectAttempts: number;
    lastError?: string;
  }) => void)[] = [];
  private currentToken: string | null = null;
  private isDisconnecting = false;

  private notifyConnectionStatus() {
    const status = {
      isConnected: this.isConnected(),
      isReconnecting: this.isReconnecting,
      reconnectAttempts: this.reconnectAttempts,
      maxReconnectAttempts: this.maxReconnectAttempts,
      lastError: this.lastError || undefined
    };
    
    console.log('üîî WebSocket —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:', status);
    this.connectionStatusHandlers.forEach(handler => handler(status));
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  onConnectionStatusChange(handler: (status: {
    isConnected: boolean;
    isReconnecting: boolean;
    reconnectAttempts: number;
    maxReconnectAttempts: number;
    lastError?: string;
  }) => void) {
    this.connectionStatusHandlers.push(handler);
    
    // –°—Ä–∞–∑—É —É–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ
    this.notifyConnectionStatus();
  }

  connect(token: string) {
    // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —Å —Ç–µ–º –∂–µ —Ç–æ–∫–µ–Ω–æ–º, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (this.ws?.readyState === WebSocket.OPEN && this.currentToken === token) {
      console.log('üîî WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω —Å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (this.ws && this.ws.readyState !== WebSocket.CLOSED) {
      console.log('üîî –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
      this.isDisconnecting = true;
      this.ws.close(1000, '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    }

    this.currentToken = token;
    this.isReconnecting = true;
    this.isDisconnecting = false;
    this.lastError = null;
    this.notifyConnectionStatus();

    try {
      console.log('üîî –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      this.ws = new WebSocket(`${WS_URL}/ws/notifications?token=${token}`);
      
      this.ws.onopen = () => {
        console.log('üîî WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        this.reconnectAttempts = 0;
        this.isReconnecting = false;
        this.isDisconnecting = false;
        this.lastError = null;
        this.notifyConnectionStatus();
      };

      this.ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          console.log('üîî –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ WebSocket:', data);
          
          // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
          if (data.type && this.messageHandlers[data.type]) {
            this.messageHandlers[data.type](data);
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
          this.lastError = '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è';
          this.notifyConnectionStatus();
        }
      };

      this.ws.onclose = (event) => {
        console.log('üîî WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω:', { 
          code: event.code, 
          reason: event.reason,
          wasClean: event.wasClean,
          isDisconnecting: this.isDisconnecting 
        });
        
        // –ù–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
        if (!this.isDisconnecting) {
          this.isReconnecting = false;
          this.lastError = event.reason || '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ';
          this.notifyConnectionStatus();
          this.handleReconnect(token);
        } else {
          console.log('üîî –ù–∞–º–µ—Ä–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
          this.isReconnecting = false;
          this.notifyConnectionStatus();
        }
      };

      this.ws.onerror = (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        this.lastError = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
        this.isReconnecting = false;
        this.notifyConnectionStatus();
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      this.lastError = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è';
      this.isReconnecting = false;
      this.notifyConnectionStatus();
    }
  }

  private handleReconnect(token: string) {
    if (this.isDisconnecting) {
      console.log('üîî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - –∏–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ');
      return;
    }

    if (this.reconnectAttempts < this.maxReconnectAttempts) {
      this.reconnectAttempts++;
      this.isReconnecting = true;
      this.lastError = `–ü–æ–ø—ã—Ç–∫–∞ ${this.reconnectAttempts}/${this.maxReconnectAttempts}`;
      this.notifyConnectionStatus();
      
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket ${this.reconnectAttempts}/${this.maxReconnectAttempts}`);
      
      setTimeout(() => {
        if (!this.isDisconnecting) {
          this.connect(token);
        }
      }, this.reconnectDelay * this.reconnectAttempts);
    } else {
      this.isReconnecting = false;
      this.lastError = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
      this.notifyConnectionStatus();
    }
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
  onChannelInvitation(handler: (data: { channel_id: number; channel_name: string; invited_by: string }) => void) {
    this.messageHandlers['channel_invitation'] = handler;
  }

  onUserJoinedChannel(handler: (data: { user_id: number; username: string; channel_id: number }) => void) {
    this.messageHandlers['user_joined_channel'] = handler;
  }

  onUserLeftChannel(handler: (data: { user_id: number; channel_id: number }) => void) {
    this.messageHandlers['user_left_channel'] = handler;
  }

  onChannelUpdated(handler: (data: { channel_id: number; changes: any }) => void) {
    this.messageHandlers['channel_updated'] = handler;
  }

  // –ì–æ–ª–æ—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  onVoiceChannelJoin(handler: (data: { user_id: number; username: string; voice_channel_id: number; voice_channel_name: string }) => void) {
    this.messageHandlers['voice_channel_join'] = handler;
  }

  onVoiceChannelLeave(handler: (data: { user_id: number; username: string; voice_channel_id: number }) => void) {
    this.messageHandlers['voice_channel_leave'] = handler;
  }

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞
  onScreenShareStarted(handler: (data: { user_id: number; username: string }) => void) {
    this.messageHandlers['screen_share_started'] = handler;
  }

  onScreenShareStopped(handler: (data: { user_id: number; username: string }) => void) {
    this.messageHandlers['screen_share_stopped'] = handler;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  send(data: any) {
    if (this.ws?.readyState === WebSocket.OPEN) {
      console.log('üîî –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
      this.ws.send(JSON.stringify(data));
    } else {
      console.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–∫—Ä—ã—Ç–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    }
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  disconnect() {
    console.log('üîî –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket —Å–µ—Ä–≤–∏—Å–∞');
    this.isDisconnecting = true;
    
    if (this.ws) {
      // –°–Ω–∞—á–∞–ª–∞ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (this.ws.readyState === WebSocket.OPEN || this.ws.readyState === WebSocket.CONNECTING) {
        this.ws.close(1000, '–ù–∞–º–µ—Ä–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ');
      }
      this.ws = null;
    }
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.messageHandlers = {};
    this.connectionStatusHandlers = [];
    this.reconnectAttempts = 0;
    this.isReconnecting = false;
    this.lastError = null;
    this.currentToken = null;
    
    console.log('üîî WebSocket —Å–µ—Ä–≤–∏—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω –∏ –æ—á–∏—â–µ–Ω');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  isConnected(): boolean {
    return this.ws?.readyState === WebSocket.OPEN;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  getDebugInfo() {
    return {
      readyState: this.ws?.readyState,
      readyStateText: this.ws?.readyState === WebSocket.CONNECTING ? 'CONNECTING' :
                     this.ws?.readyState === WebSocket.OPEN ? 'OPEN' :
                     this.ws?.readyState === WebSocket.CLOSING ? 'CLOSING' :
                     this.ws?.readyState === WebSocket.CLOSED ? 'CLOSED' : 'UNKNOWN',
      isReconnecting: this.isReconnecting,
      reconnectAttempts: this.reconnectAttempts,
      lastError: this.lastError,
      currentToken: this.currentToken ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
      handlersCount: Object.keys(this.messageHandlers).length,
      statusHandlersCount: this.connectionStatusHandlers.length
    };
  }
}

export default new WebSocketService();