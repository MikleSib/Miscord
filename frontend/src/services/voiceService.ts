const WS_URL = process.env.NEXT_PUBLIC_WS_URL || 'wss://miscord.ru';

interface PeerConnection {
  pc: RTCPeerConnection;
  userId: number;
}

class VoiceService {
  private ws: WebSocket | null = null;
  private localStream: MediaStream | null = null;
  private screenStream: MediaStream | null = null; // –ü–æ—Ç–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
  private peerConnections: Map<number, PeerConnection> = new Map();
  private iceServers: RTCIceServer[] = [];
  private voiceChannelId: number | null = null;
  private token: string | null = null;
  private onParticipantJoined: ((participant: any) => void) | null = null;
  private onParticipantLeft: ((userId: number) => void) | null = null;
  private onSpeakingChanged: ((userId: number, isSpeaking: boolean) => void) | null = null;
  private audioContext: AudioContext | null = null;
  private analyser: AnalyserNode | null = null;
  private vadInterval: number | null = null;
  private isSpeaking: boolean = false;
  private speakingUsers: Set<number> = new Set();
  private onParticipantsReceivedCallback: ((participants: any[]) => void) | null = null;
  private onParticipantStatusChangedCallback: ((userId: number, status: Partial<{ is_muted: boolean; is_deafened: boolean }>) => void) | null = null;
  private isScreenSharing: boolean = false; // –°—Ç–∞—Ç—É—Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
  private onScreenShareChanged: ((userId: number, isSharing: boolean) => void) | null = null;
  private isConnecting: boolean = false;

  async connect(voiceChannelId: number, token: string) {
    console.log(`[VoiceService] üéôÔ∏è –ó–∞–ø—Ä–æ—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É ${voiceChannelId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ª–∏ –º—ã —É–∂–µ –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É
    if (this.voiceChannelId === voiceChannelId && this.ws && this.ws.readyState === WebSocket.OPEN) {
      console.log(`[VoiceService] ‚úÖ –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –∫–∞–Ω–∞–ª—É ${voiceChannelId}`);
      return;
    }
    
    if (this.isConnecting) {
      console.log(`[VoiceService] ‚è≥ –£–∂–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å`);
      return;
    }
    
    // –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –¥—Ä—É–≥–æ–º—É –∫–∞–Ω–∞–ª—É –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º
    if (this.ws || this.voiceChannelId) {
      console.log(`[VoiceService] üßπ –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–∫–∞–Ω–∞–ª: ${this.voiceChannelId})`);
      this.cleanup();
    }
    
    this.isConnecting = true;
    this.voiceChannelId = voiceChannelId;
    this.token = token;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
      console.log(`[VoiceService] üé§ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...`);
      this.localStream = await navigator.mediaDevices.getUserMedia({
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true,
        },
        video: false,
      });
      
      console.log(`[VoiceService] ‚úÖ –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –ø–æ–ª—É—á–µ–Ω:`, {
        audioTracks: this.localStream.getAudioTracks().length,
        trackLabels: this.localStream.getAudioTracks().map(t => ({ label: t.label, enabled: t.enabled }))
      });
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      this.initVoiceActivityDetection();
    } catch (error) {
      console.error(`[VoiceService] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:`, error);
      this.isConnecting = false;
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
    const wsUrl = `${WS_URL}/ws/voice/${voiceChannelId}?token=${token}`;
    console.log(`[VoiceService] üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket: ${wsUrl}`);
    this.ws = new WebSocket(wsUrl);

    return new Promise<void>((resolve, reject) => {
      this.ws!.onopen = () => {
        console.log(`[VoiceService] ‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É ${voiceChannelId}`);
        this.isConnecting = false;
        resolve();
      };

      this.ws!.onerror = (error) => {
        console.error(`[VoiceService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:`, error);
        this.isConnecting = false;
        reject(new Error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket'));
      };

      this.ws!.onmessage = async (event) => {
        try {
          const data = JSON.parse(event.data);
          console.log(`[VoiceService] üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:`, data.type, data);
          await this.handleMessage(data);
        } catch (error) {
          console.error(`[VoiceService] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:`, error);
        }
      };

      this.ws!.onclose = (event) => {
        console.log(`[VoiceService] üîå WebSocket –∑–∞–∫—Ä—ã—Ç. –ö–æ–¥: ${event.code}, –ø—Ä–∏—á–∏–Ω–∞: ${event.reason}`);
        this.isConnecting = false;
        this.cleanup();
      };
    });
  }

  private async handleMessage(data: any) {
    switch (data.type) {
      case 'participants':
        console.log(`[VoiceService] üë• –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`, {
          count: data.participants.length,
          participants: data.participants.map((p: any) => ({ id: p.user_id, username: p.username })),
          iceServers: data.ice_servers
        });
        
        this.iceServers = data.ice_servers;
        
        // –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ store
        if (this.onParticipantsReceivedCallback) {
          this.onParticipantsReceivedCallback(data.participants);
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ (–∫—Ä–æ–º–µ —Å–µ–±—è)
        const currentUserId = this.getCurrentUserId();
        for (const participant of data.participants) {
          if (participant.user_id !== currentUserId) {
            // –°–æ–∑–¥–∞–µ–º offer —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—à ID –º–µ–Ω—å—à–µ
            const shouldCreateOffer = currentUserId !== null && currentUserId < participant.user_id;
            console.log(`[VoiceService] ü§ù –°–æ–∑–¥–∞–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${participant.user_id} (${participant.username}), createOffer: ${shouldCreateOffer}`);
            await this.createPeerConnection(participant.user_id, shouldCreateOffer);
          }
        }
        break;

      case 'user_joined_voice':
        console.log(`[VoiceService] ‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: ${data.username} (ID: ${data.user_id})`);
        if (this.onParticipantJoined) {
          this.onParticipantJoined({
            user_id: data.user_id,
            username: data.username,
            display_name: data.display_name,
            avatar_url: data.avatar_url
          });
        }
        // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º—ã —Å–∞–º–∏
        const currentUserId2 = this.getCurrentUserId();
        if (data.user_id !== currentUserId2) {
          // –°–æ–∑–¥–∞–µ–º offer —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—à ID –º–µ–Ω—å—à–µ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç offer –¥–ª—è –Ω–æ–≤–æ–≥–æ)
          const shouldCreateOffer = currentUserId2 !== null && currentUserId2 < data.user_id;
          console.log(`[VoiceService] ü§ù –°–æ–∑–¥–∞–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${data.user_id}, createOffer: ${shouldCreateOffer}`);
          await this.createPeerConnection(data.user_id, shouldCreateOffer);
        }
        break;

      case 'user_left_voice':
        console.log(`[VoiceService] ‚ûñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª: ID ${data.user_id}`);
        if (this.onParticipantLeft) {
          this.onParticipantLeft(data.user_id);
        }
        this.removePeerConnection(data.user_id);
        break;

      case 'offer':
        console.log(`[VoiceService] üìû –ü–æ–ª—É—á–µ–Ω offer –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${data.from_id}`);
        await this.handleOffer(data.from_id, data.offer);
        break;

      case 'answer':
        console.log(`[VoiceService] üìû –ü–æ–ª—É—á–µ–Ω answer –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${data.from_id}`);
        await this.handleAnswer(data.from_id, data.answer);
        break;

      case 'ice_candidate':
        console.log(`[VoiceService] üßä –ü–æ–ª—É—á–µ–Ω ICE candidate –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${data.from_id}:`, data.candidate);
        await this.handleIceCandidate(data.from_id, data.candidate);
        break;
        
      case 'user_speaking':
        console.log(`[VoiceService] üó£Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.user_id}, –≥–æ–≤–æ—Ä–∏—Ç: ${data.is_speaking}`);
        if (this.onSpeakingChanged) {
          this.onSpeakingChanged(data.user_id, data.is_speaking);
        }
        break;
        
      case 'user_muted':
        console.log(`[VoiceService] üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.user_id} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: ${data.is_muted ? '–∑–∞–≥–ª—É—à–µ–Ω' : '–≤–∫–ª—é—á–µ–Ω'}`);
        if (this.onParticipantStatusChangedCallback) {
          this.onParticipantStatusChangedCallback(data.user_id, { is_muted: data.is_muted });
        }
        break;
        
      case 'user_deafened':
        console.log(`[VoiceService] üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.user_id} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –Ω–∞—É—à–Ω–∏–∫–æ–≤: ${data.is_deafened ? '–∑–∞–≥–ª—É—à–µ–Ω—ã' : '–≤–∫–ª—é—á–µ–Ω—ã'}`);
        if (this.onParticipantStatusChangedCallback) {
          this.onParticipantStatusChangedCallback(data.user_id, { is_deafened: data.is_deafened });
        }
        break;

      case 'participant_status_changed':
        console.log(`[VoiceService] üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${data.user_id}:`, data.status);
        if (this.onParticipantStatusChangedCallback) {
          this.onParticipantStatusChangedCallback(data.user_id, data.status);
        }
        break;

      case 'screen_share_started':
        console.log(`[VoiceService] üñ•Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.user_id} –Ω–∞—á–∞–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞`);
        if (this.onScreenShareChanged) {
          this.onScreenShareChanged(data.user_id, true);
        }
        break;

      case 'screen_share_stopped':
        console.log(`[VoiceService] üñ•Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.user_id} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞`);
        // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
        const videoElement = document.getElementById(`remote-video-${data.user_id}`);
        if (videoElement) {
          videoElement.remove();
          console.log(`[VoiceService] üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${data.user_id}`);
        }
        if (this.onScreenShareChanged) {
          this.onScreenShareChanged(data.user_id, false);
        }
        break;
    }
  }

  private async createPeerConnection(userId: number, createOffer: boolean) {
    console.log(`[VoiceService] üîó –°–æ–∑–¥–∞–µ–º RTCPeerConnection –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Å–æ–∑–¥–∞–≤–∞—Ç—å offer: ${createOffer}`);
    
    const pc = new RTCPeerConnection({
      iceServers: this.iceServers,
    });

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    pc.onconnectionstatechange = () => {
      console.log(`[VoiceService] üîó –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${userId}: ${pc.connectionState}`);
    };

    pc.oniceconnectionstatechange = () => {
      console.log(`[VoiceService] üßä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ICE —Å ${userId}: ${pc.iceConnectionState}`);
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
    if (this.localStream) {
      console.log(`[VoiceService] üé§ –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∏ –≤ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${userId}`);
      this.localStream.getTracks().forEach(track => {
        console.log(`[VoiceService] üéµ –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫: ${track.kind}, enabled: ${track.enabled}, label: ${track.label}`);
        pc.addTrack(track, this.localStream!);
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
    pc.ontrack = (event) => {
      console.log(`[VoiceService] üéµ –ü–æ–ª—É—á–µ–Ω remote track –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, {
        kind: event.track.kind,
        id: event.track.id,
        enabled: event.track.enabled,
        readyState: event.track.readyState,
        streams: event.streams.length
      });
      
      if (event.streams && event.streams[0]) {
        const stream = event.streams[0];
        const audioTracks = stream.getAudioTracks();
        const videoTracks = stream.getVideoTracks();

        console.log(`[VoiceService] üéµ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–æ–∫–∞ –æ—Ç ${userId}:`, {
          audioTracks: audioTracks.length,
          videoTracks: videoTracks.length,
          streamId: stream.id
        });

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∏
        if (audioTracks.length > 0) {
          console.log(`[VoiceService] üîä –°–æ–∑–¥–∞–µ–º audio —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
          const remoteAudio = new Audio();
          remoteAudio.srcObject = new MediaStream(audioTracks);
          remoteAudio.autoplay = true;
          remoteAudio.controls = false;
          remoteAudio.muted = false;
          remoteAudio.volume = 1.0;
          
          remoteAudio.id = `remote-audio-${userId}`;
          remoteAudio.style.display = 'none';
          document.body.appendChild(remoteAudio);
          
          console.log(`[VoiceService] üîä Audio —ç–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ DOM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
          setTimeout(() => {
            const savedVolume = localStorage.getItem(`voice-volume-${userId}`);
            if (savedVolume) {
              const volume = parseInt(savedVolume);
              remoteAudio.volume = Math.min(volume / 100, 3.0);
              console.log(`[VoiceService] üîä –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å ${volume}% –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            }
          }, 100);
          
          // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ
          const playPromise = remoteAudio.play();
          if (playPromise !== undefined) {
            playPromise.then(() => {
              console.log(`[VoiceService] ‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            }).catch(error => {
              console.log(`[VoiceService] ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –æ—Ç ${userId}:`, error);
              const enableAudio = () => {
                remoteAudio.play().then(() => {
                  console.log(`[VoiceService] ‚úÖ –ê—É–¥–∏–æ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ—Å–ª–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è ${userId}`);
                  document.removeEventListener('click', enableAudio);
                  document.removeEventListener('touchstart', enableAudio);
                }).catch(e => {
                  console.error(`[VoiceService] ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –¥–ª—è ${userId}:`, e);
                });
              };
              
              document.addEventListener('click', enableAudio, { once: true });
              document.addEventListener('touchstart', enableAudio, { once: true });
            });
          }

          // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É–¥–∏–æ
          this.monitorAudioStats(pc, userId);
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–∏ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞)
        if (videoTracks.length > 0) {
          console.log(`[VoiceService] üñ•Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
          // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
          let remoteVideo = document.getElementById(`remote-video-${userId}`) as HTMLVideoElement;
          if (!remoteVideo) {
            console.log(`[VoiceService] üñ•Ô∏è –°–æ–∑–¥–∞–µ–º video —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            remoteVideo = document.createElement('video');
            remoteVideo.id = `remote-video-${userId}`;
            remoteVideo.autoplay = true;
            remoteVideo.controls = false;
            remoteVideo.muted = true; // –í–∏–¥–µ–æ –≤—Å–µ–≥–¥–∞ –±–µ–∑ –∑–≤—É–∫–∞, –∑–≤—É–∫ –∏–¥–µ—Ç —á–µ—Ä–µ–∑ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç
            remoteVideo.style.position = 'absolute';
            remoteVideo.style.top = '0';
            remoteVideo.style.left = '0';
            remoteVideo.style.width = '100%';
            remoteVideo.style.height = '100%';
            remoteVideo.style.objectFit = 'contain';
            remoteVideo.style.backgroundColor = '#000';
            
            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ ChatArea –¥–ª—è —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            const waitForRemoteContainer = (attempts = 0): void => {
              const videoContainer = document.getElementById('screen-share-container-chat');
              
              if (videoContainer) {
                console.log(`[VoiceService] üñ•Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                videoContainer.innerHTML = '';
                videoContainer.appendChild(remoteVideo);
              } else if (attempts < 50) { // –ú–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥
                setTimeout(() => waitForRemoteContainer(attempts + 1), 100);
              } else {
                console.error(`[VoiceService] ‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ 5 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è`);
                remoteVideo.remove();
                return;
              }
            };
            
            waitForRemoteContainer();
          }
          
          remoteVideo.srcObject = new MediaStream(videoTracks);
          console.log(`[VoiceService] üñ•Ô∏è Video –ø–æ—Ç–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
          if (this.onScreenShareChanged) {
            this.onScreenShareChanged(userId, true);
          }
        }
      }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    pc.onicecandidate = (event) => {
      if (event.candidate) {
        console.log(`[VoiceService] üßä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ICE candidate –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, event.candidate);
        this.sendMessage({
          type: 'ice_candidate',
          target_id: userId,
          candidate: event.candidate,
        });
      } else {
        console.log(`[VoiceService] üßä –í—Å–µ ICE candidates –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      }
    };

    this.peerConnections.set(userId, { pc, userId });

    if (createOffer) {
      console.log(`[VoiceService] üìû –°–æ–∑–¥–∞–µ–º offer –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      try {
        const offer = await pc.createOffer();
        await pc.setLocalDescription(offer);
        console.log(`[VoiceService] üìû Offer —Å–æ–∑–¥–∞–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ LocalDescription –¥–ª—è ${userId}`);
        this.sendMessage({
          type: 'offer',
          target_id: userId,
          offer: offer,
        });
      } catch (error) {
        console.error(`[VoiceService] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer –¥–ª—è ${userId}:`, error);
      }
    }
  }

  private async monitorAudioStats(pc: RTCPeerConnection, userId: number) {
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É WebRTC –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    const statsInterval = setInterval(async () => {
      try {
        const stats = await pc.getStats();
        stats.forEach(report => {
          if (report.type === 'inbound-rtp' && report.mediaType === 'audio') {
            console.log(`[VoiceService] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∞—É–¥–∏–æ –æ—Ç ${userId}:`, {
              packetsReceived: report.packetsReceived,
              packetsLost: report.packetsLost,
              bytesReceived: report.bytesReceived,
              jitter: report.jitter
            });
          }
          if (report.type === 'outbound-rtp' && report.mediaType === 'audio') {
            console.log(`[VoiceService] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∞—É–¥–∏–æ –∫ ${userId}:`, {
              packetsSent: report.packetsSent,
              bytesSent: report.bytesSent,
              retransmittedPacketsSent: report.retransmittedPacketsSent
            });
          }
        });
      } catch (error) {
        console.error(`[VoiceService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è ${userId}:`, error);
        clearInterval(statsInterval);
      }
    }, 5000);

    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    pc.addEventListener('connectionstatechange', () => {
      if (pc.connectionState === 'closed' || pc.connectionState === 'failed') {
        clearInterval(statsInterval);
      }
    });
  }

  private async handleOffer(userId: number, offer: RTCSessionDescriptionInit) {
    console.log(`[VoiceService] üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º offer –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    let peerConnection = this.peerConnections.get(userId);
    
    if (!peerConnection) {
      console.log(`[VoiceService] üîó P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ`);
      await this.createPeerConnection(userId, false);
      peerConnection = this.peerConnections.get(userId)!;
    }

    try {
      await peerConnection.pc.setRemoteDescription(offer);
      console.log(`[VoiceService] üìû RemoteDescription —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${userId}`);
      
      const answer = await peerConnection.pc.createAnswer();
      await peerConnection.pc.setLocalDescription(answer);
      console.log(`[VoiceService] üìû Answer —Å–æ–∑–¥–∞–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ LocalDescription –¥–ª—è ${userId}`);

      this.sendMessage({
        type: 'answer',
        target_id: userId,
        answer: answer,
      });
    } catch (error) {
      console.error(`[VoiceService] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ offer –æ—Ç ${userId}:`, error);
    }
  }

  private async handleAnswer(userId: number, answer: RTCSessionDescriptionInit) {
    console.log(`[VoiceService] üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º answer –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    const peerConnection = this.peerConnections.get(userId);
    if (peerConnection) {
      try {
        await peerConnection.pc.setRemoteDescription(answer);
        console.log(`[VoiceService] ‚úÖ Answer —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è ${userId}`);
      } catch (error) {
        console.error(`[VoiceService] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ answer –æ—Ç ${userId}:`, error);
      }
    } else {
      console.warn(`[VoiceService] ‚ö†Ô∏è P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ answer`);
    }
  }

  private async handleIceCandidate(userId: number, candidate: RTCIceCandidateInit) {
    console.log(`[VoiceService] üßä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ICE candidate –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    const peerConnection = this.peerConnections.get(userId);
    if (peerConnection) {
      try {
        await peerConnection.pc.addIceCandidate(candidate);
        console.log(`[VoiceService] ‚úÖ ICE candidate —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${userId}`);
      } catch (error) {
        console.error(`[VoiceService] ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE candidate –¥–ª—è ${userId}:`, error);
      }
    } else {
      console.warn(`[VoiceService] ‚ö†Ô∏è P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ICE candidate`);
    }
  }

  private removePeerConnection(userId: number) {
    console.log(`[VoiceService] üóëÔ∏è –£–¥–∞–ª—è–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
    const peerConnection = this.peerConnections.get(userId);
    if (peerConnection) {
      peerConnection.pc.close();
      this.peerConnections.delete(userId);
      console.log(`[VoiceService] ‚úÖ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${userId} –∑–∞–∫—Ä—ã—Ç–æ –∏ —É–¥–∞–ª–µ–Ω–æ`);
    }
    
    // –£–¥–∞–ª—è–µ–º –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ DOM
    const audioElement = document.getElementById(`remote-audio-${userId}`);
    if (audioElement) {
      audioElement.remove();
      console.log(`[VoiceService] üóëÔ∏è Audio —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    }

    // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ DOM
    const videoElement = document.getElementById(`remote-video-${userId}`);
    if (videoElement) {
      videoElement.remove();
      console.log(`[VoiceService] üóëÔ∏è Video —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
      if (this.onScreenShareChanged) {
        this.onScreenShareChanged(userId, false);
      }
    }
  }

  private sendMessage(data: any) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      console.log(`[VoiceService] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:`, data.type, data);
      this.ws.send(JSON.stringify(data));
    } else {
      console.warn(`[VoiceService] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - WebSocket –Ω–µ –æ—Ç–∫—Ä—ã—Ç`, data);
    }
  }

  setMuted(muted: boolean) {
    console.log(`[VoiceService] üîá –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: ${muted ? '–∑–∞–≥–ª—É—à–∞–µ–º' : '–≤–∫–ª—é—á–∞–µ–º'}`);
    if (this.localStream) {
      this.localStream.getAudioTracks().forEach(track => {
        track.enabled = !muted;
        console.log(`[VoiceService] üé§ –¢—Ä–µ–∫ ${track.label}: enabled = ${track.enabled}`);
      });
    }
    this.sendMessage({ type: 'mute', is_muted: muted });
  }

  setDeafened(deafened: boolean) {
    console.log(`[VoiceService] üîá –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞—É—à–Ω–∏–∫–æ–≤: ${deafened ? '–∑–∞–≥–ª—É—à–∞–µ–º –≤—Å–µ—Ö' : '–≤–∫–ª—é—á–∞–µ–º –∑–≤—É–∫'}`);
    // –ó–∞–≥–ª—É—à–∞–µ–º –≤—Å–µ—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.peerConnections.forEach((_, userId) => {
      const audioElement = document.getElementById(`remote-audio-${userId}`) as HTMLAudioElement;
      if (audioElement) {
        audioElement.muted = deafened;
        console.log(`[VoiceService] üîä Audio —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: muted = ${deafened}`);
      }
    });
    
    this.sendMessage({ type: 'deafen', is_deafened: deafened });
  }

  onParticipantJoin(callback: (participant: any) => void) {
    this.onParticipantJoined = callback;
  }

  onParticipantLeave(callback: (userId: number) => void) {
    this.onParticipantLeft = callback;
  }

  disconnect() {
    console.log(`[VoiceService] üîå –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ${this.voiceChannelId}`);
    if (this.ws) {
      this.ws.close();
    }
    this.cleanup();
  }

  private cleanup() {
    console.log(`[VoiceService] üßπ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤`);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    this.cleanupVoiceActivityDetection();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ peer connections
    const peerCount = this.peerConnections.size;
    this.peerConnections.forEach((peerConnection, userId) => {
      console.log(`[VoiceService] üîó –ó–∞–∫—Ä—ã–≤–∞–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
      peerConnection.pc.close();
      
      // –£–¥–∞–ª—è–µ–º –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã
      const audioElement = document.getElementById(`remote-audio-${userId}`);
      if (audioElement) {
        audioElement.remove();
        console.log(`[VoiceService] üóëÔ∏è Audio —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      }

      // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã
      const videoElement = document.getElementById(`remote-video-${userId}`);
      if (videoElement) {
        videoElement.remove();
        console.log(`[VoiceService] üóëÔ∏è Video —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      }
    });
    this.peerConnections.clear();
    console.log(`[VoiceService] ‚úÖ –ó–∞–∫—Ä—ã—Ç–æ ${peerCount} P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π`);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
    if (this.localStream) {
      const trackCount = this.localStream.getTracks().length;
      this.localStream.getTracks().forEach(track => {
        track.stop();
        console.log(`[VoiceService] üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫: ${track.kind} (${track.label})`);
      });
      this.localStream = null;
      console.log(`[VoiceService] ‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${trackCount} –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤`);
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
    if (this.screenStream) {
      const trackCount = this.screenStream.getTracks().length;
      this.screenStream.getTracks().forEach(track => {
        track.stop();
        console.log(`[VoiceService] üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç—Ä–µ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞: ${track.kind}`);
      });
      this.screenStream = null;
      this.isScreenSharing = false;
      console.log(`[VoiceService] ‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${trackCount} —Ç—Ä–µ–∫–æ–≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞`);
    }

    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
    const screenShareContainer = document.getElementById('screen-share-container-chat');
    if (screenShareContainer) {
      screenShareContainer.innerHTML = '';
      console.log(`[VoiceService] üóëÔ∏è –û—á–∏—â–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞`);
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã
    const remainingVideos = document.querySelectorAll('video[id^="remote-video-"]');
    remainingVideos.forEach(video => {
      video.remove();
      console.log(`[VoiceService] üóëÔ∏è –£–¥–∞–ª–µ–Ω –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π video —ç–ª–µ–º–µ–Ω—Ç: ${video.id}`);
    });

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ audio —ç–ª–µ–º–µ–Ω—Ç—ã
    const remainingAudios = document.querySelectorAll('audio[id^="remote-audio-"]');
    remainingAudios.forEach(audio => {
      audio.remove();
      console.log(`[VoiceService] üóëÔ∏è –£–¥–∞–ª–µ–Ω –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π audio —ç–ª–µ–º–µ–Ω—Ç: ${audio.id}`);
    });

    this.ws = null;
    this.voiceChannelId = null;
    this.token = null;
    this.iceServers = [];
    this.isConnecting = false;
    
    console.log(`[VoiceService] ‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
  }

  private initVoiceActivityDetection() {
    if (!this.localStream) {
      console.warn(`[VoiceService] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é –≥–æ–ª–æ—Å–∞ - –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞`);
      return;
    }

    try {
      console.log(`[VoiceService] üéôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`);
      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      const source = this.audioContext.createMediaStreamSource(this.localStream);
      this.analyser = this.audioContext.createAnalyser();
      
      this.analyser.fftSize = 256;
      this.analyser.minDecibels = -90;
      this.analyser.maxDecibels = -10;
      this.analyser.smoothingTimeConstant = 0.85;
      
      source.connect(this.analyser);
      
      this.startVoiceActivityDetection();
    } catch (error) {
      // –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VAD
    }
  }

  private startVoiceActivityDetection() {
    if (!this.analyser) return;

    const bufferLength = this.analyser.frequencyBinCount;
    const dataArray = new Uint8Array(bufferLength);
    
    const checkAudioLevel = () => {
      try {
        this.analyser!.getByteFrequencyData(dataArray);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —á–∞—Å—Ç–æ—Ç–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        const lowFreq = dataArray.slice(0, bufferLength / 4);
        const midFreq = dataArray.slice(bufferLength / 4, bufferLength / 2);
        const highFreq = dataArray.slice(bufferLength / 2, bufferLength);
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        const lowAverage = lowFreq.reduce((a, b) => a + b, 0) / lowFreq.length;
        const midAverage = midFreq.reduce((a, b) => a + b, 0) / midFreq.length;
        const highAverage = highFreq.reduce((a, b) => a + b, 0) / highFreq.length;
        
        // –û–±—â–∏–π —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Å –≤–µ—Å–∞–º–∏
        const totalAverage = (lowAverage * 0.3 + midAverage * 0.5 + highAverage * 0.2);
        
                 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ä–µ–¥–Ω–∏—Ö —á–∞—Å—Ç–æ—Ç–∞—Ö (–≥–æ–ª–æ—Å)
         let maxValue = 0;
         for (let i = 0; i < midFreq.length; i++) {
           if (midFreq[i] > maxValue) {
             maxValue = midFreq[i];
           }
         }
        
        // –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—á–∏ (–±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π)
        const speechThreshold = 35;
        const maxThreshold = 80;
        
        const currentlySpeaking = (totalAverage > speechThreshold && maxValue > maxThreshold);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        if (currentlySpeaking !== this.isSpeaking) {
          this.isSpeaking = currentlySpeaking;
          this.sendMessage({
            type: 'speaking',
            is_speaking: this.isSpeaking
          });
        }
      } catch (error) {
        // –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      }
    };

    this.vadInterval = setInterval(checkAudioLevel, 100) as any;
  }

  private getCurrentUserId(): number | null {
    if (!this.token) return null;
    
    try {
      const payload = JSON.parse(atob(this.token.split('.')[1]));
      return payload.user_id || null;
    } catch {
      return null;
    }
  }

  private cleanupVoiceActivityDetection() {
    if (this.vadInterval) {
      clearInterval(this.vadInterval);
      this.vadInterval = null;
    }
    
    if (this.audioContext) {
      this.audioContext.close();
      this.audioContext = null;
    }
    
    this.analyser = null;
    this.isSpeaking = false;
  }

  onSpeakingChange(callback: (userId: number, isSpeaking: boolean) => void) {
    this.onSpeakingChanged = callback;
  }

  onParticipantsReceived(callback: (participants: any[]) => void) {
    this.onParticipantsReceivedCallback = callback;
  }

  onParticipantStatusChanged(callback: (userId: number, status: Partial<{ is_muted: boolean; is_deafened: boolean }>) => void) {
    this.onParticipantStatusChangedCallback = callback;
  }

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞
  async startScreenShare(): Promise<boolean> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç–æ–∫ —ç–∫—Ä–∞–Ω–∞
      this.screenStream = await navigator.mediaDevices.getDisplayMedia({
        video: {
          width: { ideal: 1920 },
          height: { ideal: 1080 },
          frameRate: { ideal: 30 }
        },
        audio: true // –í–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ —Å–∏—Å—Ç–µ–º—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
      this.screenStream.getVideoTracks()[0].addEventListener('ended', () => {
        this.stopScreenShare();
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∞
      const audioTracks = this.screenStream.getAudioTracks();
      if (audioTracks.length > 0) {
        audioTracks[0].addEventListener('ended', () => {
          // –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ç—Ä–µ–∫ –∫–æ –≤—Å–µ–º peer connections
      this.peerConnections.forEach(async ({ pc }, userId) => {
        try {
          // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ç—Ä–µ–∫
          const videoTracks = this.screenStream!.getVideoTracks();
          if (videoTracks.length > 0) {
            pc.addTrack(videoTracks[0], this.screenStream!);
          }

          // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞—É–¥–∏–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
          if (audioTracks.length > 0) {
            const existingAudioSenders = pc.getSenders().filter(sender => 
              sender.track && sender.track.kind === 'audio'
            );
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π —Ç—Ä–µ–∫
            const isSystemAudio = audioTracks[0].label.includes('System') || 
                                 audioTracks[0].label.includes('Desktop') ||
                                 audioTracks[0].getSettings().deviceId !== 'default';
            
            if (isSystemAudio) {
              pc.addTrack(audioTracks[0], this.screenStream!);
            }
          }

          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π offer —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ connection state –ø–æ–∑–≤–æ–ª—è–µ—Ç
          if (pc.connectionState === 'connected' || pc.connectionState === 'new') {
            const offer = await pc.createOffer();
            await pc.setLocalDescription(offer);
            this.sendMessage({
              type: 'offer',
              target_id: userId,
              offer: offer,
            });
          }
        } catch (error) {
          // –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–∞
        }
      });

      // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞
      this.createLocalScreenShareVideo();

      this.isScreenSharing = true;
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ –Ω–∞—á–∞–ª–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
      this.sendMessage({ 
        type: 'screen_share_start'
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
      const currentUserId = this.getCurrentUserId();
      if (currentUserId) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º "–í—ã"
        let username = '–í—ã';
        try {
          if (this.token) {
            const payload = JSON.parse(atob(this.token.split('.')[1]));
            username = payload.username || '–í—ã';
          }
        } catch (error) {
          // –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
        }
        
        const event = new CustomEvent('screen_share_start', {
          detail: { 
            user_id: currentUserId,
            username: username
          }
        });
        window.dispatchEvent(event);
      }

      return true;
    } catch (error) {
      return false;
    }
  }

  stopScreenShare() {
    if (!this.screenStream) return;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    const userId = this.getCurrentUserId();
    if (userId) {
      const event = new CustomEvent('screen_share_stop', {
        detail: { 
          user_id: userId
        }
      });
      window.dispatchEvent(event);
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏
    this.screenStream.getTracks().forEach(track => {
      track.stop();
    });

    // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–∏ –∏–∑ –≤—Å–µ—Ö peer connections
    this.peerConnections.forEach(async ({ pc }, userId) => {
      try {
        const senders = pc.getSenders();
        senders.forEach((sender: RTCRtpSender) => {
          if (sender.track && sender.track.kind === 'video') {
            // –ó–∞–º–µ–Ω—è–µ–º –≤–∏–¥–µ–æ —Ç—Ä–µ–∫ –Ω–∞ null –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
            sender.replaceTrack(null).then(() => {
              // –í–∏–¥–µ–æ —Ç—Ä–µ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            }).catch(error => {
              // –ï—Å–ª–∏ replaceTrack –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —É–¥–∞–ª—è–µ–º —Ç—Ä–µ–∫
              pc.removeTrack(sender);
            });
          }
        });

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π offer –±–µ–∑ –≤–∏–¥–µ–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ connection –∞–∫—Ç–∏–≤–Ω–æ
        if (pc.connectionState === 'connected') {
          pc.createOffer().then((offer: RTCSessionDescriptionInit) => {
            pc.setLocalDescription(offer);
            this.sendMessage({
              type: 'offer',
              target_id: userId,
              offer: offer,
            });
          }).catch((error: any) => {
            // –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer –±–µ–∑ –≤–∏–¥–µ–æ
          });
        }
      } catch (error) {
        // –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      }
    });

    this.screenStream = null;
    this.isScreenSharing = false;

    // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
    const currentUserId = this.getCurrentUserId();
    if (currentUserId) {
      const localVideo = document.getElementById(`remote-video-${currentUserId}`) as HTMLVideoElement;
      if (localVideo) {
        localVideo.remove();
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (this.onScreenShareChanged) {
        this.onScreenShareChanged(currentUserId, false);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
      const event = new CustomEvent('screen_share_stop', {
        detail: { 
          user_id: currentUserId
        }
      });
      window.dispatchEvent(event);
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
    this.sendMessage({ 
      type: 'screen_share_stop'
    });
  }

  getScreenSharingStatus(): boolean {
    return this.isScreenSharing;
  }

  onScreenShareChange(callback: (userId: number, isSharing: boolean) => void) {
    this.onScreenShareChanged = callback;
  }

  private createLocalScreenShareVideo() {
    const currentUserId = this.getCurrentUserId();
    if (!currentUserId || !this.screenStream) return;

    // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let localVideo = document.getElementById(`remote-video-${currentUserId}`) as HTMLVideoElement;
    if (!localVideo) {
      localVideo = document.createElement('video');
      localVideo.id = `remote-video-${currentUserId}`;
      localVideo.autoplay = true;
      localVideo.controls = false;
      localVideo.muted = true;
      localVideo.style.position = 'absolute';
      localVideo.style.top = '0';
      localVideo.style.left = '0';
      localVideo.style.width = '100%';
      localVideo.style.height = '100%';
      localVideo.style.objectFit = 'contain';
      localVideo.style.backgroundColor = '#000';
    }
    
    localVideo.srcObject = this.screenStream;
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ ChatArea (–º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥)
    const waitForContainer = (attempts = 0): void => {
      const videoContainer = document.getElementById('screen-share-container-chat');
      
      if (videoContainer) {
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
        videoContainer.innerHTML = '';
        videoContainer.appendChild(localVideo);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
        setTimeout(() => {
          const addedVideo = document.getElementById(`remote-video-${currentUserId}`);
          if (addedVideo) {
            // –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ DOM
          }
        }, 1000);
      } else if (attempts < 50) {
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω, –∂–¥–µ–º
        setTimeout(() => waitForContainer(attempts + 1), 100);
      } else {
        // –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        localVideo.remove();
        return;
      }
    };
    
    waitForContainer();

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (this.onScreenShareChanged) {
      this.onScreenShareChanged(currentUserId, true);
    }
  }
}

export default new VoiceService();