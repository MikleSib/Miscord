const WS_URL = process.env.NEXT_PUBLIC_WS_URL || 'wss://miscord.ru';

console.log('üéôÔ∏è VoiceService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å WS_URL:', WS_URL);

interface PeerConnection {
  pc: RTCPeerConnection;
  userId: number;
}

class VoiceService {
  private ws: WebSocket | null = null;
  private localStream: MediaStream | null = null;
  private screenStream: MediaStream | null = null; // –ü–æ—Ç–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
  private peerConnections: Map<number, PeerConnection> = new Map();
  private iceServers: RTCIceServer[] = [];
  private voiceChannelId: number | null = null;
  private token: string | null = null;
  private onParticipantJoined: ((participant: any) => void) | null = null;
  private onParticipantLeft: ((userId: number) => void) | null = null;
  private onSpeakingChanged: ((userId: number, isSpeaking: boolean) => void) | null = null;
  private audioContext: AudioContext | null = null;
  private analyser: AnalyserNode | null = null;
  private vadInterval: number | null = null;
  private isSpeaking: boolean = false;
  private speakingUsers: Set<number> = new Set();
  private onParticipantsReceivedCallback: ((participants: any[]) => void) | null = null;
  private onParticipantStatusChangedCallback: ((userId: number, status: Partial<{ is_muted: boolean; is_deafened: boolean }>) => void) | null = null;
  private isScreenSharing: boolean = false; // –°—Ç–∞—Ç—É—Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
  private onScreenShareChanged: ((userId: number, isSharing: boolean) => void) | null = null;

  async connect(voiceChannelId: number, token: string) {
    console.log('üéôÔ∏è VoiceService.connect –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { voiceChannelId, token: token ? '–µ—Å—Ç—å' : '–Ω–µ—Ç' });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ª–∏ –º—ã —É–∂–µ –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É
    if (this.voiceChannelId === voiceChannelId && this.ws && this.ws.readyState === WebSocket.OPEN) {
      console.log('üéôÔ∏è –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
      return;
    }
    
    // –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –¥—Ä—É–≥–æ–º—É –∫–∞–Ω–∞–ª—É –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º
    if (this.ws || this.voiceChannelId) {
      console.log('üéôÔ∏è –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º');
      this.cleanup();
    }
    
    this.voiceChannelId = voiceChannelId;
    this.token = token;

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
    try {
      console.log('üéôÔ∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...');
      this.localStream = await navigator.mediaDevices.getUserMedia({
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true,
        },
        video: false,
      });
      console.log('üéôÔ∏è –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –ø–æ–ª—É—á–µ–Ω');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      this.initVoiceActivityDetection();
    } catch (error) {
      console.error('üéôÔ∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
    const wsUrl = `${WS_URL}/ws/voice/${voiceChannelId}?token=${token}`;
    console.log('üéôÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket:', wsUrl);
    this.ws = new WebSocket(wsUrl);

    return new Promise<void>((resolve, reject) => {
      this.ws!.onopen = () => {
        console.log('üéôÔ∏è Voice WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        resolve();
      };

      this.ws!.onerror = (error) => {
        console.error('üéôÔ∏è –û—à–∏–±–∫–∞ Voice WebSocket:', error);
        reject(new Error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket'));
      };

      this.ws!.onmessage = async (event) => {
        console.log('üéôÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ WebSocket:', event.data);
        const data = JSON.parse(event.data);
        await this.handleMessage(data);
      };

      this.ws!.onclose = (event) => {
        console.log('üéôÔ∏è Voice WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:', event.code, event.reason);
        this.cleanup();
      };
    });
  }

  private async handleMessage(data: any) {
    console.log('üîä VoiceService –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.type, data);
    
    switch (data.type) {
      case 'participants':
        this.iceServers = data.ice_servers;
        console.log('üîä ICE —Å–µ—Ä–≤–µ—Ä—ã:', this.iceServers);
        
        // –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ store
        if (this.onParticipantsReceivedCallback) {
          this.onParticipantsReceivedCallback(data.participants);
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ (–∫—Ä–æ–º–µ —Å–µ–±—è)
        const currentUserId = this.getCurrentUserId();
        for (const participant of data.participants) {
          if (participant.user_id !== currentUserId) {
            console.log('üîä –°–æ–∑–¥–∞–µ–º peer connection —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º:', participant.user_id, participant.username);
            // –°–æ–∑–¥–∞–µ–º offer —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—à ID –º–µ–Ω—å—à–µ
            const shouldCreateOffer = currentUserId !== null && currentUserId < participant.user_id;
            await this.createPeerConnection(participant.user_id, shouldCreateOffer);
          }
        }
        break;

      case 'user_joined_voice':
        console.log('üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É:', data.user_id, data.username);
        if (this.onParticipantJoined) {
          this.onParticipantJoined({
            user_id: data.user_id,
            username: data.username,
            display_name: data.display_name,
            avatar_url: data.avatar_url
          });
        }
        // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º—ã —Å–∞–º–∏
        const currentUserId2 = this.getCurrentUserId();
        if (data.user_id !== currentUserId2) {
          // –°–æ–∑–¥–∞–µ–º offer —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—à ID –º–µ–Ω—å—à–µ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç offer –¥–ª—è –Ω–æ–≤–æ–≥–æ)
          const shouldCreateOffer = currentUserId2 !== null && currentUserId2 < data.user_id;
          await this.createPeerConnection(data.user_id, shouldCreateOffer);
        }
        break;

      case 'user_left_voice':
        console.log('üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª:', data.user_id);
        if (this.onParticipantLeft) {
          this.onParticipantLeft(data.user_id);
        }
        this.removePeerConnection(data.user_id);
        break;

      case 'offer':
        console.log('üîä –ü–æ–ª—É—á–µ–Ω offer –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data.from_id);
        await this.handleOffer(data.from_id, data.offer);
        break;

      case 'answer':
        console.log('üîä –ü–æ–ª—É—á–µ–Ω answer –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data.from_id);
        await this.handleAnswer(data.from_id, data.answer);
        break;

      case 'ice_candidate':
        console.log('üîä –ü–æ–ª—É—á–µ–Ω ICE candidate –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data.from_id);
        await this.handleIceCandidate(data.from_id, data.candidate);
        break;
        
      case 'user_speaking':
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç
        if (this.onSpeakingChanged) {
          this.onSpeakingChanged(data.user_id, data.is_speaking);
        }
        break;
        
      case 'user_muted':
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        if (this.onParticipantStatusChangedCallback) {
          this.onParticipantStatusChangedCallback(data.user_id, { is_muted: data.is_muted });
        }
        break;
        
      case 'user_deafened':
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞—É—à–Ω–∏–∫–æ–≤
        if (this.onParticipantStatusChangedCallback) {
          this.onParticipantStatusChangedCallback(data.user_id, { is_deafened: data.is_deafened });
        }
        break;

      case 'participant_status_changed':
        console.log('üîä –°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω:', data.user_id, data.status);
        if (this.onParticipantStatusChangedCallback) {
          this.onParticipantStatusChangedCallback(data.user_id, data.status);
        }
        break;

      case 'screen_share_started':
        console.log('üñ•Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞:', data.user_id);
        if (this.onScreenShareChanged) {
          this.onScreenShareChanged(data.user_id, true);
        }
        break;

      case 'screen_share_stopped':
        console.log('üñ•Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞:', data.user_id);
        // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
        const videoElement = document.getElementById(`remote-video-${data.user_id}`);
        if (videoElement) {
          videoElement.remove();
        }
        if (this.onScreenShareChanged) {
          this.onScreenShareChanged(data.user_id, false);
        }
        break;

      default:
        console.log('üîä –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
    }
  }

  private async createPeerConnection(userId: number, createOffer: boolean) {
    console.log(`üîä –°–æ–∑–¥–∞–µ–º peer connection —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}, createOffer: ${createOffer}`);
    
    const pc = new RTCPeerConnection({
      iceServers: this.iceServers,
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
    if (this.localStream) {
      this.localStream.getTracks().forEach(track => {
        console.log(`üîä –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ ${track.kind} –≤ peer connection –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        pc.addTrack(track, this.localStream!);
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
    pc.ontrack = (event) => {
      console.log('üîä –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId, event.streams);
      
      if (event.streams && event.streams[0]) {
        const stream = event.streams[0];
        const audioTracks = stream.getAudioTracks();
        const videoTracks = stream.getVideoTracks();

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∏
        if (audioTracks.length > 0) {
          const remoteAudio = new Audio();
          remoteAudio.srcObject = new MediaStream(audioTracks);
          remoteAudio.autoplay = true;
          remoteAudio.controls = false;
          remoteAudio.muted = false;
          remoteAudio.volume = 1.0;
          
          remoteAudio.id = `remote-audio-${userId}`;
          remoteAudio.style.display = 'none';
          document.body.appendChild(remoteAudio);
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
          setTimeout(() => {
            const savedVolume = localStorage.getItem(`voice-volume-${userId}`);
            if (savedVolume) {
              const volume = parseInt(savedVolume);
              remoteAudio.volume = Math.min(volume / 100, 3.0);
              console.log(`üîä –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å ${volume}% –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            }
          }, 100);
          
          // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ
          const playPromise = remoteAudio.play();
          if (playPromise !== undefined) {
            playPromise.then(() => {
              console.log('üîä –ê—É–¥–∏–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId, '—É—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è');
            }).catch(error => {
              console.error('üîä –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId, ':', error);
              
              const enableAudio = () => {
                remoteAudio.play().then(() => {
                  console.log('üîä –ê—É–¥–∏–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId, '–≤–∫–ª—é—á–µ–Ω–æ –ø–æ—Å–ª–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                  document.removeEventListener('click', enableAudio);
                  document.removeEventListener('touchstart', enableAudio);
                }).catch(e => {
                  console.error('üîä –í—Å–µ –µ—â–µ –Ω–µ —É–¥–∞–µ—Ç—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId, ':', e);
                });
              };
              
              document.addEventListener('click', enableAudio, { once: true });
              document.addEventListener('touchstart', enableAudio, { once: true });
            });
          }
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–∏ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞)
        if (videoTracks.length > 0) {
          console.log('üñ•Ô∏è –ü–æ–ª—É—á–µ–Ω –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId);
          
          // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
          let remoteVideo = document.getElementById(`remote-video-${userId}`) as HTMLVideoElement;
          if (!remoteVideo) {
            remoteVideo = document.createElement('video');
            remoteVideo.id = `remote-video-${userId}`;
            remoteVideo.autoplay = true;
            remoteVideo.controls = false;
            remoteVideo.muted = true; // –í–∏–¥–µ–æ –≤—Å–µ–≥–¥–∞ –±–µ–∑ –∑–≤—É–∫–∞, –∑–≤—É–∫ –∏–¥–µ—Ç —á–µ—Ä–µ–∑ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç
            remoteVideo.style.position = 'absolute';
            remoteVideo.style.top = '0';
            remoteVideo.style.left = '0';
            remoteVideo.style.width = '100%';
            remoteVideo.style.height = '100%';
            remoteVideo.style.objectFit = 'contain';
            remoteVideo.style.backgroundColor = '#000';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
            remoteVideo.addEventListener('loadeddata', () => {
              console.log(`üñ•Ô∏è –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            });
            
            remoteVideo.addEventListener('error', (e) => {
              console.error(`üñ•Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, e);
            });
            
            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ ChatArea –¥–ª—è —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            const waitForRemoteContainer = (attempts = 0): void => {
              const videoContainer = document.getElementById('screen-share-container-chat');
              
              if (videoContainer) {
                // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
                videoContainer.innerHTML = '';
                videoContainer.appendChild(remoteVideo);
                console.log(`üñ•Ô∏è –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ ChatArea –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–∑–º–µ—Ä—ã:`, {
                  width: videoContainer.offsetWidth,
                  height: videoContainer.offsetHeight,
                  style: videoContainer.style.cssText
                });
              } else if (attempts < 50) { // –ú–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥
                // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω, –∂–¥–µ–º
                console.log(`üñ•Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (–ø–æ–ø—ã—Ç–∫–∞ ${attempts + 1}/50)`);
                setTimeout(() => waitForRemoteContainer(attempts + 1), 100);
              } else {
                // –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                console.error(`üñ•Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                remoteVideo.remove();
                return;
              }
            };
            
            waitForRemoteContainer();
          }
          
          remoteVideo.srcObject = new MediaStream(videoTracks);
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
          if (this.onScreenShareChanged) {
            this.onScreenShareChanged(userId, true);
          }
          
          console.log('üñ•Ô∏è –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId);
        }
      }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    pc.onicecandidate = (event) => {
      if (event.candidate) {
        console.log(`üîä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ICE candidate –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, event.candidate);
        this.sendMessage({
          type: 'ice_candidate',
          target_id: userId,
          candidate: event.candidate,
        });
      }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    pc.onconnectionstatechange = () => {
      console.log(`üîä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}:`, pc.connectionState);
    };

    pc.oniceconnectionstatechange = () => {
      console.log(`üîä –°–æ—Å—Ç–æ—è–Ω–∏–µ ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}:`, pc.iceConnectionState);
    };

    this.peerConnections.set(userId, { pc, userId });

    if (createOffer) {
      console.log(`üîä –°–æ–∑–¥–∞–µ–º offer –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      const offer = await pc.createOffer();
      await pc.setLocalDescription(offer);
      console.log(`üîä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º offer –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, offer);
      this.sendMessage({
        type: 'offer',
        target_id: userId,
        offer: offer,
      });
    }
  }

  private async handleOffer(userId: number, offer: RTCSessionDescriptionInit) {
    console.log(`üîä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º offer –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, offer);
    
    let peerConnection = this.peerConnections.get(userId);
    
    if (!peerConnection) {
      console.log(`üîä –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ peer connection –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      await this.createPeerConnection(userId, false);
      peerConnection = this.peerConnections.get(userId)!;
    }

    try {
      await peerConnection.pc.setRemoteDescription(offer);
      console.log(`üîä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω remote description –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      const answer = await peerConnection.pc.createAnswer();
      await peerConnection.pc.setLocalDescription(answer);
      console.log(`üîä –°–æ–∑–¥–∞–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω answer –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, answer);

      this.sendMessage({
        type: 'answer',
        target_id: userId,
        answer: answer,
      });
      console.log(`üîä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω answer –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    } catch (error) {
      console.error(`üîä –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ offer –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    }
  }

  private async handleAnswer(userId: number, answer: RTCSessionDescriptionInit) {
    console.log(`üîä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º answer –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, answer);
    
    const peerConnection = this.peerConnections.get(userId);
    if (peerConnection) {
      try {
        await peerConnection.pc.setRemoteDescription(answer);
        console.log(`üîä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω remote description (answer) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      } catch (error) {
        console.error(`üîä –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ answer –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      }
    } else {
      console.error(`üîä –ù–µ –Ω–∞–π–¥–µ–Ω–æ peer connection –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    }
  }

  private async handleIceCandidate(userId: number, candidate: RTCIceCandidateInit) {
    console.log(`üîä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ICE candidate –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, candidate);
    
    const peerConnection = this.peerConnections.get(userId);
    if (peerConnection) {
      try {
        await peerConnection.pc.addIceCandidate(candidate);
        console.log(`üîä –î–æ–±–∞–≤–ª–µ–Ω ICE candidate –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      } catch (error) {
        console.error(`üîä –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ICE candidate –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      }
    } else {
      console.error(`üîä –ù–µ –Ω–∞–π–¥–µ–Ω–æ peer connection –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    }
  }

  private removePeerConnection(userId: number) {
    console.log(`üîä –£–¥–∞–ª—è–µ–º peer connection –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    const peerConnection = this.peerConnections.get(userId);
    if (peerConnection) {
      peerConnection.pc.close();
      this.peerConnections.delete(userId);
    }
    
    // –£–¥–∞–ª—è–µ–º –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ DOM
    const audioElement = document.getElementById(`remote-audio-${userId}`);
    if (audioElement) {
      audioElement.remove();
      console.log(`üîä –£–¥–∞–ª–µ–Ω –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    }

    // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ DOM
    const videoElement = document.getElementById(`remote-video-${userId}`);
    if (videoElement) {
      videoElement.remove();
      console.log(`üñ•Ô∏è –£–¥–∞–ª–µ–Ω –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
      if (this.onScreenShareChanged) {
        this.onScreenShareChanged(userId, false);
      }
    }
  }

  private sendMessage(data: any) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify(data));
    }
  }

  setMuted(muted: boolean) {
    if (this.localStream) {
      this.localStream.getAudioTracks().forEach(track => {
        track.enabled = !muted;
      });
    }
    this.sendMessage({ type: 'mute', is_muted: muted });
  }

  setDeafened(deafened: boolean) {
    console.log(`üîä –£—Å—Ç–∞–Ω–æ–≤–∫–∞ deafened: ${deafened}`);
    
    // –ó–∞–≥–ª—É—à–∞–µ–º/–≤–∫–ª—é—á–∞–µ–º –≤—Å–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã
    this.peerConnections.forEach(({ userId }) => {
      const audioElement = document.getElementById(`remote-audio-${userId}`) as HTMLAudioElement;
      if (audioElement) {
        audioElement.muted = deafened;
        console.log(`üîä ${deafened ? '–ó–∞–≥–ª—É—à–µ–Ω' : '–í–∫–ª—é—á–µ–Ω'} –∑–≤—É–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      }
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    this.sendMessage({ type: 'deafen', is_deafened: deafened });
  }

  onParticipantJoin(callback: (participant: any) => void) {
    this.onParticipantJoined = callback;
  }

  onParticipantLeave(callback: (userId: number) => void) {
    this.onParticipantLeft = callback;
  }

  disconnect() {
    this.cleanup();
    if (this.ws) {
      this.ws.close();
    }
  }

  private cleanup() {
    console.log('üîä –û—á–∏—Å—Ç–∫–∞ VoiceService');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ peer connections
    this.peerConnections.forEach(({ pc, userId }) => {
      pc.close();
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç
      const audioElement = document.getElementById(`remote-audio-${userId}`);
      if (audioElement) {
        audioElement.remove();
      }
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
      const videoElement = document.getElementById(`remote-video-${userId}`);
      if (videoElement) {
        videoElement.remove();
        console.log(`üñ•Ô∏è –£–¥–∞–ª–µ–Ω –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –ø—Ä–∏ cleanup`);
      }
    });
    this.peerConnections.clear();

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
    if (this.screenStream) {
      this.screenStream.getTracks().forEach(track => track.stop());
      this.screenStream = null;
    }
    this.isScreenSharing = false;

    // –û—á–∏—â–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const videoContainer = document.getElementById('screen-share-container-chat');
    if (videoContainer) {
      videoContainer.innerHTML = '';
      console.log('üñ•Ô∏è –û—á–∏—â–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä screen-share-container-chat');
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è
    document.querySelectorAll('video[id^="remote-video-"]').forEach(video => {
      video.remove();
      console.log('üñ•Ô∏è –£–¥–∞–ª–µ–Ω –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç:', video.id);
    });

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
    if (this.localStream) {
      this.localStream.getTracks().forEach(track => track.stop());
      this.localStream = null;
    }

    // –û—á–∏—â–∞–µ–º VAD
    this.cleanupVoiceActivityDetection();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }

    this.voiceChannelId = null;
    this.token = null;
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  private initVoiceActivityDetection() {
    if (!this.localStream) return;

    try {
      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      const source = this.audioContext.createMediaStreamSource(this.localStream);
      this.analyser = this.audioContext.createAnalyser();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      this.analyser.fftSize = 1024; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      this.analyser.minDecibels = -100; // –ü–æ–Ω–∏–∂–∞–µ–º –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Ç–∏—Ö–∏—Ö –∑–≤—É–∫–æ–≤
      this.analyser.maxDecibels = -10;
      this.analyser.smoothingTimeConstant = 0.3; // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
      
      source.connect(this.analyser);
      
      this.startVoiceActivityDetection();
    } catch (error) {
      console.error('üéôÔ∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VAD:', error);
    }
  }

  private startVoiceActivityDetection() {
    if (!this.analyser || !this.audioContext) return;

    const bufferLength = this.analyser.frequencyBinCount;
    const dataArray = new Uint8Array(bufferLength);

    this.vadInterval = window.setInterval(() => {
      if (!this.analyser || !this.audioContext || this.audioContext.state === 'closed') {
        return;
      }
      
      try {
        this.analyser.getByteFrequencyData(dataArray);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —á–∞—Å—Ç–æ—Ç–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        const lowFreqEnd = Math.floor(bufferLength * 0.1); // 0-10% —á–∞—Å—Ç–æ—Ç (–Ω–∏–∑–∫–∏–µ)
        const midFreqStart = lowFreqEnd;
        const midFreqEnd = Math.floor(bufferLength * 0.4); // 10-40% —á–∞—Å—Ç–æ—Ç (—Å—Ä–µ–¥–Ω–∏–µ - —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è —Ä–µ—á—å)
        const highFreqStart = midFreqEnd;
        
        // –í—ã—á–∏—Å–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –≤ —Ä–∞–∑–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö
        let lowSum = 0, midSum = 0, highSum = 0, totalSum = 0, maxValue = 0;
        
        for (let i = 0; i < bufferLength; i++) {
          const value = dataArray[i];
          totalSum += value;
          maxValue = Math.max(maxValue, value);
          
          if (i < lowFreqEnd) {
            lowSum += value;
          } else if (i < midFreqEnd) {
            midSum += value;
          } else {
            highSum += value;
          }
        }
        
        const totalAverage = totalSum / bufferLength;
        const midAverage = midSum / (midFreqEnd - midFreqStart);
        
        // –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const totalThreshold = 3; // –û–±—â–∏–π –ø–æ—Ä–æ–≥
        const midThreshold = 5; // –ü–æ—Ä–æ–≥ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —á–∞—Å—Ç–æ—Ç (—Ä–µ—á—å)
        const maxThreshold = 8; // –ü–æ—Ä–æ–≥ –¥–ª—è –ø–∏–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        
        // –°—á–∏—Ç–∞–µ–º —á—Ç–æ –≥–æ–≤–æ—Ä–∏–º –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª—é–±–æ–π –∏–∑ –ø–æ—Ä–æ–≥–æ–≤
        const currentlySpeaking = 
          totalAverage > totalThreshold || 
          midAverage > midThreshold || 
          maxValue > maxThreshold;
        
        if (currentlySpeaking !== this.isSpeaking) {
          this.isSpeaking = currentlySpeaking;
          
          console.log(`üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${currentlySpeaking ? '–ì–û–í–û–†–ò–¢' : '–º–æ–ª—á–∏—Ç'} (total: ${totalAverage.toFixed(1)}, mid: ${midAverage.toFixed(1)}, max: ${maxValue})`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          this.sendMessage({
            type: 'speaking',
            is_speaking: currentlySpeaking
          });
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º UI
          if (this.onSpeakingChanged) {
            // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ —Ç–æ–∫–µ–Ω–∞
            const currentUserId = this.getCurrentUserId();
            if (currentUserId) {
              this.onSpeakingChanged(currentUserId, currentlySpeaking);
            }
          }
        }
      } catch (error) {
        console.error('üéôÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
      }
    }, 50); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 50–º—Å (–±—ã–ª–æ 100–º—Å) –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
  }

  private getCurrentUserId(): number | null {
    if (!this.token) return null;
    
    try {
      const payload = JSON.parse(atob(this.token.split('.')[1]));
      return parseInt(payload.sub);
    } catch {
      return null;
    }
  }

  private cleanupVoiceActivityDetection() {
    if (this.vadInterval) {
      clearInterval(this.vadInterval);
      this.vadInterval = null;
    }
    
    if (this.audioContext) {
      this.audioContext.close();
      this.audioContext = null;
    }
    
    this.analyser = null;
    this.isSpeaking = false;
    this.speakingUsers.clear();
  }

  onSpeakingChange(callback: (userId: number, isSpeaking: boolean) => void) {
    this.onSpeakingChanged = callback;
  }

  onParticipantsReceived(callback: (participants: any[]) => void) {
    this.onParticipantsReceivedCallback = callback;
  }

  onParticipantStatusChanged(callback: (userId: number, status: Partial<{ is_muted: boolean; is_deafened: boolean }>) => void) {
    this.onParticipantStatusChangedCallback = callback;
  }

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞
  async startScreenShare(): Promise<boolean> {
    try {
      console.log('üñ•Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞');
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç–æ–∫ —ç–∫—Ä–∞–Ω–∞
      this.screenStream = await navigator.mediaDevices.getDisplayMedia({
        video: {
          width: { ideal: 1920 },
          height: { ideal: 1080 },
          frameRate: { ideal: 30 }
        },
        audio: true // –í–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ —Å–∏—Å—Ç–µ–º—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
      this.screenStream.getVideoTracks()[0].addEventListener('ended', () => {
        console.log('üñ•Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        this.stopScreenShare();
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∞
      const audioTracks = this.screenStream.getAudioTracks();
      if (audioTracks.length > 0) {
        audioTracks[0].addEventListener('ended', () => {
          console.log('üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ç—Ä–µ–∫ –∫–æ –≤—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º peer connections
      this.peerConnections.forEach(async ({ pc }, userId) => {
        try {
          const videoTrack = this.screenStream!.getVideoTracks()[0];
          if (videoTrack) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–∏–¥–µ–æ —Ç—Ä–µ–∫
            const senders = pc.getSenders();
            const existingVideoSender = senders.find(sender => 
              sender.track && sender.track.kind === 'video'
            );

            if (existingVideoSender) {
              // –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–∏–¥–µ–æ —Ç—Ä–µ–∫
              await existingVideoSender.replaceTrack(videoTrack);
              console.log(`üñ•Ô∏è –ó–∞–º–µ–Ω–µ–Ω –≤–∏–¥–µ–æ —Ç—Ä–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            } else {
              // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–∏–¥–µ–æ —Ç—Ä–µ–∫
              pc.addTrack(videoTrack, this.screenStream!);
              console.log(`üñ•Ô∏è –î–æ–±–∞–≤–ª–µ–Ω –≤–∏–¥–µ–æ —Ç—Ä–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            }
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ç—Ä–µ–∫ —Å–∏—Å—Ç–µ–º—ã –µ—Å–ª–∏ –µ—Å—Ç—å
          const audioTracks = this.screenStream!.getAudioTracks();
          if (audioTracks.length > 0) {
            const existingAudioSenders = pc.getSenders().filter(sender => 
              sender.track && sender.track.kind === 'audio'
            );
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π —Ç—Ä–µ–∫
            const isSystemAudio = audioTracks[0].label.includes('System') || 
                                 audioTracks[0].label.includes('Desktop') ||
                                 audioTracks[0].getSettings().deviceId !== 'default';
            
            if (isSystemAudio) {
              pc.addTrack(audioTracks[0], this.screenStream!);
              console.log(`üñ•Ô∏è –î–æ–±–∞–≤–ª–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞—É–¥–∏–æ —Ç—Ä–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            }
          }

          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π offer —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ connection state –ø–æ–∑–≤–æ–ª—è–µ—Ç
          if (pc.connectionState === 'connected' || pc.connectionState === 'new') {
            const offer = await pc.createOffer();
            await pc.setLocalDescription(offer);
            this.sendMessage({
              type: 'offer',
              target_id: userId,
              offer: offer,
            });
          }
        } catch (error) {
          console.error(`üñ•Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
        }
      });

      // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞
      this.createLocalScreenShareVideo();

      this.isScreenSharing = true;
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ –Ω–∞—á–∞–ª–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
      this.sendMessage({ 
        type: 'screen_share_start'
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
      const currentUserId = this.getCurrentUserId();
      if (currentUserId) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º "–í—ã"
        let username = '–í—ã';
        try {
          if (this.token) {
            const payload = JSON.parse(atob(this.token.split('.')[1]));
            username = payload.username || '–í—ã';
          }
        } catch (error) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞:', error);
        }
        
        const event = new CustomEvent('screen_share_start', {
          detail: { 
            user_id: currentUserId,
            username: username
          }
        });
        window.dispatchEvent(event);
        console.log('üñ•Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ screen_share_start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUserId);
      }

      console.log('üñ•Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞');
      return true;
    } catch (error) {
      console.error('üñ•Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞:', error);
      return false;
    }
  }

  stopScreenShare() {
    if (!this.screenStream) return;

    console.log('üñ•Ô∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    const userId = this.getCurrentUserId();
    if (userId) {
      const event = new CustomEvent('screen_share_stop', {
        detail: { 
          user_id: userId
        }
      });
      window.dispatchEvent(event);
      console.log('üñ•Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ screen_share_stop –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏
    this.screenStream.getTracks().forEach(track => {
      track.stop();
    });

    // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–∏ –∏–∑ –≤—Å–µ—Ö peer connections
    this.peerConnections.forEach(({ pc }, userId) => {
      try {
        const senders = pc.getSenders();
        senders.forEach((sender: RTCRtpSender) => {
          if (sender.track && sender.track.kind === 'video') {
            // –ó–∞–º–µ–Ω—è–µ–º –≤–∏–¥–µ–æ —Ç—Ä–µ–∫ –Ω–∞ null –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
            sender.replaceTrack(null).then(() => {
              console.log(`üñ•Ô∏è –í–∏–¥–µ–æ —Ç—Ä–µ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            }).catch(error => {
              console.error(`üñ•Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
              // –ï—Å–ª–∏ replaceTrack –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —É–¥–∞–ª—è–µ–º —Ç—Ä–µ–∫
              pc.removeTrack(sender);
            });
          }
        });

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π offer –±–µ–∑ –≤–∏–¥–µ–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ connection –∞–∫—Ç–∏–≤–Ω–æ
        if (pc.connectionState === 'connected') {
          pc.createOffer().then((offer: RTCSessionDescriptionInit) => {
            pc.setLocalDescription(offer);
            this.sendMessage({
              type: 'offer',
              target_id: userId,
              offer: offer,
            });
          }).catch((error: any) => {
            console.error(`üñ•Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer –±–µ–∑ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
          });
        }
      } catch (error) {
        console.error(`üñ•Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      }
    });

    this.screenStream = null;
    this.isScreenSharing = false;

    // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
    const currentUserId = this.getCurrentUserId();
    if (currentUserId) {
      const localVideo = document.getElementById(`remote-video-${currentUserId}`) as HTMLVideoElement;
      if (localVideo) {
        localVideo.remove();
        console.log('üñ•Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω');
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (this.onScreenShareChanged) {
        this.onScreenShareChanged(currentUserId, false);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
      const event = new CustomEvent('screen_share_stop', {
        detail: { 
          user_id: currentUserId
        }
      });
      window.dispatchEvent(event);
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
    this.sendMessage({ 
      type: 'screen_share_stop'
    });

    console.log('üñ•Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }

  getScreenSharingStatus(): boolean {
    return this.isScreenSharing;
  }

  onScreenShareChange(callback: (userId: number, isSharing: boolean) => void) {
    this.onScreenShareChanged = callback;
  }

  private createLocalScreenShareVideo() {
    if (!this.screenStream) return;

    console.log('üñ•Ô∏è –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentUserId = this.getCurrentUserId();
    if (!currentUserId) return;

    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–∫–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingVideo = document.getElementById(`remote-video-${currentUserId}`) as HTMLVideoElement;
    if (existingVideo) {
      existingVideo.remove();
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
    const localVideo = document.createElement('video');
    localVideo.id = `remote-video-${currentUserId}`;
    localVideo.autoplay = true;
    localVideo.controls = false;
    localVideo.muted = true; // –ó–∞–≥–ª—É—à–∞–µ–º —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —ç—Ö–∞
    localVideo.style.position = 'absolute';
    localVideo.style.top = '0';
    localVideo.style.left = '0';
    localVideo.style.width = '100%';
    localVideo.style.height = '100%';
    localVideo.style.objectFit = 'contain';
    localVideo.style.backgroundColor = '#000';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    localVideo.addEventListener('loadeddata', () => {
      console.log('üñ•Ô∏è –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    });
    
    localVideo.addEventListener('error', (e) => {
      console.error('üñ•Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ:', e);
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
    localVideo.srcObject = this.screenStream;
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ ChatArea (–º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥)
    const waitForContainer = (attempts = 0): void => {
      const videoContainer = document.getElementById('screen-share-container-chat');
      
      if (videoContainer) {
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
        videoContainer.innerHTML = '';
        videoContainer.appendChild(localVideo);
        console.log('üñ•Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ ChatArea. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–∑–º–µ—Ä—ã:', {
          width: videoContainer.offsetWidth,
          height: videoContainer.offsetHeight,
          style: videoContainer.style.cssText,
          videoSrc: localVideo.srcObject ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
        setTimeout(() => {
          const addedVideo = document.getElementById(`remote-video-${currentUserId}`);
          if (addedVideo) {
            console.log('üñ•Ô∏è –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ DOM —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É:', {
              width: addedVideo.offsetWidth,
              height: addedVideo.offsetHeight,
              readyState: (addedVideo as HTMLVideoElement).readyState,
              videoWidth: (addedVideo as HTMLVideoElement).videoWidth,
              videoHeight: (addedVideo as HTMLVideoElement).videoHeight
            });
          }
        }, 1000);
      } else if (attempts < 50) { // –ú–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ (50 * 100ms)
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω, –∂–¥–µ–º
        console.log(`üñ•Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ screen-share-container-chat (–ø–æ–ø—ã—Ç–∫–∞ ${attempts + 1}/50)`);
        setTimeout(() => waitForContainer(attempts + 1), 100);
      } else {
        // –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        console.error('üñ•Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ screen-share-container-chat');
        localVideo.remove();
        return;
      }
    };
    
    waitForContainer();

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (this.onScreenShareChanged) {
      this.onScreenShareChanged(currentUserId, true);
    }
  }
}

export default new VoiceService();