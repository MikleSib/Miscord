// –¢–∏–ø—ã –¥–ª—è RNNoise
interface RNNoiseModule {
  _rnnoise_create(): number;
  _rnnoise_destroy(state: number): void;
  _rnnoise_process_frame(state: number, output: number, input: number): number;
  _malloc(size: number): number;
  _free(ptr: number): void;
  HEAPF32: Float32Array;
}

interface NoiseSuppressionSettings {
  enabled: boolean;
  level: 'basic' | 'advanced'; // basic = browser native, advanced = RNNoise
  sensitivity: number; // 0-100
}

class NoiseSuppressionService {
  private audioContext: AudioContext | null = null;
  private workletNode: AudioWorkletNode | null = null;
  private isInitialized = false;
  private settings: NoiseSuppressionSettings = {
    enabled: true,
    level: 'basic',
    sensitivity: 70
  };
  
  // RNNoise —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è
  private rnnoiseModule: RNNoiseModule | null = null;
  private isRNNoiseLoaded = false;

  constructor() {
    this.loadSettings();
  }

  private loadSettings() {
    const saved = localStorage.getItem('noise-suppression-settings');
    if (saved) {
      try {
        this.settings = { ...this.settings, ...JSON.parse(saved) };
      } catch (error) {
        console.error('üîá –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —à—É–º–æ–¥–∞–≤–∞:', error);
      }
    }
  }

  private saveSettings() {
    localStorage.setItem('noise-suppression-settings', JSON.stringify(this.settings));
  }

  async initialize(audioContext: AudioContext): Promise<void> {
    this.audioContext = audioContext;
    
    if (this.settings.level === 'advanced' && !this.isRNNoiseLoaded) {
      await this.loadRNNoise();
    }
    
    this.isInitialized = true;
    console.log('üîá –°–µ—Ä–≤–∏—Å —à—É–º–æ–¥–∞–≤–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', this.settings);
  }

  private async loadRNNoise(): Promise<void> {
    try {
      console.log('üîá –ó–∞–≥—Ä—É–∂–∞–µ–º RNNoise...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º AudioWorklet –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è RNNoise
      if (this.audioContext) {
        await this.audioContext.audioWorklet.addModule('/rnnoise-processor.js');
        console.log('üîá RNNoise AudioWorklet –∑–∞–≥—Ä—É–∂–µ–Ω');
        this.isRNNoiseLoaded = true;
      }
    } catch (error) {
      console.error('üîá –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RNNoise:', error);
      // Fallback –∫ –±–∞–∑–æ–≤–æ–º—É —à—É–º–æ–¥–∞–≤—É
      this.settings.level = 'basic';
      this.saveSettings();
    }
  }

  async processStream(inputStream: MediaStream): Promise<MediaStream> {
    if (!this.isInitialized || !this.audioContext) {
      throw new Error('–°–µ—Ä–≤–∏—Å —à—É–º–æ–¥–∞–≤–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    if (!this.settings.enabled) {
      return inputStream;
    }

    if (this.settings.level === 'basic') {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞ –±—Ä–∞—É–∑–µ—Ä–∞
      return inputStream;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º RNNoise –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è —à—É–º–∞
    return await this.processWithRNNoise(inputStream);
  }

  private async processWithRNNoise(inputStream: MediaStream): Promise<MediaStream> {
    if (!this.audioContext || !this.isRNNoiseLoaded) {
      console.warn('üîá RNNoise –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫');
      return inputStream;
    }

    try {
      // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
      const source = this.audioContext.createMediaStreamSource(inputStream);
      
      // –°–æ–∑–¥–∞–µ–º AudioWorklet —É–∑–µ–ª –¥–ª—è RNNoise
      this.workletNode = new AudioWorkletNode(this.audioContext, 'rnnoise-processor', {
        processorOptions: {
          sensitivity: this.settings.sensitivity
        }
      });

      // –°–æ–∑–¥–∞–µ–º destination –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
      const destination = this.audioContext.createMediaStreamDestination();

      // –°–æ–µ–¥–∏–Ω—è–µ–º: –∏—Å—Ç–æ—á–Ω–∏–∫ -> RNNoise -> destination
      source.connect(this.workletNode);
      this.workletNode.connect(destination);

      console.log('üîá RNNoise –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
      return destination.stream;
    } catch (error) {
      console.error('üîá –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å RNNoise:', error);
      return inputStream;
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  setEnabled(enabled: boolean) {
    this.settings.enabled = enabled;
    this.saveSettings();
    console.log('üîá –®—É–º–æ–¥–∞–≤', enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω');
  }

  setLevel(level: 'basic' | 'advanced') {
    this.settings.level = level;
    this.saveSettings();
    console.log('üîá –£—Ä–æ–≤–µ–Ω—å —à—É–º–æ–¥–∞–≤–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:', level);
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ advanced, –∑–∞–≥—Ä—É–∂–∞–µ–º RNNoise
    if (level === 'advanced' && !this.isRNNoiseLoaded && this.audioContext) {
      this.loadRNNoise();
    }
  }

  setSensitivity(sensitivity: number) {
    this.settings.sensitivity = Math.max(0, Math.min(100, sensitivity));
    this.saveSettings();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ worklet
    if (this.workletNode) {
      this.workletNode.port.postMessage({
        type: 'setSensitivity',
        sensitivity: this.settings.sensitivity
      });
    }
    
    console.log('üîá –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à—É–º–æ–¥–∞–≤–∞:', this.settings.sensitivity);
  }

  getSettings(): NoiseSuppressionSettings {
    return { ...this.settings };
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
  isBasicSupported(): boolean {
    return 'mediaDevices' in navigator && 'getUserMedia' in navigator.mediaDevices;
  }

  isAdvancedSupported(): boolean {
    return 'AudioWorklet' in window && 'audioWorklet' in AudioContext.prototype;
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  cleanup() {
    if (this.workletNode) {
      this.workletNode.disconnect();
      this.workletNode = null;
    }
    
    this.isInitialized = false;
    console.log('üîá –°–µ—Ä–≤–∏—Å —à—É–º–æ–¥–∞–≤–∞ –æ—á–∏—â–µ–Ω');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  getStats() {
    return {
      initialized: this.isInitialized,
      rnnoiseLoaded: this.isRNNoiseLoaded,
      settings: this.settings,
      basicSupported: this.isBasicSupported(),
      advancedSupported: this.isAdvancedSupported()
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const noiseSuppressionService = new NoiseSuppressionService();
export default noiseSuppressionService; 