/**
 * üìä Enhanced Connection Status Component
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
 */

import React, { useState, useEffect } from 'react';
import { Clock, Wifi, WifiOff, AlertCircle, CheckCircle, TrendingUp, Users, MessageCircle } from 'lucide-react';
import enhancedWebSocketService from '../services/enhancedWebSocketService';

interface ConnectionMetrics {
  totalMessages: number;
  messagesPerSecond: number;
  averageLatency: number;
  reconnectionAttempts: number;
  lastReconnect: number;
  connectionQuality: 'excellent' | 'good' | 'poor' | 'disconnected';
  bytesReceived: number;
  bytesSent: number;
}

const EnhancedConnectionStatus: React.FC = () => {
  const [connectionStatus, setConnectionStatus] = useState<string>('disconnected');
  const [metrics, setMetrics] = useState<ConnectionMetrics | null>(null);
  const [showDetails, setShowDetails] = useState<boolean>(false);
  const [isMinimized, setIsMinimized] = useState<boolean>(true);

  useEffect(() => {
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const unsubscribeStatus = enhancedWebSocketService.onConnectionStatusChange((status) => {
      setConnectionStatus(status);
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    const metricsInterval = setInterval(() => {
      const currentMetrics = enhancedWebSocketService.getMetrics();
      setMetrics(currentMetrics);
    }, 1000);

    return () => {
      unsubscribeStatus();
      clearInterval(metricsInterval);
    };
  }, []);

  const getStatusIcon = () => {
    switch (connectionStatus) {
      case 'connected':
      case 'established':
        return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'connecting':
        return <Clock className="w-4 h-4 text-yellow-500 animate-spin" />;
      case 'disconnected':
        return <WifiOff className="w-4 h-4 text-red-500" />;
      case 'error':
        return <AlertCircle className="w-4 h-4 text-red-500" />;
      default:
        return <Wifi className="w-4 h-4 text-gray-500" />;
    }
  };

  const getStatusColor = () => {
    switch (connectionStatus) {
      case 'connected':
      case 'established':
        return 'text-green-500';
      case 'connecting':
        return 'text-yellow-500';
      case 'disconnected':
        return 'text-red-500';
      case 'error':
        return 'text-red-500';
      default:
        return 'text-gray-500';
    }
  };

  const getQualityColor = (quality: string) => {
    switch (quality) {
      case 'excellent':
        return 'text-green-500';
      case 'good':
        return 'text-blue-500';
      case 'poor':
        return 'text-yellow-500';
      case 'disconnected':
        return 'text-red-500';
      default:
        return 'text-gray-500';
    }
  };

  const formatBytes = (bytes: number) => {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const getStatusText = () => {
    switch (connectionStatus) {
      case 'connected':
        return '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
      case 'established':
        return '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
      case 'connecting':
        return '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
      case 'disconnected':
        return '–û—Ç–∫–ª—é—á–µ–Ω–æ';
      case 'error':
        return '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
      case 'failed':
        return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  if (isMinimized) {
    return (
      <div
        className="fixed bottom-4 right-4 z-50 bg-gray-800 text-white px-3 py-2 rounded-lg shadow-lg cursor-pointer transition-all duration-200 hover:bg-gray-700"
        onClick={() => setIsMinimized(false)}
      >
        <div className="flex items-center space-x-2">
          {getStatusIcon()}
          <div className="flex items-center space-x-1">
            <div className={`w-2 h-2 rounded-full ${
              connectionStatus === 'connected' || connectionStatus === 'established'
                ? 'bg-green-500'
                : connectionStatus === 'connecting'
                ? 'bg-yellow-500 animate-pulse'
                : 'bg-red-500'
            }`} />
            {metrics && (
              <span className="text-xs">
                {metrics.averageLatency.toFixed(0)}ms
              </span>
            )}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed bottom-4 right-4 z-50 bg-gray-800 text-white rounded-lg shadow-xl border border-gray-700 min-w-80">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-gray-700">
        <div className="flex items-center space-x-2">
          {getStatusIcon()}
          <h3 className="font-semibold">–°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</h3>
        </div>
        <div className="flex items-center space-x-2">
          <button
            onClick={() => setShowDetails(!showDetails)}
            className="text-gray-400 hover:text-white text-sm"
          >
            {showDetails ? '–°–∫—Ä—ã—Ç—å' : '–î–µ—Ç–∞–ª–∏'}
          </button>
          <button
            onClick={() => setIsMinimized(true)}
            className="text-gray-400 hover:text-white"
          >
            √ó
          </button>
        </div>
      </div>

      {/* Main Status */}
      <div className="p-4">
        <div className="flex items-center justify-between mb-3">
          <span className={`font-medium ${getStatusColor()}`}>
            {getStatusText()}
          </span>
          {metrics && (
            <span className={`text-sm ${getQualityColor(metrics.connectionQuality)}`}>
              {metrics.connectionQuality === 'excellent' && 'üü¢ –û—Ç–ª–∏—á–Ω–æ'}
              {metrics.connectionQuality === 'good' && 'üîµ –•–æ—Ä–æ—à–æ'}
              {metrics.connectionQuality === 'poor' && 'üü° –ü–ª–æ—Ö–æ'}
              {metrics.connectionQuality === 'disconnected' && 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ'}
            </span>
          )}
        </div>

        {metrics && (
          <div className="grid grid-cols-2 gap-3 text-sm">
            <div className="flex items-center space-x-2">
              <Clock className="w-4 h-4 text-blue-400" />
              <span>
                <span className="text-gray-400">–õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å:</span>{' '}
                <span className="text-white font-mono">
                  {metrics.averageLatency.toFixed(0)}ms
                </span>
              </span>
            </div>

            <div className="flex items-center space-x-2">
              <MessageCircle className="w-4 h-4 text-green-400" />
              <span>
                <span className="text-gray-400">–°–æ–æ–±—â–µ–Ω–∏–π:</span>{' '}
                <span className="text-white font-mono">
                  {metrics.totalMessages}
                </span>
              </span>
            </div>

            <div className="flex items-center space-x-2">
              <TrendingUp className="w-4 h-4 text-purple-400" />
              <span>
                <span className="text-gray-400">–°–∫–æ—Ä–æ—Å—Ç—å:</span>{' '}
                <span className="text-white font-mono">
                  {metrics.messagesPerSecond.toFixed(1)}/—Å
                </span>
              </span>
            </div>

            <div className="flex items-center space-x-2">
              <Wifi className="w-4 h-4 text-orange-400" />
              <span>
                <span className="text-gray-400">–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:</span>{' '}
                <span className="text-white font-mono">
                  {metrics.reconnectionAttempts}
                </span>
              </span>
            </div>
          </div>
        )}

        {/* Detailed Metrics */}
        {showDetails && metrics && (
          <div className="mt-4 pt-3 border-t border-gray-700">
            <div className="grid grid-cols-1 gap-2 text-xs">
              <div className="flex justify-between">
                <span className="text-gray-400">–ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö:</span>
                <span className="text-white font-mono">
                  {formatBytes(metrics.bytesReceived)}
                </span>
              </div>
              
              <div className="flex justify-between">
                <span className="text-gray-400">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö:</span>
                <span className="text-white font-mono">
                  {formatBytes(metrics.bytesSent)}
                </span>
              </div>

              {metrics.lastReconnect > 0 && (
                <div className="flex justify-between">
                  <span className="text-gray-400">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</span>
                  <span className="text-white font-mono">
                    {new Date(metrics.lastReconnect).toLocaleTimeString()}
                  </span>
                </div>
              )}

              <div className="flex justify-between">
                <span className="text-gray-400">–ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</span>
                <span className={`font-mono ${getQualityColor(metrics.connectionQuality)}`}>
                  {metrics.connectionQuality.toUpperCase()}
                </span>
              </div>
            </div>

            {/* Connection Quality Bar */}
            <div className="mt-3">
              <div className="flex justify-between items-center mb-1">
                <span className="text-xs text-gray-400">–ö–∞—á–µ—Å—Ç–≤–æ</span>
                <span className="text-xs text-gray-400">
                  {metrics.averageLatency < 100 ? '–û—Ç–ª–∏—á–Ω–æ' :
                   metrics.averageLatency < 250 ? '–•–æ—Ä–æ—à–æ' : '–ü–ª–æ—Ö–æ'}
                </span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div
                  className={`h-2 rounded-full transition-all duration-300 ${
                    metrics.averageLatency < 100
                      ? 'bg-green-500'
                      : metrics.averageLatency < 250
                      ? 'bg-blue-500'
                      : 'bg-yellow-500'
                  }`}
                  style={{
                    width: `${Math.min(100, Math.max(10, 100 - (metrics.averageLatency / 500) * 100))}%`
                  }}
                />
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Actions */}
      {(connectionStatus === 'disconnected' || connectionStatus === 'error') && (
        <div className="p-4 pt-0">
          <button
            onClick={() => {
              // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
              window.location.reload();
            }}
            className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition-colors"
          >
            –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
          </button>
        </div>
      )}
    </div>
  );
};

export default EnhancedConnectionStatus; 