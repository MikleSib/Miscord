'use client'

import React, { useState, useEffect } from 'react';
import { Settings, Volume2, VolumeX, Zap, ZapOff, Brain } from 'lucide-react';
import { Button } from './ui/button';
import {
  Dialog,
  DialogContent,
  DialogTitle,
  Box,
  Typography,
  Switch,
  FormControlLabel,
  Slider,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Alert,
  Chip,
} from '@mui/material';
import voiceService from '../services/voiceService';

interface NoiseSuppressionSettingsProps {
  open: boolean;
  onClose: () => void;
}

export function NoiseSuppressionSettings({ open, onClose }: NoiseSuppressionSettingsProps) {
  const [settings, setSettings] = useState({
    enabled: true,
    level: 'professional' as 'basic' | 'advanced' | 'professional',
    sensitivity: 75,
    vadThreshold: -30,
    vadEnabled: true
  });
  
  const [support, setSupport] = useState({
    basic: false,
    advanced: false,
    professional: false
  });
  
  const [stats, setStats] = useState<any>(null);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
  useEffect(() => {
    if (open && typeof window !== 'undefined') {
      loadSettings();
      checkSupport();
      loadStats();
    }
  }, [open]);

  const loadSettings = () => {
    if (typeof window === 'undefined') return;
    
    try {
      const currentSettings = voiceService.getNoiseSuppressionSettings();
      setSettings(currentSettings);
    } catch (error) {
      console.error('üîá –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —à—É–º–æ–¥–∞–≤–∞:', error);
    }
  };

  const checkSupport = () => {
    if (typeof window === 'undefined') return;
    
    try {
      const supportInfo = voiceService.isNoiseSuppressionSupported();
      setSupport({
        ...supportInfo,
        professional: supportInfo.advanced // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–±—É–µ—Ç —Ç–µ –∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á—Ç–æ –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
      });
    } catch (error) {
      console.error('üîá –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —à—É–º–æ–¥–∞–≤–∞:', error);
    }
  };

  const loadStats = () => {
    if (typeof window === 'undefined') return;
    
    try {
      const statsInfo = voiceService.getNoiseSuppressionStats();
      const debugInfo = voiceService.getDebugInfo();
      console.log('üîá –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è VoiceService:', debugInfo);
      setStats(statsInfo);
    } catch (error) {
      console.error('üîá –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à—É–º–æ–¥–∞–≤–∞:', error);
    }
  };

  const handleEnabledChange = (enabled: boolean) => {
    if (typeof window === 'undefined') return;
    
    setSettings(prev => ({ ...prev, enabled }));
    voiceService.setNoiseSuppressionEnabled(enabled);
  };

  const handleLevelChange = (level: 'basic' | 'advanced' | 'professional') => {
    if (typeof window === 'undefined') return;
    
    setSettings(prev => ({ ...prev, level }));
    // –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º advanced –¥–ª—è professional —É—Ä–æ–≤–Ω—è
    if (level === 'professional') {
      voiceService.setNoiseSuppressionLevel('advanced');
    } else {
    voiceService.setNoiseSuppressionLevel(level);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    setTimeout(loadStats, 500);
  };

  const handleSensitivityChange = (sensitivity: number) => {
    if (typeof window === 'undefined') return;
    
    setSettings(prev => ({ ...prev, sensitivity }));
    voiceService.setNoiseSuppressionSensitivity(sensitivity);
  };

  const handleVadThresholdChange = (threshold: number) => {
    if (typeof window === 'undefined') return;
    
    setSettings(prev => ({ ...prev, vadThreshold: threshold }));
    voiceService.setVadThreshold(threshold);
  };

  const handleVadEnabledChange = (enabled: boolean) => {
    if (typeof window === 'undefined') return;
    
    setSettings(prev => ({ ...prev, vadEnabled: enabled }));
    voiceService.setVadEnabled(enabled);
  };

  const getSensitivityLabel = (value: number) => {
    if (value < 30) return '–ù–∏–∑–∫–∞—è';
    if (value < 70) return '–°—Ä–µ–¥–Ω—è—è';
    return '–í—ã—Å–æ–∫–∞—è';
  };

  const getVadThresholdLabel = (value: number) => {
    if (value <= -50) return '–û—á–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π';
    if (value <= -35) return '–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π';
    if (value <= -20) return '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π';
    if (value <= -10) return '–ú–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π';
    return '–¢–æ–ª—å–∫–æ –≥—Ä–æ–º–∫–∏–µ –∑–≤—É–∫–∏';
  };

  const getLevelDescription = (level: 'basic' | 'advanced' | 'professional') => {
    switch (level) {
      case 'basic':
        return '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞ –±—Ä–∞—É–∑–µ—Ä–∞. –ù–∏–∑–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤.';
      case 'advanced':
        return '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç RNNoise —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º. –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–æ –±–æ–ª—å—à–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä.';
      case 'professional':
        return '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π Miscord AI –∞–ª–≥–æ—Ä–∏—Ç–º. –ö–∞—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω—è Krisp! ‚≠ê';
    }
  };

  const getStatusColor = (supported: boolean, active: boolean) => {
    if (!supported) return 'error';
    if (active) return 'success';
    return 'default';
  };

  const getStatusText = (supported: boolean, active: boolean) => {
    if (!supported) return '–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è';
    if (active) return '–ê–∫—Ç–∏–≤–µ–Ω';
    return '–î–æ—Å—Ç—É–ø–µ–Ω';
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogContent>
        <DialogTitle sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 3 }}>
          <Volume2 size={24} />
          –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è —à—É–º–∞
        </DialogTitle>

        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
          {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
          <Box>
            <Typography variant="h6" gutterBottom>
              –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </Typography>
            
            <FormControlLabel
              control={
                <Switch
                  checked={settings.enabled}
                  onChange={(e) => handleEnabledChange(e.target.checked)}
                  color="primary"
                />
              }
              label={
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  {settings.enabled ? <Volume2 size={18} /> : <VolumeX size={18} />}
                  –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞
                </Box>
              }
            />
          </Box>

          {/* –£—Ä–æ–≤–µ–Ω—å —à—É–º–æ–¥–∞–≤–∞ */}
          {settings.enabled && (
            <Box>
              <Typography variant="subtitle1" gutterBottom>
                –£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
              </Typography>
              
              <Box sx={{ display: 'flex', gap: 2, flexDirection: { xs: 'column', md: 'row' } }}>
                <Box sx={{ flex: 1 }}>
                  <Box
                    sx={{
                      p: 2,
                      border: settings.level === 'basic' ? 2 : 1,
                      borderColor: settings.level === 'basic' ? 'primary.main' : 'divider',
                      borderRadius: 1,
                      cursor: support.basic ? 'pointer' : 'not-allowed',
                      opacity: support.basic ? 1 : 0.5,
                      bgcolor: settings.level === 'basic' ? 'primary.light' : 'transparent',
                      '&:hover': support.basic ? { bgcolor: 'action.hover' } : {}
                    }}
                    onClick={() => support.basic && handleLevelChange('basic')}
                  >
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                      <Zap size={20} />
                      <Typography variant="subtitle2">–ë–∞–∑–æ–≤—ã–π</Typography>
                      <Chip
                        size="small"
                        label={getStatusText(support.basic, settings.level === 'basic' && settings.enabled)}
                        color={getStatusColor(support.basic, settings.level === 'basic' && settings.enabled)}
                      />
                    </Box>
                    <Typography variant="body2" color="text.secondary">
                      {getLevelDescription('basic')}
                    </Typography>
                  </Box>
                </Box>
                
                <Box sx={{ flex: 1 }}>
                  <Box
                    sx={{
                      p: 2,
                      border: settings.level === 'advanced' ? 2 : 1,
                      borderColor: settings.level === 'advanced' ? 'primary.main' : 'divider',
                      borderRadius: 1,
                      cursor: support.advanced ? 'pointer' : 'not-allowed',
                      opacity: support.advanced ? 1 : 0.5,
                      bgcolor: settings.level === 'advanced' ? 'primary.light' : 'transparent',
                      '&:hover': support.advanced ? { bgcolor: 'action.hover' } : {}
                    }}
                    onClick={() => support.advanced && handleLevelChange('advanced')}
                  >
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                      <ZapOff size={20} />
                      <Typography variant="subtitle2">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (RNNoise)</Typography>
                      <Chip
                        size="small"
                        label={getStatusText(support.advanced, settings.level === 'advanced' && settings.enabled)}
                        color={getStatusColor(support.advanced, settings.level === 'advanced' && settings.enabled)}
                      />
                    </Box>
                    <Typography variant="body2" color="text.secondary">
                      {getLevelDescription('advanced')}
                    </Typography>
                  </Box>
                </Box>
                
                <Box sx={{ flex: 1 }}>
                  <Box
                    sx={{
                      p: 2,
                      border: settings.level === 'professional' ? 2 : 1,
                      borderColor: settings.level === 'professional' ? 'primary.main' : 'divider',
                      borderRadius: 1,
                      cursor: support.professional ? 'pointer' : 'not-allowed',
                      opacity: support.professional ? 1 : 0.5,
                      bgcolor: settings.level === 'professional' ? 'primary.light' : 'transparent',
                      '&:hover': support.professional ? { bgcolor: 'action.hover' } : {}
                    }}
                    onClick={() => support.professional && handleLevelChange('professional')}
                  >
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                      <Brain size={20} />
                      <Typography variant="subtitle2">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π (Miscord AI) ‚≠ê</Typography>
                      <Chip
                        size="small"
                        label={getStatusText(support.professional, settings.level === 'professional' && settings.enabled)}
                        color={getStatusColor(support.professional, settings.level === 'professional' && settings.enabled)}
                      />
                    </Box>
                    <Typography variant="body2" color="text.secondary">
                      {getLevelDescription('professional')}
                    </Typography>
                  </Box>
                </Box>
              </Box>
            </Box>
          )}

          {/* –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å */}
          {settings.enabled && (settings.level === 'advanced' || settings.level === 'professional') && (
            <Box>
              <Typography variant="subtitle1" gutterBottom>
                –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {getSensitivityLabel(settings.sensitivity)} ({settings.sensitivity}%)
              </Typography>
              <Slider
                value={settings.sensitivity}
                onChange={(_, value) => handleSensitivityChange(value as number)}
                min={0}
                max={100}
                step={5}
                marks={[
                  { value: 0, label: '0%' },
                  { value: 25, label: '–ù–∏–∑–∫–∞—è' },
                  { value: 50, label: '–°—Ä–µ–¥–Ω—è—è' },
                  { value: 75, label: '–í—ã—Å–æ–∫–∞—è' },
                  { value: 100, label: '100%' }
                ]}
                sx={{ mt: 2 }}
              />
              <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                –í—ã—Å–æ–∫–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ª—É—á—à–µ –ø–æ–¥–∞–≤–ª—è–µ—Ç —à—É–º, –Ω–æ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–∞
              </Typography>
            </Box>
          )}

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞ (VAD) */}
          <Box>
            <Typography variant="h6" gutterBottom>
              –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            </Typography>
            
            <FormControlLabel
              control={
                <Switch
                  checked={settings.vadEnabled}
                  onChange={(e) => handleVadEnabledChange(e.target.checked)}
                  color="primary"
                />
              }
              label="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ –≥–æ–ª–æ—Å—É (VAD)"
              sx={{ mb: 2 }}
            />
            
            {settings.vadEnabled && (
              <Box>
                                 <Typography variant="subtitle1" gutterBottom>
                   –ü–æ—Ä–æ–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {settings.vadThreshold} –¥–ë ({getVadThresholdLabel(settings.vadThreshold)})
                 </Typography>
                <Slider
                  value={settings.vadThreshold}
                  onChange={(_, value) => handleVadThresholdChange(value as number)}
                  min={-60}
                  max={0}
                  step={1}
                  marks={[
                    { value: -60, label: '-60 –¥–ë (–æ—á–µ–Ω—å —Ç–∏—Ö–æ)' },
                    { value: -40, label: '-40 –¥–ë' },
                    { value: -20, label: '-20 –¥–ë' },
                    { value: 0, label: '0 –¥–ë (–æ—á–µ–Ω—å –≥—Ä–æ–º–∫–æ)' }
                  ]}
                  sx={{ mt: 2 }}
                />
                <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                  –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–±–ª–∏–∂–µ –∫ -60 –¥–ë) = –º–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –±–æ–ª–µ–µ —Ç–∏—Ö–∏—Ö –∑–≤—É–∫–∞—Ö.
                  –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–±–ª–∏–∂–µ –∫ 0 –¥–ë) = –Ω—É–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å –≥—Ä–æ–º—á–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.
                </Typography>
              </Box>
            )}
            
            {!settings.vadEnabled && (
              <Alert severity="info" sx={{ mt: 1 }}>
                –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω. VAD –æ—Ç–∫–ª—é—á–µ–Ω - –º–∏–∫—Ä–æ—Ñ–æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∑–≤—É–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ.
              </Alert>
            )}
          </Box>

          {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
          {!support.basic && !support.advanced && (
            <Alert severity="error">
              –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é Chrome, Firefox –∏–ª–∏ Edge.
            </Alert>
          )}

          {!support.advanced && support.basic && (
            <Alert severity="warning">
              –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞ (RNNoise) –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å.
            </Alert>
          )}

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) */}
          {stats && process.env.NODE_ENV === 'development' && (
            <Box>
              <Typography variant="subtitle1" gutterBottom>
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ—Ç–ª–∞–¥–∫–∞)
              </Typography>
              <Box sx={{ 
                p: 2, 
                bgcolor: 'grey.100', 
                borderRadius: 1,
                fontFamily: 'monospace',
                fontSize: '0.8rem'
              }}>
                <pre>{JSON.stringify(stats, null, 2)}</pre>
              </Box>
            </Box>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end', mt: 2 }}>
            <Button variant="outline" onClick={loadStats}>
              –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            </Button>
            <Button onClick={onClose}>
              –ó–∞–∫—Ä—ã—Ç—å
            </Button>
          </Box>
        </Box>
      </DialogContent>
    </Dialog>
  );
} 