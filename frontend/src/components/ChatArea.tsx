'use client'

import { useState, useRef, useEffect } from 'react'
import { Send, Hash, Monitor, MonitorOff, X, Maximize2, Minimize2, Volume2, VolumeX } from 'lucide-react'
import { useStore } from '../lib/store'
import { useAuthStore } from '../store/store'
import { formatDate } from '../lib/utils'
import { Button } from './ui/button'
import voiceService from '../services/voiceService'
import { cn } from '../lib/utils'

export function ChatArea() {
  const { currentChannel, messages, sendMessage, addMessage } = useStore()
  const { user } = useAuthStore()
  const [messageInput, setMessageInput] = useState('')
  const messagesEndRef = useRef<HTMLDivElement>(null)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
  const [sharingUsers, setSharingUsers] = useState<{ userId: number; username: string }[]>([])
  const [selectedUser, setSelectedUser] = useState<number | null>(null)
  const [isScreenShareVisible, setIsScreenShareVisible] = useState(false)
  const [isMuted, setIsMuted] = useState(false)
  const [isScreenSharing, setIsScreenSharing] = useState(false)

  const channelMessages = currentChannel ? messages[currentChannel.id] || [] : []

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [channelMessages])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
  useEffect(() => {
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
    const updateScreenShareStatus = () => {
      setIsScreenSharing(voiceService.getScreenSharingStatus());
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
    const handleScreenShareStart = (event: any) => {
      const { user_id, username } = event.detail;
      setSharingUsers(prev => {
        if (!prev.find(u => u.userId === user_id)) {
          const newUsers = [...prev, { userId: user_id, username }];
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          if (newUsers.length === 1) {
            setSelectedUser(user_id);
            setIsScreenShareVisible(true);
          }
          return newUsers;
        }
        return prev;
      });
    };

    const handleScreenShareStop = (event: any) => {
      const { user_id } = event.detail;
      setSharingUsers(prev => {
        const newUsers = prev.filter(u => u.userId !== user_id);
        // –ï—Å–ª–∏ —É–±—Ä–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º
        if (selectedUser === user_id) {
          if (newUsers.length > 0) {
            setSelectedUser(newUsers[0].userId);
          } else {
            setIsScreenShareVisible(false);
            setSelectedUser(null);
            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–≥–¥–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
            const videoContainer = document.getElementById('screen-share-container-chat');
            if (videoContainer) {
              videoContainer.innerHTML = '';
              console.log('üñ•Ô∏è –û—á–∏—â–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä - –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å');
            }
          }
        }
        return newUsers;
      });
    };

    const handleOpenScreenShare = (event: any) => {
      const { userId, username } = event.detail;
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      setSharingUsers(prev => {
        if (!prev.find(u => u.userId === userId)) {
          return [...prev, { userId, username }];
        }
        return prev;
      });
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
      setSelectedUser(userId);
      setIsScreenShareVisible(true);
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    updateScreenShareStatus();

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    window.addEventListener('screen_share_start', handleScreenShareStart);
    window.addEventListener('screen_share_stop', handleScreenShareStop);
    window.addEventListener('open_screen_share', handleOpenScreenShare);

    const interval = setInterval(updateScreenShareStatus, 1000);
    
    return () => {
      clearInterval(interval);
      window.removeEventListener('screen_share_start', handleScreenShareStart);
      window.removeEventListener('screen_share_stop', handleScreenShareStop);
      window.removeEventListener('open_screen_share', handleOpenScreenShare);
    };
  }, [selectedUser]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π —ç–∫—Ä–∞–Ω–∞
  const toggleMute = () => {
    const newMuted = !isMuted;
    setIsMuted(newMuted);
    
    // –ó–∞–≥–ª—É—à–∞–µ–º/–≤–∫–ª—é—á–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã
    sharingUsers.forEach(({ userId }) => {
      const videoElement = document.getElementById(`remote-video-${userId}`) as HTMLVideoElement;
      if (videoElement) {
        videoElement.muted = newMuted;
      }
    });
  };

  const startScreenShare = async () => {
    const success = await voiceService.startScreenShare();
    if (!success) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞');
    }
  };

  const stopScreenShare = () => {
    voiceService.stopScreenShare();
  };

  const closeScreenShare = () => {
    setIsScreenShareVisible(false);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const videoContainer = document.getElementById('screen-share-container-chat');
    if (videoContainer) {
      videoContainer.innerHTML = '';
      console.log('üñ•Ô∏è –û—á–∏—â–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏');
    }
  };

  // –û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö)
  useEffect(() => {
    console.log('üñ•Ô∏è ChatArea —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', {
      isScreenShareVisible,
      sharingUsersLength: sharingUsers.length,
      sharingUsers,
      selectedUser,
      shouldShowScreenShare: isScreenShareVisible && sharingUsers.length > 0
    });
  }, [isScreenShareVisible, sharingUsers.length, selectedUser]);

  const handleSendMessage = (e: React.FormEvent) => {
    e.preventDefault()
    if (messageInput.trim() && currentChannel && user && currentChannel.type === 'text') {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ store
      sendMessage(messageInput)
      setMessageInput('')
    }
  }

  if (!currentChannel) {
    return (
      <div className="flex-1 bg-background flex items-center justify-center">
        <div className="text-muted-foreground text-center">
          <p className="text-2xl mb-2">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</p>
          <p>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è</p>
        </div>
      </div>
    )
  }

  return (
    <div className="flex-1 bg-background flex flex-col">
      {/* Channel Header */}
      <div className="h-12 px-4 flex items-center border-b border-border">
        <Hash className="w-5 h-5 text-muted-foreground mr-2" />
        <span className="font-semibold">{currentChannel.name}</span>
      </div>

      {/* Screen Share Area - –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—ë –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —á–∞—Ç–∞ */}
      {isScreenShareVisible && sharingUsers.length > 0 && (
        <div className="flex-1 bg-gray-900 flex flex-col">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ */}
          <div className="flex items-center justify-between px-4 py-2 bg-gray-800/90 backdrop-blur-sm border-b border-gray-700 flex-shrink-0">
            <div className="flex items-center gap-3 min-w-0 flex-1">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse" />
                <span className="text-red-400 font-semibold text-sm uppercase tracking-wide">–í –≠–§–ò–†–ï</span>
              </div>
              <div className="w-px h-4 bg-gray-600" />
              <Monitor className="w-4 h-4 text-green-400 flex-shrink-0" />
              <span className="text-white font-medium text-sm truncate">
                {sharingUsers.find(u => u.userId === selectedUser)?.username === '–í—ã' 
                  ? '–í—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ —ç–∫—Ä–∞–Ω' 
                  : `${sharingUsers.find(u => u.userId === selectedUser)?.username} –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω`}
              </span>
            </div>
            
            <div className="flex items-center gap-2">
              {/* –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ */}
              {sharingUsers.length > 1 && (
                <div className="flex items-center gap-2">
                  <span className="text-gray-400 text-xs">–ü—Ä–æ—Å–º–æ—Ç—Ä:</span>
                  <select 
                    value={selectedUser || ''} 
                    onChange={(e) => setSelectedUser(Number(e.target.value))}
                    className="bg-gray-700 text-white px-3 py-1 rounded-md border border-gray-600 text-sm hover:bg-gray-600 transition-colors"
                  >
                    {sharingUsers.map(({ userId, username }) => (
                      <option key={userId} value={userId}>{username}</option>
                    ))}
                  </select>
                </div>
              )}
              
              {/* –ö–Ω–æ–ø–∫–∞ –∑–≤—É–∫–∞ */}
              <Button
                variant="ghost"
                size="sm"
                onClick={toggleMute}
                className={cn(
                  "w-8 h-8 p-0 transition-all duration-200",
                  isMuted 
                    ? "text-red-400 hover:text-red-300 hover:bg-red-400/20" 
                    : "text-gray-300 hover:text-white hover:bg-gray-700"
                )}
                title={isMuted ? '–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : '–û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫'}
              >
                {isMuted ? <VolumeX className="w-4 h-4" /> : <Volume2 className="w-4 h-4" />}
              </Button>
              
              {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞—Ç—å/–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é */}
              {isScreenSharing ? (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={stopScreenShare}
                  className="flex items-center gap-2 text-sm px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-md transition-colors"
                >
                  <MonitorOff className="w-4 h-4" />
                  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                </Button>
              ) : (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={startScreenShare}
                  className="flex items-center gap-2 bg-green-600 hover:bg-green-700 text-white text-sm px-3 py-1 rounded-md transition-colors"
                >
                  <Monitor className="w-4 h-4" />
                  –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                </Button>
              )}
              
              {/* –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å */}
              <Button
                variant="ghost"
                size="sm"
                className="w-8 h-8 p-0 text-gray-300 hover:text-white hover:bg-gray-700 transition-colors"
                title="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"
              >
                <Maximize2 className="w-4 h-4" />
              </Button>
              
              {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
              <Button
                variant="ghost"
                size="sm"
                onClick={closeScreenShare}
                className="w-8 h-8 p-0 text-gray-300 hover:text-white hover:bg-gray-700 transition-colors"
                title="–ó–∞–∫—Ä—ã—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          </div>

          {/* –û–±–ª–∞—Å—Ç—å –¥–ª—è –≤–∏–¥–µ–æ - –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—ë –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ */}
          <div className="flex-1 relative bg-black">
            <div 
              id="screen-share-container-chat" 
              className="absolute inset-0 bg-black"
            >
              {/* –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å—é–¥–∞ —á–µ—Ä–µ–∑ VoiceService */}
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –≤–Ω–∏–∑—É */}
            <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-4 pointer-events-none">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="flex items-center gap-2">
                    <div className="w-8 h-8 rounded-full bg-green-600 flex items-center justify-center">
                      <span className="text-white text-sm font-semibold">
                        {sharingUsers.find(u => u.userId === selectedUser)?.username[0].toUpperCase()}
                      </span>
                    </div>
                    <div>
                      <div className="text-white font-medium text-sm">
                        {sharingUsers.find(u => u.userId === selectedUser)?.username === '–í—ã' 
                          ? '–í—ã' 
                          : sharingUsers.find(u => u.userId === selectedUser)?.username}
                      </div>
                      <div className="text-gray-400 text-xs flex items-center gap-1">
                        <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" />
                        {sharingUsers.find(u => u.userId === selectedUser)?.username === '–í—ã' 
                          ? '–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ —ç–∫—Ä–∞–Ω' 
                          : '–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω'}
                      </div>
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center gap-2">
                  {/* –°—á–µ—Ç—á–∏–∫ –∑—Ä–∏—Ç–µ–ª–µ–π */}
                  <div className="flex items-center gap-1 bg-black/40 px-2 py-1 rounded-md">
                    <div className="w-2 h-2 bg-gray-400 rounded-full" />
                    <span className="text-gray-300 text-xs">
                      {sharingUsers.length} {sharingUsers.length === 1 ? '—Å—Ç—Ä–∏–º–µ—Ä' : '—Å—Ç—Ä–∏–º–µ—Ä–∞'}
                    </span>
                  </div>
                  
                  {/* –ö–∞—á–µ—Å—Ç–≤–æ */}
                  <div className="bg-black/40 px-2 py-1 rounded-md">
                    <span className="text-gray-300 text-xs">HD</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Messages Area - —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ */}
      {!(isScreenShareVisible && sharingUsers.length > 0) && (
        <div className="flex-1 overflow-y-auto scrollbar-thin">
          <div className="p-4 space-y-4">
            {channelMessages.length === 0 ? (
              <div className="text-center text-muted-foreground py-8">
                <p>–ü–æ–∫–∞ —á—Ç–æ –∑–¥–µ—Å—å –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</p>
                <p className="text-sm">–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ #{currentChannel.name}</p>
              </div>
            ) : (
              channelMessages.map((message) => (
                <div key={message.id} className="flex gap-3 hover:bg-accent/5 px-2 py-1 rounded">
                  <div className="w-10 h-10 rounded-full bg-primary/20 flex items-center justify-center flex-shrink-0">
                    {message.author.avatar ? (
                      <img src={message.author.avatar} alt="" className="w-full h-full rounded-full" />
                    ) : (
                      <span className="text-sm font-semibold">
                        {message.author.username[0].toUpperCase()}
                      </span>
                    )}
                  </div>
                  <div className="flex-1">
                    <div className="flex items-baseline gap-2">
                      <span className="font-semibold text-sm">
                        {message.author.username}
                      </span>
                      <span className="text-xs text-muted-foreground">
                        {formatDate(message.timestamp)}
                      </span>
                    </div>
                    <p className="text-sm mt-0.5">{message.content}</p>
                  </div>
                </div>
              ))
            )}
            <div ref={messagesEndRef} />
          </div>
        </div>
      )}

      {/* Message Input - —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ */}
      {currentChannel.type === 'text' && !(isScreenShareVisible && sharingUsers.length > 0) && (
        <form onSubmit={handleSendMessage} className="p-4">
          <div className="bg-secondary rounded-lg flex items-center px-4">
            <input
              type="text"
              value={messageInput}
              onChange={(e) => setMessageInput(e.target.value)}
              placeholder={`–ù–∞–ø–∏—Å–∞—Ç—å –≤ #${currentChannel.name}`}
              className="flex-1 bg-transparent py-3 outline-none text-sm"
            />
            <Button
              type="submit"
              size="icon"
              variant="ghost"
              className="h-8 w-8"
              disabled={!messageInput.trim()}
            >
              <Send className="w-4 h-4" />
            </Button>
          </div>
        </form>
      )}

      {/* Voice Channel Info */}
      {currentChannel.type === 'voice' && (
        <div className="p-4 text-center text-muted-foreground">
          <p>–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª: {currentChannel.name}</p>
          <p className="text-sm">–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É</p>
        </div>
      )}
    </div>
  )
}