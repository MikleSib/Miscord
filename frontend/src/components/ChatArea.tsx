'use client'

import { useState, useRef, useEffect } from 'react'
import { Send, Hash, Monitor, MonitorOff, X, Maximize2, Minimize2, Volume2, VolumeX } from 'lucide-react'
import { useStore } from '../lib/store'
import { useAuthStore } from '../store/store'
import { formatDate } from '../lib/utils'
import { Button } from './ui/button'
import voiceService from '../services/voiceService'
import { cn } from '../lib/utils'

export function ChatArea() {
  const { currentChannel, messages, sendMessage, addMessage } = useStore()
  const { user } = useAuthStore()
  const [messageInput, setMessageInput] = useState('')
  const messagesEndRef = useRef<HTMLDivElement>(null)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
  const [sharingUsers, setSharingUsers] = useState<{ userId: number; username: string }[]>([])
  const [selectedUser, setSelectedUser] = useState<number | null>(null)
  const [isScreenShareVisible, setIsScreenShareVisible] = useState(false)
  const [isMuted, setIsMuted] = useState(false)
  const [isScreenSharing, setIsScreenSharing] = useState(false)
  const [isFullscreen, setIsFullscreen] = useState(false)
  const [videoHealthCheck, setVideoHealthCheck] = useState<NodeJS.Timeout | null>(null)

  const channelMessages = currentChannel ? messages[currentChannel.id] || [] : []

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [channelMessages])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
  useEffect(() => {
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
    const updateScreenShareStatus = () => {
      setIsScreenSharing(voiceService.getScreenSharingStatus());
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
    const handleScreenShareStart = (event: any) => {
      const { user_id, username } = event.detail;
      setSharingUsers(prev => {
        if (!prev.find(u => u.userId === user_id)) {
          const newUsers = [...prev, { userId: user_id, username }];
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          if (newUsers.length === 1) {
            setSelectedUser(user_id);
            setIsScreenShareVisible(true);
          }
          return newUsers;
        }
        return prev;
      });
    };

    const handleScreenShareStop = (event: any) => {
      const { user_id } = event.detail;
      console.log('üñ•Ô∏è ChatArea: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user_id);
      
      setSharingUsers(prev => {
        const newUsers = prev.filter(u => u.userId !== user_id);
        console.log('üñ•Ô∏è ChatArea: –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤:', newUsers);
        
        // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–≤—à–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const videoElement = document.getElementById(`remote-video-${user_id}`);
        if (videoElement) {
          videoElement.remove();
          console.log(`üñ•Ô∏è ChatArea: –£–¥–∞–ª–µ–Ω –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}`);
        }
        
        // –ï—Å–ª–∏ —É–±—Ä–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º
        if (selectedUser === user_id) {
          console.log('üñ•Ô∏è ChatArea: –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª —Å—Ç—Ä–∏–º');
          
          if (newUsers.length > 0) {
            console.log('üñ•Ô∏è ChatArea: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞:', newUsers[0].username);
            
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            setSelectedUser(newUsers[0].userId);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞
            setTimeout(() => {
              const newVideoElement = document.getElementById(`remote-video-${newUsers[0].userId}`);
              const videoContainer = document.getElementById('screen-share-container-chat');
              
              console.log(`üñ•Ô∏è ChatArea: –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ ${newUsers[0].userId}`, {
                newVideoElement: !!newVideoElement,
                videoContainer: !!videoContainer,
                newUserId: newUsers[0].userId,
                allVideoElements: Array.from(document.querySelectorAll('[id^="remote-video-"]')).map(el => el.id)
              });
              
              if (newVideoElement && videoContainer) {
                // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã
                Array.from(videoContainer.children).forEach(child => {
                  if (child instanceof HTMLVideoElement) {
                    child.style.display = 'none';
                  }
                });
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                newVideoElement.style.display = 'block';
                
                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –Ω–µ —Ç–∞–º
                if (!videoContainer.contains(newVideoElement)) {
                  videoContainer.appendChild(newVideoElement);
                }
                
                console.log(`üñ•Ô∏è ChatArea: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${newUsers[0].userId}`);
              } else {
                console.error(`üñ•Ô∏è ChatArea: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${newUsers[0].userId}`, {
                  newVideoElement: !!newVideoElement,
                  videoContainer: !!videoContainer,
                  allVideoElements: Array.from(document.querySelectorAll('[id^="remote-video-"]')).map(el => ({
                    id: el.id,
                    display: (el as HTMLElement).style.display,
                    parent: el.parentElement?.id
                  }))
                });
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
                const availableVideo = document.querySelector(`[id^="remote-video-"]:not([id="remote-video-${user_id}"])`) as HTMLVideoElement;
                if (availableVideo && videoContainer) {
                  console.log('üñ•Ô∏è ChatArea: –ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç:', availableVideo.id);
                  availableVideo.style.display = 'block';
                  if (!videoContainer.contains(availableVideo)) {
                    videoContainer.appendChild(availableVideo);
                  }
                }
              }
            }, 100);
          } else {
            console.log('üñ•Ô∏è ChatArea: –ù–∏–∫–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é');
            setIsScreenShareVisible(false);
            setSelectedUser(null);
            
            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–≥–¥–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
            const videoContainer = document.getElementById('screen-share-container-chat');
            if (videoContainer) {
              videoContainer.innerHTML = '';
              console.log('üñ•Ô∏è –û—á–∏—â–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä - –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å');
            }
          }
        } else {
          // –ï—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª —Å—Ç—Ä–∏–º –Ω–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
          console.log('üñ•Ô∏è ChatArea: –û—Å—Ç–∞–Ω–æ–≤–∏–ª —Å—Ç—Ä–∏–º –Ω–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ');
        }
        
        return newUsers;
      });
    };

    const handleOpenScreenShare = (event: any) => {
      const { userId, username } = event.detail;
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      setSharingUsers(prev => {
        if (!prev.find(u => u.userId === userId)) {
          return [...prev, { userId, username }];
        }
        return prev;
      });
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
      setSelectedUser(userId);
      setIsScreenShareVisible(true);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const handleFullscreenChange = () => {
      setIsFullscreen(!!document.fullscreenElement);
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    updateScreenShareStatus();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    const handleVoiceChannelLeave = (event: any) => {
      const { user_id } = event.detail;
      console.log('üñ•Ô∏è ChatArea: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª:', user_id);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤
      setSharingUsers(prev => {
        const userWasSharing = prev.some(u => u.userId === user_id);
        if (userWasSharing) {
          console.log('üñ•Ô∏è ChatArea: –°—Ç—Ä–∏–º–µ—Ä –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª, —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞');
          const newUsers = prev.filter(u => u.userId !== user_id);
          
          // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          if (selectedUser === user_id) {
            if (newUsers.length > 0) {
              setSelectedUser(newUsers[0].userId);
            } else {
              setIsScreenShareVisible(false);
              setSelectedUser(null);
              const videoContainer = document.getElementById('screen-share-container-chat');
              if (videoContainer) {
                videoContainer.innerHTML = '';
                console.log('üñ•Ô∏è –û—á–∏—â–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä - —Å—Ç—Ä–∏–º–µ—Ä –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª');
              }
            }
          }
          
          // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
          const videoElement = document.getElementById(`remote-video-${user_id}`);
          if (videoElement) {
            videoElement.remove();
            console.log(`üñ•Ô∏è ChatArea: –£–¥–∞–ª–µ–Ω –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –ø–æ–∫–∏–Ω—É–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}`);
          }
          
          return newUsers;
        }
        return prev;
      });
    };

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    window.addEventListener('screen_share_start', handleScreenShareStart);
    window.addEventListener('screen_share_stop', handleScreenShareStop);
    window.addEventListener('open_screen_share', handleOpenScreenShare);
    window.addEventListener('voice_channel_leave', handleVoiceChannelLeave);
    document.addEventListener('fullscreenchange', handleFullscreenChange);

    const interval = setInterval(updateScreenShareStatus, 1000);
    
    return () => {
      clearInterval(interval);
      window.removeEventListener('screen_share_start', handleScreenShareStart);
      window.removeEventListener('screen_share_stop', handleScreenShareStop);
      window.removeEventListener('open_screen_share', handleOpenScreenShare);
      window.removeEventListener('voice_channel_leave', handleVoiceChannelLeave);
      document.removeEventListener('fullscreenchange', handleFullscreenChange);
    };
  }, [selectedUser]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞
  useEffect(() => {
    if (isScreenShareVisible && selectedUser) {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
      const healthInterval = setInterval(checkVideoHealth, 3000);
      setVideoHealthCheck(healthInterval);
      
      return () => {
        if (healthInterval) {
          clearInterval(healthInterval);
        }
        setVideoHealthCheck(null);
      };
    } else {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
      if (videoHealthCheck) {
        clearInterval(videoHealthCheck);
        setVideoHealthCheck(null);
      }
    }
  }, [isScreenShareVisible, selectedUser]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π —ç–∫—Ä–∞–Ω–∞
  const toggleMute = () => {
    const newMuted = !isMuted;
    setIsMuted(newMuted);
    
    // –ó–∞–≥–ª—É—à–∞–µ–º/–≤–∫–ª—é—á–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã
    sharingUsers.forEach(({ userId }) => {
      const videoElement = document.getElementById(`remote-video-${userId}`) as HTMLVideoElement;
      if (videoElement) {
        videoElement.muted = newMuted;
      }
    });
  };

  const startScreenShare = async () => {
    const success = await voiceService.startScreenShare();
    if (!success) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞');
    }
  };

  const stopScreenShare = () => {
    voiceService.stopScreenShare();
  };

  const closeScreenShare = () => {
    setIsScreenShareVisible(false);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const videoContainer = document.getElementById('screen-share-container-chat');
    if (videoContainer) {
      videoContainer.innerHTML = '';
      console.log('üñ•Ô∏è –û—á–∏—â–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏');
    }
  };

  const toggleFullscreen = () => {
    const screenShareContainer = document.querySelector('.screen-share-fullscreen-container');
    if (!screenShareContainer) return;

    if (!isFullscreen) {
      screenShareContainer.requestFullscreen?.();
    } else {
      document.exitFullscreen?.();
    }
    setIsFullscreen(!isFullscreen);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞
  const checkVideoHealth = () => {
    if (!selectedUser) return;
    
    console.log(`üñ•Ô∏è ChatArea: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${selectedUser}`);
    
    const videoElement = document.getElementById(`remote-video-${selectedUser}`) as HTMLVideoElement;
    if (videoElement) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫
      const stream = videoElement.srcObject as MediaStream;
      if (stream) {
        const videoTracks = stream.getVideoTracks();
        const hasActiveTrack = videoTracks.some(track => track.readyState === 'live');
        
        console.log(`üñ•Ô∏è ChatArea: –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è ${selectedUser}:`, {
          hasStream: !!stream,
          tracksCount: videoTracks.length,
          hasActiveTrack,
          trackStates: videoTracks.map(t => ({ id: t.id, readyState: t.readyState, enabled: t.enabled }))
        });
        
        if (!hasActiveTrack) {
          console.log('üñ•Ô∏è ChatArea: –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫, –Ω–æ –ù–ï —É–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É');
          
          // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          setTimeout(() => {
            const recheckVideoElement = document.getElementById(`remote-video-${selectedUser}`) as HTMLVideoElement;
            if (recheckVideoElement) {
              const recheckStream = recheckVideoElement.srcObject as MediaStream;
              if (recheckStream) {
                const recheckVideoTracks = recheckStream.getVideoTracks();
                const recheckHasActiveTrack = recheckVideoTracks.some(track => track.readyState === 'live');
                
                if (!recheckHasActiveTrack) {
                  console.log('üñ•Ô∏è ChatArea: –ü–æ—Ç–æ–∫ –≤—Å–µ –µ—â–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, —É–¥–∞–ª—è–µ–º');
                  
                  // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤
                  setSharingUsers(prev => {
                    const newUsers = prev.filter(u => u.userId !== selectedUser);
                    console.log(`üñ•Ô∏è ChatArea: –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞ ${selectedUser}, –æ—Å—Ç–∞–ª–∏—Å—å:`, newUsers);
                    
                    if (newUsers.length > 0) {
                      console.log(`üñ•Ô∏è ChatArea: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ ${newUsers[0].userId}`);
                      setSelectedUser(newUsers[0].userId);
                    } else {
                      console.log('üñ•Ô∏è ChatArea: –ù–∏–∫–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –∑–∞–∫—Ä—ã–≤–∞–µ–º');
                      setIsScreenShareVisible(false);
                      setSelectedUser(null);
                      const videoContainer = document.getElementById('screen-share-container-chat');
                      if (videoContainer) {
                        videoContainer.innerHTML = '';
                        console.log('üñ•Ô∏è –û—á–∏—â–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫');
                      }
                    }
                    return newUsers;
                  });
                  
                  // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
                  recheckVideoElement.remove();
                } else {
                  console.log('üñ•Ô∏è ChatArea: –ü–æ—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
                }
              }
            }
          }, 2000); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        }
      } else {
        console.log(`üñ•Ô∏è ChatArea: –ù–µ—Ç –ø–æ—Ç–æ–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞ ${selectedUser}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤
        const isUserStillStreaming = sharingUsers.some(u => u.userId === selectedUser);
        if (!isUserStillStreaming) {
          console.log(`üñ•Ô∏è ChatArea: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${selectedUser} –±–æ–ª—å—à–µ –Ω–µ —Å—Ç—Ä–∏–º–∏—Ç, —É–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç`);
          videoElement.remove();
        } else {
          console.log(`üñ•Ô∏è ChatArea: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${selectedUser} –≤—Å–µ –µ—â–µ –¥–æ–ª–∂–µ–Ω —Å—Ç—Ä–∏–º–∏—Ç—å, –∂–¥–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞`);
        }
      }
    } else {
      console.log(`üñ•Ô∏è ChatArea: –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${selectedUser}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤
      const isUserStillStreaming = sharingUsers.some(u => u.userId === selectedUser);
      if (isUserStillStreaming) {
        console.log(`üñ•Ô∏è ChatArea: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${selectedUser} –¥–æ–ª–∂–µ–Ω —Å—Ç—Ä–∏–º–∏—Ç—å, –Ω–æ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –≤–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ DOM
        const lostVideo = document.querySelector(`video[id="remote-video-${selectedUser}"]`) as HTMLVideoElement;
        if (lostVideo) {
          console.log(`üñ•Ô∏è ChatArea: –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–π –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è ${selectedUser}, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º`);
          const videoContainer = document.getElementById('screen-share-container-chat');
          if (videoContainer && !videoContainer.contains(lostVideo)) {
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ
            Array.from(videoContainer.children).forEach(child => {
              if (child instanceof HTMLVideoElement) {
                child.style.display = 'none';
              }
            });
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
            videoContainer.appendChild(lostVideo);
            lostVideo.style.display = 'block';
            console.log(`üñ•Ô∏è ChatArea: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç ${lostVideo.id}`);
          }
        }
      }
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (selectedUser && isScreenShareVisible) {
      console.log(`üñ•Ô∏è ChatArea: –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${selectedUser}`);
      
      const videoContainer = document.getElementById('screen-share-container-chat');
      const selectedVideo = document.getElementById(`remote-video-${selectedUser}`);
      
      console.log('üñ•Ô∏è ChatArea: –°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', {
        videoContainer: !!videoContainer,
        selectedVideo: !!selectedVideo,
        selectedUserId: selectedUser,
        containerChildren: videoContainer ? Array.from(videoContainer.children).map(c => c.id) : [],
        allVideosInDocument: Array.from(document.querySelectorAll('[id^="remote-video-"]')).map(v => ({
          id: v.id,
          display: (v as HTMLElement).style.display,
          parent: v.parentElement?.id || 'no-parent',
          srcObject: !!(v as HTMLVideoElement).srcObject
        }))
      });
      
      if (videoContainer) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã
        Array.from(videoContainer.children).forEach(child => {
          if (child instanceof HTMLVideoElement) {
            child.style.display = 'none';
            console.log(`üñ•Ô∏è ChatArea: –°–∫—Ä—ã—Ç–æ –≤–∏–¥–µ–æ ${child.id}`);
          }
        });
        
        if (selectedVideo) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
          selectedVideo.style.display = 'block';
          
          // –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
          if (!videoContainer.contains(selectedVideo)) {
            videoContainer.appendChild(selectedVideo);
            console.log(`üñ•Ô∏è ChatArea: –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ ${selectedVideo.id} –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä`);
          }
          
          console.log(`üñ•Ô∏è ChatArea: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${selectedUser}`);
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 500–º—Å
          setTimeout(() => {
            const checkVideo = document.getElementById(`remote-video-${selectedUser}`) as HTMLVideoElement;
            if (checkVideo) {
              console.log(`üñ•Ô∏è ChatArea: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ 500–º—Å:`, {
                id: checkVideo.id,
                display: checkVideo.style.display,
                readyState: checkVideo.readyState,
                srcObject: !!checkVideo.srcObject,
                videoWidth: checkVideo.videoWidth,
                videoHeight: checkVideo.videoHeight,
                parent: checkVideo.parentElement?.id
              });
            }
          }, 500);
        } else {
          console.log(`üñ•Ô∏è ChatArea: –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${selectedUser} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
          
          // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –≤–æ –≤—Å–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
          const allVideos = document.querySelectorAll(`video[id^="remote-video-"]`);
          console.log('üñ•Ô∏è ChatArea: –í—Å–µ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ:', Array.from(allVideos).map(v => ({
            id: v.id,
            display: (v as HTMLElement).style.display,
            parent: v.parentElement?.id || 'no-parent',
            srcObject: !!(v as HTMLVideoElement).srcObject
          })));
          
          // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞
          const waitForVideo = (attempts = 0) => {
            const video = document.getElementById(`remote-video-${selectedUser}`);
            if (video && videoContainer) {
              console.log(`üñ•Ô∏è ChatArea: –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: ${video.id}`);
              // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ
              Array.from(videoContainer.children).forEach(child => {
                if (child instanceof HTMLVideoElement) {
                  child.style.display = 'none';
                }
              });
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ
              video.style.display = 'block';
              if (!videoContainer.contains(video)) {
                videoContainer.appendChild(video);
              }
            } else if (attempts < 15) { // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
              console.log(`üñ•Ô∏è ChatArea: –û–∂–∏–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ ${selectedUser}, –ø–æ–ø—ã—Ç–∫–∞ ${attempts + 1}/15`);
              setTimeout(() => waitForVideo(attempts + 1), 200);
            } else {
              console.error(`üñ•Ô∏è ChatArea: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${selectedUser} –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è`);
              
              // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤–∏–¥–µ–æ
              const anyVideo = document.querySelector('[id^="remote-video-"]') as HTMLVideoElement;
              if (anyVideo && videoContainer) {
                console.log('üñ•Ô∏è ChatArea: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤–∏–¥–µ–æ:', anyVideo.id);
                anyVideo.style.display = 'block';
                if (!videoContainer.contains(anyVideo)) {
                  videoContainer.appendChild(anyVideo);
                }
              }
            }
          };
          waitForVideo();
        }
      }
    }
  }, [selectedUser, isScreenShareVisible]);

  // –û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö)
  useEffect(() => {
    console.log('üñ•Ô∏è ChatArea —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', {
      isScreenShareVisible,
      sharingUsersLength: sharingUsers.length,
      sharingUsers,
      selectedUser,
      shouldShowScreenShare: isScreenShareVisible && sharingUsers.length > 0
    });
  }, [isScreenShareVisible, sharingUsers.length, selectedUser]);

  const handleSendMessage = (e: React.FormEvent) => {
    e.preventDefault()
    if (messageInput.trim() && currentChannel && user && currentChannel.type === 'text') {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ store
      sendMessage(messageInput)
      setMessageInput('')
    }
  }

  if (!currentChannel) {
    return (
      <div className="flex-1 bg-background flex items-center justify-center">
        <div className="text-muted-foreground text-center">
          <p className="text-2xl mb-2">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</p>
          <p>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è</p>
        </div>
      </div>
    )
  }

  return (
    <div className="flex-1 bg-background flex flex-col">
      {/* Channel Header */}
      <div className="h-12 px-4 flex items-center border-b border-border">
        <Hash className="w-5 h-5 text-muted-foreground mr-2" />
        <span className="font-semibold">{currentChannel.name}</span>
      </div>

      {/* Screen Share Area - –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—ë –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —á–∞—Ç–∞ */}
      {isScreenShareVisible && sharingUsers.length > 0 && (
        <div className="flex-1 bg-gray-900 flex flex-col screen-share-fullscreen-container">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ */}
          <div className="flex items-center justify-between px-4 py-2 bg-gray-800/90 backdrop-blur-sm border-b border-gray-700 flex-shrink-0">
            <div className="flex items-center gap-3 min-w-0 flex-1">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse" />
                <span className="text-red-400 font-semibold text-sm uppercase tracking-wide">–í –≠–§–ò–†–ï</span>
              </div>
              <div className="w-px h-4 bg-gray-600" />
              <Monitor className="w-4 h-4 text-green-400 flex-shrink-0" />
              <span className="text-white font-medium text-sm truncate">
                {sharingUsers.find(u => u.userId === selectedUser)?.username === '–í—ã' 
                  ? '–í–∞—à–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞' 
                  : `–°–º–æ—Ç—Ä–∏—Ç–µ: ${sharingUsers.find(u => u.userId === selectedUser)?.username}`}
              </span>
            </div>
            
            <div className="flex items-center gap-2">

              
              {/* –ö–Ω–æ–ø–∫–∞ –∑–≤—É–∫–∞ */}
              <Button
                variant="ghost"
                size="sm"
                onClick={toggleMute}
                className={cn(
                  "w-8 h-8 p-0 transition-all duration-200",
                  isMuted 
                    ? "text-red-400 hover:text-red-300 hover:bg-red-400/20" 
                    : "text-gray-300 hover:text-white hover:bg-gray-700"
                )}
                title={isMuted ? '–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : '–û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫'}
              >
                {isMuted ? <VolumeX className="w-4 h-4" /> : <Volume2 className="w-4 h-4" />}
              </Button>
              
              {/* –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è —Å–∞–º —Å—Ç—Ä–∏–º–ª—é */}
              {isScreenSharing && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={stopScreenShare}
                  className="flex items-center gap-2 text-sm px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-md transition-colors"
                  title="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞"
                >
                  <MonitorOff className="w-4 h-4" />
                  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–π —Å—Ç—Ä–∏–º
                </Button>
              )}
              
              {/* –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å */}
              <Button
                variant="ghost"
                size="sm"
                onClick={toggleFullscreen}
                className="w-8 h-8 p-0 text-gray-300 hover:text-white hover:bg-gray-700 transition-colors"
                title={isFullscreen ? "–í—ã–π—Ç–∏ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞" : "–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º"}
              >
                {isFullscreen ? <Minimize2 className="w-4 h-4" /> : <Maximize2 className="w-4 h-4" />}
              </Button>
              
              {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
              <Button
                variant="ghost"
                size="sm"
                onClick={closeScreenShare}
                className="w-8 h-8 p-0 text-gray-300 hover:text-white hover:bg-gray-700 transition-colors"
                title="–ó–∞–∫—Ä—ã—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          </div>

          {/* –û–±–ª–∞—Å—Ç—å –¥–ª—è –≤–∏–¥–µ–æ - –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—ë –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ */}
          <div className="flex-1 relative bg-black">
            <div 
              id="screen-share-container-chat" 
              className="absolute inset-0 bg-black"
            >
              {/* –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å—é–¥–∞ —á–µ—Ä–µ–∑ VoiceService */}
              {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ */}
              {sharingUsers.length === 0 && (
                <div className="absolute inset-0 flex items-center justify-center text-white">
                  <div className="text-center">
                    <div className="text-6xl mb-4">üì∫</div>
                    <div className="text-xl mb-2">–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</div>
                    <div className="text-gray-400">–°—Ç—Ä–∏–º–µ—Ä –æ—Ç–∫–ª—é—á–∏–ª—Å—è –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é</div>
                  </div>
                </div>
              )}
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –≤–Ω–∏–∑—É */}
            <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-4 pointer-events-none">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="flex items-center gap-2">
                    <div className="w-8 h-8 rounded-full bg-green-600 flex items-center justify-center">
                      <span className="text-white text-sm font-semibold">
                        {sharingUsers.find(u => u.userId === selectedUser)?.username[0].toUpperCase()}
                      </span>
                    </div>
                    <div>
                      <div className="text-white font-medium text-sm">
                        {sharingUsers.find(u => u.userId === selectedUser)?.username === '–í—ã' 
                          ? '–í—ã' 
                          : sharingUsers.find(u => u.userId === selectedUser)?.username}
                      </div>
                      <div className="text-gray-400 text-xs flex items-center gap-1">
                        <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" />
                        {sharingUsers.find(u => u.userId === selectedUser)?.username === '–í—ã' 
                          ? '–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ —ç–∫—Ä–∞–Ω' 
                          : '–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω'}
                      </div>
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center gap-2">
                  {/* –°—á–µ—Ç—á–∏–∫ –∑—Ä–∏—Ç–µ–ª–µ–π */}
                  <div className="flex items-center gap-1 bg-black/40 px-2 py-1 rounded-md">
                    <div className="w-2 h-2 bg-gray-400 rounded-full" />
                    <span className="text-gray-300 text-xs">
                      {sharingUsers.length} {sharingUsers.length === 1 ? '—Å—Ç—Ä–∏–º–µ—Ä' : '—Å—Ç—Ä–∏–º–µ—Ä–∞'}
                    </span>
                  </div>
                  
                  {/* –ö–∞—á–µ—Å—Ç–≤–æ */}
                  <div className="bg-black/40 px-2 py-1 rounded-md">
                    <span className="text-gray-300 text-xs">HD</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Messages Area - —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ */}
      {!(isScreenShareVisible && sharingUsers.length > 0) && (
        <div className="flex-1 overflow-y-auto scrollbar-thin">
          <div className="p-4 space-y-4">
            {channelMessages.length === 0 ? (
              <div className="text-center text-muted-foreground py-8">
                <p>–ü–æ–∫–∞ —á—Ç–æ –∑–¥–µ—Å—å –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</p>
                <p className="text-sm">–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ #{currentChannel.name}</p>
              </div>
            ) : (
              channelMessages.map((message) => (
                <div key={message.id} className="flex gap-3 hover:bg-accent/5 px-2 py-1 rounded">
                  <div className="w-10 h-10 rounded-full bg-primary/20 flex items-center justify-center flex-shrink-0">
                    {message.author.avatar ? (
                      <img src={message.author.avatar} alt="" className="w-full h-full rounded-full" />
                    ) : (
                      <span className="text-sm font-semibold">
                        {message.author.username[0].toUpperCase()}
                      </span>
                    )}
                  </div>
                  <div className="flex-1">
                    <div className="flex items-baseline gap-2">
                      <span className="font-semibold text-sm">
                        {message.author.username}
                      </span>
                      <span className="text-xs text-muted-foreground">
                        {formatDate(message.timestamp)}
                      </span>
                    </div>
                    <p className="text-sm mt-0.5">{message.content}</p>
                  </div>
                </div>
              ))
            )}
            <div ref={messagesEndRef} />
          </div>
        </div>
      )}

      {/* Message Input - —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ */}
      {currentChannel.type === 'text' && !(isScreenShareVisible && sharingUsers.length > 0) && (
        <form onSubmit={handleSendMessage} className="p-4">
          <div className="bg-secondary rounded-lg flex items-center px-4">
            <input
              type="text"
              value={messageInput}
              onChange={(e) => setMessageInput(e.target.value)}
              placeholder={`–ù–∞–ø–∏—Å–∞—Ç—å –≤ #${currentChannel.name}`}
              className="flex-1 bg-transparent py-3 outline-none text-sm"
            />
            <Button
              type="submit"
              size="icon"
              variant="ghost"
              className="h-8 w-8"
              disabled={!messageInput.trim()}
            >
              <Send className="w-4 h-4" />
            </Button>
          </div>
        </form>
      )}

      {/* Voice Channel Info */}
      {currentChannel.type === 'voice' && (
        <div className="p-4 text-center text-muted-foreground">
          <p>–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª: {currentChannel.name}</p>
          <p className="text-sm">–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É</p>
        </div>
      )}
    </div>
  )
}