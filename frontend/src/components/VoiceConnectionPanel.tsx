import React, { useState, useEffect } from 'react';
import { Phone, PhoneOff, Monitor, MonitorOff, Wifi, WifiOff, Loader, Mic, MicOff, Settings } from 'lucide-react';
import { useVoiceStore } from '../store/slices/voiceSlice';
import { useStore } from '../lib/store';
import voiceService from '../services/voiceService';
import { VoiceActivityIndicator } from './VoiceActivityIndicator';
import { AudioSettingsModal } from './AudioSettingsModal';

export function VoiceConnectionPanel() {
  const { 
    isConnected, 
    currentVoiceChannelId, 
    participants, 
    disconnectFromVoiceChannel 
  } = useVoiceStore();
  
  const { currentServer } = useStore();
  const [isScreenSharing, setIsScreenSharing] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState<'connected' | 'connecting' | 'disconnected'>('disconnected');
  const [isMuted, setIsMuted] = useState(false);
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);

  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
  const currentChannel = currentServer?.channels.find((channel: any) => 
    Number(channel.id) === currentVoiceChannelId && channel.type === 'voice'
  );

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
  useEffect(() => {
    const updateScreenShareStatus = () => {
      setIsScreenSharing(voiceService.getScreenSharingStatus());
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    updateScreenShareStatus();
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
    const handleScreenShareChange = () => {
      updateScreenShareStatus();
    };

    window.addEventListener('screen_share_start', handleScreenShareChange);
    window.addEventListener('screen_share_stop', handleScreenShareChange);

    return () => {
      window.removeEventListener('screen_share_start', handleScreenShareChange);
      window.removeEventListener('screen_share_stop', handleScreenShareChange);
    };
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  useEffect(() => {
    if (isConnected) {
      setConnectionStatus('connected');
    } else if (currentVoiceChannelId) {
      setConnectionStatus('connecting');
    } else {
      setConnectionStatus('disconnected');
    }
  }, [isConnected, currentVoiceChannelId]);

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('üéôÔ∏è [VoiceConnectionPanel] –°–æ—Å—Ç–æ—è–Ω–∏–µ:', {
    currentVoiceChannelId,
    isConnected,
    participantsCount: participants.length,
    participants: participants.map(p => ({ id: p.user_id, username: p.username })),
    currentChannel: currentChannel?.name,
    connectionStatus
  });

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
  if (!currentVoiceChannelId) {
    return null;
  }

  const handleToggleScreenShare = async () => {
    if (isScreenSharing) {
      voiceService.stopScreenShare();
    } else {
      const success = await voiceService.startScreenShare();
      if (!success) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      }
    }
  };

  const handleDisconnect = () => {
    disconnectFromVoiceChannel();
  };

  const handleToggleMute = () => {
    setIsMuted(!isMuted);
    voiceService.setMuted(!isMuted);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "—É—á–∞—Å—Ç–Ω–∏–∫"
  const getParticipantsCountText = (count: number): string => {
    const lastDigit = count % 10;
    const lastTwoDigits = count % 100;
    
    // –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è 11, 12, 13, 14
    if (lastTwoDigits >= 11 && lastTwoDigits <= 14) {
      return `${count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`;
    }
    
    // –û–±—ã—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–∫–ª–æ–Ω–µ–Ω–∏—è
    if (lastDigit === 1) {
      return `${count} —É—á–∞—Å—Ç–Ω–∏–∫`;
    } else if (lastDigit >= 2 && lastDigit <= 4) {
      return `${count} —É—á–∞—Å—Ç–Ω–∏–∫–∞`;
    } else {
      return `${count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`;
    }
  };

  const getConnectionStatusText = () => {
    switch (connectionStatus) {
      case 'connected':
        return '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
      case 'connecting':
        return '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
      default:
        return '–û—Ç–∫–ª—é—á–µ–Ω–æ';
    }
  };

  const getConnectionStatusIcon = () => {
    switch (connectionStatus) {
      case 'connected':
        return <Wifi className="w-4 h-4 text-green-400" />;
      case 'connecting':
        return <Loader className="w-4 h-4 text-yellow-400 animate-spin" />;
      default:
        return <WifiOff className="w-4 h-4 text-red-400" />;
    }
  };

  return (
    <div className="w-[315px] bg-[#36373e] rounded-t-lg border-t border-[#4e4f56] shadow-lg animate-slide-up">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞ */}
      <div className="flex items-center justify-between px-3 py-2 border-b border-[#4e4f56]">
        <div className="flex items-center gap-2 flex-1 min-w-0">
          <div className="flex items-center gap-1">
            <Phone className="w-4 h-4 text-green-400 flex-shrink-0" />
            {getConnectionStatusIcon()}
          </div>
          <div className="flex-1 min-w-0">
            <div className="text-sm font-medium text-white truncate">
              {currentChannel?.name || `–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª ${currentVoiceChannelId}`}
            </div>
            <div className="text-xs text-[#b5bac1]">
              {getConnectionStatusText()} ‚Ä¢ {getParticipantsCountText(participants.length)}
            </div>
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex items-center justify-between px-3 py-2">
        <div className="flex items-center gap-2">
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
          <div className="px-2">
            <VoiceActivityIndicator 
              isActive={isConnected && !isMuted} 
              isMuted={isMuted}
              size="medium"
            />
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ */}
          <button
            onClick={handleToggleMute}
            className={`p-2 rounded transition-colors ${
              isMuted
                ? 'bg-red-500 text-white hover:bg-red-600'
                : 'bg-[#4e4f56] text-[#b5bac1] hover:bg-[#5a5b63]'
            }`}
            title={isMuted ? '–í–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω' : '–í—ã–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω'}
          >
            {isMuted ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
          </button>

          {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
          <button
            onClick={() => setIsSettingsOpen(true)}
            className="p-2 rounded bg-[#4e4f56] text-[#b5bac1] hover:bg-[#5a5b63] transition-colors"
            title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ"
          >
            <Settings className="w-4 h-4" />
          </button>

          {/* –ö–Ω–æ–ø–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞ */}
          <button
            onClick={handleToggleScreenShare}
            className={`flex items-center gap-2 px-3 py-1.5 rounded text-sm font-medium transition-colors ${
              isScreenSharing
                ? 'bg-red-500 text-white hover:bg-red-600'
                : 'bg-[#5865f2] text-white hover:bg-[#4752c4]'
            }`}
            title={isScreenSharing ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞' : '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞'}
          >
            {isScreenSharing ? (
              <>
                <MonitorOff className="w-4 h-4" />
                <span>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</span>
              </>
            ) : (
              <>
                <Monitor className="w-4 h-4" />
                <span>–î–µ–º–∫–∞</span>
              </>
            )}
          </button>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è */}
        <button
          onClick={handleDisconnect}
          className="flex items-center gap-2 px-3 py-1.5 rounded text-sm font-medium bg-red-500 text-white hover:bg-red-600 transition-colors"
          title="–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"
        >
          <PhoneOff className="w-4 h-4" />
          <span>–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è</span>
        </button>
      </div>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
      <AudioSettingsModal 
        isOpen={isSettingsOpen}
        onClose={() => setIsSettingsOpen(false)}
      />
    </div>
  );
} 