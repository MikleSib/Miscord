// RNNoise AudioWorklet Processor
class RNNoiseProcessor extends AudioWorkletProcessor {
  constructor(options) {
    super();
    
    this.frameSize = 480; // RNNoise —Ç—Ä–µ–±—É–µ—Ç 480 —Å—ç–º–ø–ª–æ–≤ (10ms –ø—Ä–∏ 48kHz)
    this.sampleRate = 48000;
    this.sensitivity = options.processorOptions?.sensitivity || 70;
    
    // –ë—É—Ñ–µ—Ä—ã –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å—ç–º–ø–ª–æ–≤
    this.inputBuffer = new Float32Array(this.frameSize);
    this.outputBuffer = new Float32Array(this.frameSize);
    this.bufferIndex = 0;
    
    // RNNoise —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.rnnoiseState = null;
    this.wasmModule = null;
    this.inputPtr = null;
    this.outputPtr = null;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.processedFrames = 0;
    this.isInitialized = false;
    
    console.log('üîá RNNoise Processor —Å–æ–∑–¥–∞–Ω, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', this.sensitivity);
    
    // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    this.port.onmessage = (event) => {
      this.handleMessage(event.data);
    };
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RNNoise
    this.initializeRNNoise();
  }
  
  handleMessage(data) {
    switch (data.type) {
      case 'setSensitivity':
        this.sensitivity = data.sensitivity;
        console.log('üîá –û–±–Ω–æ–≤–ª–µ–Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å RNNoise:', this.sensitivity);
        break;
      case 'getStats':
        this.port.postMessage({
          type: 'stats',
          data: {
            processedFrames: this.processedFrames,
            isInitialized: this.isInitialized,
            sensitivity: this.sensitivity,
            frameSize: this.frameSize
          }
        });
        break;
    }
  }
  
  async initializeRNNoise() {
    try {
      console.log('üîá –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RNNoise...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º WASM –º–æ–¥—É–ª—å RNNoise
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π WASM —Ñ–∞–π–ª
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      this.wasmModule = await this.loadWasmModule();
      
      if (this.wasmModule) {
        // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ RNNoise
        this.rnnoiseState = this.wasmModule._rnnoise_create();
        
        // –í—ã–¥–µ–ª—è–µ–º –ø–∞–º—è—Ç—å –¥–ª—è –±—É—Ñ–µ—Ä–æ–≤
        this.inputPtr = this.wasmModule._malloc(this.frameSize * 4); // Float32 = 4 –±–∞–π—Ç–∞
        this.outputPtr = this.wasmModule._malloc(this.frameSize * 4);
        
        this.isInitialized = true;
        console.log('üîá RNNoise –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        
        this.port.postMessage({
          type: 'initialized',
          success: true
        });
      }
    } catch (error) {
      console.error('üîá –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RNNoise:', error);
      this.port.postMessage({
        type: 'initialized',
        success: false,
        error: error.message
      });
    }
  }
  
  async loadWasmModule() {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ WASM –º–æ–¥—É–ª—è
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ RNNoise WASM
    console.log('üîá –ó–∞–≥—Ä—É–∑–∫–∞ WASM –º–æ–¥—É–ª—è (–∑–∞–≥–ª—É—à–∫–∞)...');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –æ–±—Ä–∞–±–æ—Ç–∫—É
    return null;
  }
  
  process(inputs, outputs, parameters) {
    const input = inputs[0];
    const output = outputs[0];
    
    if (!input || !output || input.length === 0 || output.length === 0) {
      return true;
    }
    
    const inputChannel = input[0];
    const outputChannel = output[0];
    
    if (!inputChannel || !outputChannel) {
      return true;
    }
    
    // –ï—Å–ª–∏ RNNoise –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    if (!this.isInitialized || !this.wasmModule) {
      this.processWithSimpleFilter(inputChannel, outputChannel);
    } else {
      this.processWithRNNoise(inputChannel, outputChannel);
    }
    
    return true;
  }
  
  processWithSimpleFilter(inputChannel, outputChannel) {
    // –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —à—É–º–æ–¥–∞–≤–∞
    const sensitivity = this.sensitivity / 100; // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º 0-1
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–Ω–µ—Ä–≥–∏—é —Å–∏–≥–Ω–∞–ª–∞
    let energy = 0;
    let maxSample = 0;
    for (let i = 0; i < inputChannel.length; i++) {
      const sample = Math.abs(inputChannel[i]);
      energy += sample * sample;
      maxSample = Math.max(maxSample, sample);
    }
    energy = Math.sqrt(energy / inputChannel.length);
    
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–µ)
    const noiseThreshold = 0.001 + (1 - sensitivity) * 0.05; // –æ—Ç 0.001 –¥–æ 0.051
    const signalThreshold = 0.01 + sensitivity * 0.1; // –æ—Ç 0.01 –¥–æ 0.11
    const maxThreshold = 0.05 + sensitivity * 0.3; // –æ—Ç 0.05 –¥–æ 0.35
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ —Ñ—Ä–µ–π–º–∞
    let suppressionFactor;
    if (maxSample > maxThreshold || energy > signalThreshold) {
      // –Ø–≤–Ω–æ —Ä–µ—á—å - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
      suppressionFactor = 0.9 + sensitivity * 0.1; // –æ—Ç 0.9 –¥–æ 1.0
    } else if (energy < noiseThreshold && maxSample < noiseThreshold * 3) {
      // –Ø–≤–Ω–æ —à—É–º - —Å–∏–ª—å–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
      suppressionFactor = (1 - sensitivity) * 0.2; // –æ—Ç 0.2 –¥–æ 0.0
    } else {
      // –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - —É–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
      suppressionFactor = 0.2 + sensitivity * 0.6; // –æ—Ç 0.2 –¥–æ 0.8
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
    for (let i = 0; i < inputChannel.length; i++) {
      let sample = inputChannel[i];
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
      sample *= suppressionFactor;
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à–∏–ø–µ–Ω–∏—è
      if (i > 0 && sensitivity > 0.5) {
        const highPassStrength = (sensitivity - 0.5) * 0.3;
        sample = sample - highPassStrength * inputChannel[i - 1];
      }
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É
      sample = Math.max(-1, Math.min(1, sample));
      
      outputChannel[i] = sample;
    }
    
    this.processedFrames++;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 1000 —Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (this.processedFrames % 1000 === 0) {
      console.log(`üîá –§–∏–ª—å—Ç—Ä: —ç–Ω–µ—Ä–≥–∏—è=${energy.toFixed(4)}, –º–∞–∫—Å=${maxSample.toFixed(4)}, –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ=${suppressionFactor.toFixed(2)}, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å=${this.sensitivity}%`);
    }
  }
  
  processWithRNNoise(inputChannel, outputChannel) {
    // –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Å—ç–º–ø–ª—ã –≤ –±—É—Ñ–µ—Ä–µ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è frameSize
    for (let i = 0; i < inputChannel.length; i++) {
      this.inputBuffer[this.bufferIndex] = inputChannel[i];
      this.bufferIndex++;
      
      // –ö–æ–≥–¥–∞ –±—É—Ñ–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ—Ä–µ–π–º
      if (this.bufferIndex >= this.frameSize) {
        this.processFrame();
        this.bufferIndex = 0;
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—ç–º–ø–ª—ã
    const samplesToOutput = Math.min(inputChannel.length, this.outputBuffer.length);
    for (let i = 0; i < samplesToOutput; i++) {
      outputChannel[i] = this.outputBuffer[i] || 0;
    }
  }
  
  processFrame() {
    if (!this.wasmModule || !this.rnnoiseState) {
      return;
    }
    
    try {
      // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ WASM –ø–∞–º—è—Ç—å
      const inputArray = new Float32Array(
        this.wasmModule.HEAPF32.buffer,
        this.inputPtr,
        this.frameSize
      );
      inputArray.set(this.inputBuffer);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ—Ä–µ–π–º —Å –ø–æ–º–æ—â—å—é RNNoise
      this.wasmModule._rnnoise_process_frame(
        this.rnnoiseState,
        this.outputPtr,
        this.inputPtr
      );
      
      // –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ
      const outputArray = new Float32Array(
        this.wasmModule.HEAPF32.buffer,
        this.outputPtr,
        this.frameSize
      );
      this.outputBuffer.set(outputArray);
      
      this.processedFrames++;
    } catch (error) {
      console.error('üîá –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—Ä–µ–π–º–∞ RNNoise:', error);
      // Fallback: –∫–æ–ø–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      this.outputBuffer.set(this.inputBuffer);
    }
  }
  
  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
  static get parameterDescriptors() {
    return [];
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
registerProcessor('rnnoise-processor', RNNoiseProcessor); 