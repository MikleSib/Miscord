// Advanced Noise Suppression Processor
// –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è Miscord - –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç Krisp
class AdvancedNoiseProcessor extends AudioWorkletProcessor {
  constructor(options) {
    super();
    
    this.frameSize = 128; // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤–µ–±-–∞—É–¥–∏–æ
    this.sampleRate = sampleRate || 48000;
    this.sensitivity = options.processorOptions?.sensitivity || 70;
    
    // –ë—É—Ñ–µ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    this.inputBuffer = new Float32Array(this.frameSize);
    this.outputBuffer = new Float32Array(this.frameSize);
    this.bufferIndex = 0;
    
    // –ú–Ω–æ–≥–æ–ø–æ–ª–æ—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 16 –ø–æ–ª–æ—Å –¥–ª—è –ª—É—á—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏)
    this.bands = 16;
    this.bandFilters = [];
    this.bandBuffers = [];
    this.initializeBandFilters();
    
    // –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    this.fftSize = 512; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    this.hopSize = 128;
    this.window = this.createHammingWindow(this.fftSize);
    this.prevFrame = new Float32Array(this.fftSize);
    this.overlapBuffer = new Float32Array(this.hopSize);
    
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ª–æ—Å—ã
    this.noisePowers = new Float32Array(this.bands).fill(0.0001);
    this.speechPowers = new Float32Array(this.bands).fill(0.001);
    this.adaptationRates = new Float32Array(this.bands).fill(0.01); // –ë—ã—Å—Ç—Ä–µ–µ –∞–¥–∞–ø—Ç–∞—Ü–∏—è
    
    // –î–µ—Ç–µ–∫—Ç–æ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (VAD) - —É–ª—É—á—à–µ–Ω–Ω—ã–π
    this.vadHistory = new Array(20).fill(0); // –ë–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏–∏
    this.vadThreshold = 0.25; // –ë–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π
    this.silenceFrames = 0;
    this.speechFrames = 0;
    
    // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è
    this.smoothingFactors = new Float32Array(this.bands).fill(1.0);
    this.prevSmoothingFactors = new Float32Array(this.bands).fill(1.0);
    this.smoothingRate = 0.3; // –ë—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–∫—Ü–∏—è
    
    // Noise Gate –¥–ª—è —Å–ª–∞–±—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    this.noiseGateThreshold = 0.001;
    this.noiseGateRatio = 0.1;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.processedFrames = 0;
    this.totalNoiseSuppressed = 0;
    this.qualityScore = 100;
    this.isInitialized = true;
    
    console.log('üîá Advanced Noise Processor v2.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º');
    
    this.port.onmessage = (event) => {
      this.handleMessage(event.data);
    };
  }
  
  handleMessage(data) {
    switch (data.type) {
      case 'setSensitivity':
        this.sensitivity = Math.max(0, Math.min(100, data.sensitivity));
        this.updateSensitivity();
        console.log('üîá –û–±–Ω–æ–≤–ª–µ–Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', this.sensitivity);
        break;
      case 'setOptions':
        if (data.options) {
          this.sensitivity = data.options.sensitivity || this.sensitivity;
          this.updateSensitivity();
          console.log('üîá –û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—É–º–æ–¥–∞–≤–∞:', data.options);
        }
        break;
      case 'getStats':
        this.port.postMessage({
          type: 'stats',
          data: {
            processedFrames: this.processedFrames,
            sensitivity: this.sensitivity,
            qualityScore: Math.round(this.qualityScore),
            totalNoiseSuppressed: this.totalNoiseSuppressed,
            speechFrames: this.speechFrames,
            silenceFrames: this.silenceFrames,
            noisePowers: Array.from(this.noisePowers),
            speechPowers: Array.from(this.speechPowers)
          }
        });
        break;
    }
  }
  
  initializeBandFilters() {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–æ—Å–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (IIR —Ñ–∏–ª—å—Ç—Ä—ã –ë–∞—Ç—Ç–µ—Ä–≤–æ—Ä—Ç–∞)
    const nyquist = this.sampleRate / 2;
    const bandWidth = nyquist / this.bands;
    
    for (let i = 0; i < this.bands; i++) {
      const lowFreq = i * bandWidth;
      const highFreq = (i + 1) * bandWidth;
      
      this.bandFilters.push({
        // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π)
        lowFreq: lowFreq,
        highFreq: highFreq,
        prevInput: 0,
        prevOutput: 0,
        // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
        a: Math.exp(-2 * Math.PI * highFreq / this.sampleRate),
        b: Math.exp(-2 * Math.PI * lowFreq / this.sampleRate)
      });
      
      this.bandBuffers.push(new Float32Array(this.frameSize));
    }
  }
  
  createHammingWindow(size) {
    const window = new Float32Array(size);
    for (let i = 0; i < size; i++) {
      window[i] = 0.54 - 0.46 * Math.cos(2 * Math.PI * i / (size - 1));
    }
    return window;
  }
  
  updateSensitivity() {
    const normalizedSensitivity = this.sensitivity / 100;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä–æ–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    for (let i = 0; i < this.bands; i++) {
      // –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ - –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
      const freqFactor = (i + 1) / this.bands;
      this.adaptationRates[i] = 0.0005 + normalizedSensitivity * 0.002 * freqFactor;
    }
    
    this.vadThreshold = 0.2 + normalizedSensitivity * 0.3;
  }
  
  process(inputs, outputs, parameters) {
    const input = inputs[0];
    const output = outputs[0];
    
    if (!input || !output || input.length === 0 || output.length === 0) {
      return true;
    }
    
    const inputChannel = input[0];
    const outputChannel = output[0];
    
    if (!inputChannel || !outputChannel) {
      return true;
    }
    
    this.processAdvanced(inputChannel, outputChannel);
    
    return true;
  }
  
  processAdvanced(inputChannel, outputChannel) {
    // 1. –ú–Ω–æ–≥–æ–ø–æ–ª–æ—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    const bandPowers = this.analyzeBands(inputChannel);
    
    // 2. –î–µ—Ç–µ–∫—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const isVoiceActive = this.detectVoiceActivity(bandPowers);
    
    // 3. –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —à—É–º–∞ –∏ —Ä–µ—á–∏
    this.updateNoiseModels(bandPowers, isVoiceActive);
    
    // 4. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ª–æ—Å—ã
    const suppressionFactors = this.calculateSuppressionFactors(bandPowers);
    
    // 5. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≤—ã—á–∏—Ç–∞–Ω–∏—è
    this.applySpectralSubtraction(inputChannel, outputChannel, suppressionFactors);
    
    // 6. –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞
    this.postProcess(outputChannel);
    
    this.processedFrames++;
    
    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if (this.processedFrames % 1000 === 0) {
      const avgSuppression = suppressionFactors.reduce((a, b) => a + b, 0) / suppressionFactors.length;
      const minSuppression = Math.min(...suppressionFactors);
      const maxSuppression = Math.max(...suppressionFactors);
      const qualityPercent = Math.round(this.qualityScore);
      
      console.log(`üîá Advanced v2.0: VAD=${isVoiceActive}, –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ=${avgSuppression.toFixed(3)} (${minSuppression.toFixed(3)}-${maxSuppression.toFixed(3)}), –∫–∞—á–µ—Å—Ç–≤–æ=${qualityPercent}%, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å=${this.sensitivity}%`);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
      if (qualityPercent < 50) {
        console.warn(`üîá –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ! –†–µ—á—å=${this.speechFrames}, –º–æ–ª—á–∞–Ω–∏–µ=${this.silenceFrames}, –æ–±—â–µ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ=${(this.totalNoiseSuppressed/this.processedFrames*100).toFixed(1)}%`);
      }
    }
  }
  
  analyzeBands(inputChannel) {
    const bandPowers = new Float32Array(this.bands);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª–æ—Å–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –≤—ã—á–∏—Å–ª—è–µ–º –º–æ—â–Ω–æ—Å—Ç—å
    for (let band = 0; band < this.bands; band++) {
      const filter = this.bandFilters[band];
      const buffer = this.bandBuffers[band];
      let power = 0;
      
      for (let i = 0; i < inputChannel.length; i++) {
        // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä (IIR)
        const input = inputChannel[i];
        const output = filter.b * input + filter.a * filter.prevOutput;
        filter.prevInput = input;
        filter.prevOutput = output;
        
        buffer[i] = output;
        power += output * output;
      }
      
      bandPowers[band] = power / inputChannel.length;
    }
    
    return bandPowers;
  }
  
  detectVoiceActivity(bandPowers) {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ —á–∞—Å—Ç–æ—Ç–∞–º
    const totalPower = bandPowers.reduce((sum, power) => sum + power, 0);
    
    if (totalPower < 0.00001) {
      this.silenceFrames++;
      return false;
    }
    
    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ—á–µ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    // –ì–æ–ª–æ—Å –∏–º–µ–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
    const lowBands = bandPowers.slice(0, this.bands / 4);  // 0-25% —á–∞—Å—Ç–æ—Ç
    const midBands = bandPowers.slice(this.bands / 4, 3 * this.bands / 4);  // 25-75% —á–∞—Å—Ç–æ—Ç  
    const highBands = bandPowers.slice(3 * this.bands / 4);  // 75-100% —á–∞—Å—Ç–æ—Ç
    
    const lowPower = lowBands.reduce((sum, power) => sum + power, 0);
    const midPower = midBands.reduce((sum, power) => sum + power, 0);
    const highPower = highBands.reduce((sum, power) => sum + power, 0);
    
    // –†–µ—á—å –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç –±–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Å—Ä–µ–¥–Ω–∏—Ö —á–∞—Å—Ç–æ—Ç–∞—Ö
    const speechRatio = midPower / (totalPower + 0.00001);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–∏–∑–∫–∏—Ö –∫ –≤—ã—Å–æ–∫–∏–º —á–∞—Å—Ç–æ—Ç–∞–º (—Ä–µ—á—å vs —à—É–º)
    const lowHighRatio = lowPower / (highPower + 0.00001);
    
    // –î–µ—Ç–µ–∫—Ç–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
    const f0Strength = this.detectF0(bandPowers);
    
    // –î–µ—Ç–µ–∫—Ç–æ—Ä —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —ç–Ω–µ—Ä–≥–∏–∏ (—Ä–µ—á—å –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞ —á–µ–º –∏–º–ø—É–ª—å—Å–Ω—ã–π —à—É–º)
    const energyStability = this.detectEnergyStability(bandPowers);
    
    // –î–µ—Ç–µ–∫—Ç–æ—Ä –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ (—Ä–µ—á—å –∏–º–µ–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
    const periodicity = this.detectPeriodicity(bandPowers);
    
    // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å –≤–µ—Å–∞–º–∏
    const vadScore = 
      speechRatio * 0.3 +           // –ß–∞—Å—Ç–æ—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
      f0Strength * 0.25 +           // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–Ω
      energyStability * 0.2 +       // –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
      periodicity * 0.15 +          // –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å
      Math.min(lowHighRatio, 2) * 0.1; // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç
    
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    let adaptiveThreshold = this.vadThreshold;
    const recentSilence = this.silenceFrames / (this.silenceFrames + this.speechFrames + 1);
    if (recentSilence > 0.8) {
      // –ï—Å–ª–∏ –¥–æ–ª–≥–æ –º–æ–ª—á–∏–º, —Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥
      adaptiveThreshold *= 0.8;
    }
    
    // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–æ–º
    const isCurrentlyActive = vadScore > adaptiveThreshold;
    this.vadHistory.shift();
    this.vadHistory.push(isCurrentlyActive ? 1 : 0);
    
    const recentActivity = this.vadHistory.reduce((sum, val) => sum + val, 0);
    const activityRatio = recentActivity / this.vadHistory.length;
    
    // –ì–∏—Å—Ç–µ—Ä–µ–∑–∏—Å: –ª–µ–≥—á–µ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    const wasActive = this.vadHistory[this.vadHistory.length - 2] === 1;
    let isActive;
    
    if (wasActive) {
      // –ï—Å–ª–∏ –≥–æ–≤–æ—Ä–∏–ª–∏, –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –º–æ–ª—á–∞–Ω–∏—è —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
      isActive = activityRatio > 0.2;
    } else {
      // –ï—Å–ª–∏ –º–æ–ª—á–∞–ª–∏, –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å
      isActive = activityRatio > 0.4;
    }
    
    if (isActive) {
      this.speechFrames++;
    } else {
      this.silenceFrames++;
    }
    
    return isActive;
  }
  
  detectF0(bandPowers) {
    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ–Ω–∞
    let harmonicStrength = 0;
    let peakCount = 0;
    
    // –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã (–≤–æ–∑–º–æ–∂–Ω—ã–µ –≥–∞—Ä–º–æ–Ω–∏–∫–∏)
    for (let i = 2; i < this.bands - 2; i++) {
      const current = bandPowers[i];
      const prev2 = bandPowers[i - 2];
      const prev1 = bandPowers[i - 1];
      const next1 = bandPowers[i + 1];
      const next2 = bandPowers[i + 2];
      
      // –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
      if (current > prev1 && current > next1 && current > prev2 && current > next2) {
        const prominence = current / (Math.max(prev1, next1) + 0.00001);
        if (prominence > 1.3) {
          harmonicStrength += prominence;
          peakCount++;
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É –ø–∏–∫–∞–º–∏
    if (peakCount >= 2) {
      harmonicStrength *= 1.5; // –ë–æ–Ω—É—Å –∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≥–∞—Ä–º–æ–Ω–∏–∫–∏
    }
    
    return Math.min(harmonicStrength / (this.bands * 2), 1.0);
  }
  
  detectEnergyStability(bandPowers) {
    // –î–µ—Ç–µ–∫—Ç–æ—Ä —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —ç–Ω–µ—Ä–≥–∏–∏ - —Ä–µ—á—å –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞ —á–µ–º –∏–º–ø—É–ª—å—Å–Ω—ã–π —à—É–º
    if (!this.prevFrame || this.prevFrame.length !== bandPowers.length) {
      this.prevFrame = new Float32Array(bandPowers);
      return 0.5;
    }
    
    let stability = 0;
    for (let i = 0; i < bandPowers.length; i++) {
      const current = bandPowers[i];
      const previous = this.prevFrame[i];
      
      if (current > 0.00001 && previous > 0.00001) {
        const ratio = Math.min(current, previous) / Math.max(current, previous);
        stability += ratio;
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–∞–¥—Ä
    for (let i = 0; i < bandPowers.length; i++) {
      this.prevFrame[i] = bandPowers[i];
    }
    
    return stability / bandPowers.length;
  }
  
  detectPeriodicity(bandPowers) {
    // –ü—Ä–æ—Å—Ç–æ–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    if (!this.energyHistory) {
      this.energyHistory = new Array(20).fill(0);
    }
    
    const totalEnergy = bandPowers.reduce((sum, power) => sum + power, 0);
    this.energyHistory.shift();
    this.energyHistory.push(totalEnergy);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
    let maxCorrelation = 0;
    for (let lag = 2; lag < 10; lag++) {
      let correlation = 0;
      for (let i = lag; i < this.energyHistory.length; i++) {
        correlation += this.energyHistory[i] * this.energyHistory[i - lag];
      }
      maxCorrelation = Math.max(maxCorrelation, correlation);
    }
    
    const normalizedCorrelation = maxCorrelation / (this.energyHistory.length * totalEnergy + 0.00001);
    return Math.min(normalizedCorrelation, 1.0);
  }
  
  updateNoiseModels(bandPowers, isVoiceActive) {
    for (let i = 0; i < this.bands; i++) {
      const power = bandPowers[i];
      const adaptRate = this.adaptationRates[i];
      
      if (isVoiceActive) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å —Ä–µ—á–∏
        this.speechPowers[i] = (1 - adaptRate) * this.speechPowers[i] + adaptRate * power;
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å —à—É–º–∞ (–±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è)
        this.noisePowers[i] = (1 - adaptRate * 2) * this.noisePowers[i] + adaptRate * 2 * power;
      }
    }
  }
  
  calculateSuppressionFactors(bandPowers) {
    const suppressionFactors = new Float32Array(this.bands);
    const sensitivity = this.sensitivity / 100;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —ç–Ω–µ—Ä–≥–∏—é —Å–∏–≥–Ω–∞–ª–∞
    const totalPower = bandPowers.reduce((sum, power) => sum + power, 0);
    
    for (let i = 0; i < this.bands; i++) {
      const signalPower = bandPowers[i];
      const noisePower = this.noisePowers[i];
      const speechPower = this.speechPowers[i];
      
      // –£–ª—É—á—à–µ–Ω–Ω–∞—è SNR –æ—Ü–µ–Ω–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–æ—Å–µ–¥–Ω–∏—Ö –ø–æ–ª–æ—Å
      const neighborWeight = 0.1;
      const prevBand = i > 0 ? bandPowers[i-1] : signalPower;
      const nextBand = i < this.bands-1 ? bandPowers[i+1] : signalPower;
      const weightedSignal = signalPower + neighborWeight * (prevBand + nextBand);
      
      const snr = weightedSignal / (noisePower + 0.00001);
      const snrDb = 10 * Math.log10(snr);
      
      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ—á–∏
      const speechProb = speechPower / (speechPower + noisePower + 0.00001);
      const speechConfidence = Math.min(1.0, speechProb * 2);
      
      // –ß–∞—Å—Ç–æ—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ (–≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ)
      const freqFactor = (i + 1) / this.bands;
      const freqWeight = 0.5 + 0.5 * freqFactor; // 0.5 –¥–ª—è –Ω–∏–∑–∫–∏—Ö, 1.0 –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç
      
      // –ú–Ω–æ–≥–æ—Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
      let suppressionFactor = 1.0;
      
      // 1. Wiener —Ñ–∏–ª—å—Ç—Ä (–±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ)
      const wienerGain = snr / (snr + 1);
      suppressionFactor *= wienerGain;
      
      // 2. –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–µ –≤—ã—á–∏—Ç–∞–Ω–∏–µ –¥–ª—è –Ω–∏–∑–∫–∏—Ö SNR
      if (snrDb < 10) {
        const spectralSubtraction = Math.max(0.1, 1 - (noisePower / (signalPower + 0.00001)) * freqWeight);
        suppressionFactor *= spectralSubtraction;
      }
      
      // 3. –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const aggressiveness = sensitivity * freqWeight;
      if (aggressiveness > 0.3) {
        const adaptiveFactor = Math.pow(suppressionFactor, 1 + aggressiveness);
        suppressionFactor = adaptiveFactor;
      }
      
      // 4. –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏
      if (speechConfidence < 0.5) {
        const speechSuppression = 0.1 + 0.9 * speechConfidence;
        suppressionFactor *= speechSuppression;
      }
      
      // 5. Noise Gate –¥–ª—è –æ—á–µ–Ω—å —Å–ª–∞–±—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
      if (signalPower < this.noiseGateThreshold) {
        suppressionFactor *= this.noiseGateRatio;
      }
      
      // 6. –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è —Ä–µ—á–∏
      if (speechConfidence > 0.8 && snrDb > 15) {
        suppressionFactor = Math.max(suppressionFactor, 0.7);
      }
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω (–±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –º–∏–Ω–∏–º—É–º)
      suppressionFactors[i] = Math.max(0.005, Math.min(1.0, suppressionFactor));
    }
    
    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
    for (let i = 0; i < this.bands; i++) {
      const currentFactor = suppressionFactors[i];
      const prevFactor = this.smoothingFactors[i];
      
      // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
      let adaptiveRate = this.smoothingRate;
      if (currentFactor < prevFactor) {
        // –ë—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞
        adaptiveRate *= 1.5;
      } else {
        // –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ —Ä–µ—á–∏
        adaptiveRate *= 0.7;
      }
      
      this.smoothingFactors[i] = (1 - adaptiveRate) * prevFactor + adaptiveRate * currentFactor;
      suppressionFactors[i] = this.smoothingFactors[i];
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
    const avgSuppression = suppressionFactors.reduce((sum, factor) => sum + factor, 0) / this.bands;
    this.totalNoiseSuppressed += (1 - avgSuppression);
    this.qualityScore = Math.max(0, 100 - (this.totalNoiseSuppressed / this.processedFrames) * 1000);
    
    return suppressionFactors;
  }
  
  applySpectralSubtraction(inputChannel, outputChannel, suppressionFactors) {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ª–æ—Å—ã
    for (let i = 0; i < inputChannel.length; i++) {
      let sample = inputChannel[i];
      
      // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å FFT)
      let processedSample = 0;
      let totalWeight = 0;
      
      for (let band = 0; band < this.bands; band++) {
        const bandSample = this.bandBuffers[band][i];
        const weight = suppressionFactors[band];
        processedSample += bandSample * weight;
        totalWeight += weight;
      }
      
      if (totalWeight > 0) {
        sample = processedSample / totalWeight;
      } else {
        sample *= 0.1; // –°–∏–ª—å–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤—Å–µ –≤–µ—Å–∞ –º–∞–ª—ã
      }
      
      outputChannel[i] = sample;
    }
  }
  
  postProcess(outputChannel) {
    // –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞: —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    for (let i = 1; i < outputChannel.length - 1; i++) {
      const current = outputChannel[i];
      const prev = outputChannel[i - 1];
      const next = outputChannel[i + 1];
      
      // –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑–∫–∏—Ö —Å–∫–∞—á–∫–æ–≤ (–∏–º–ø—É–ª—å—Å–æ–≤)
      if (Math.abs(current) > Math.abs(prev) * 3 && Math.abs(current) > Math.abs(next) * 3) {
        outputChannel[i] = (prev + next) / 2;
      }
      
      // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
      if (i % 4 === 0) {
        outputChannel[i] = 0.7 * current + 0.15 * prev + 0.15 * next;
      }
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    let maxSample = 0;
    for (let i = 0; i < outputChannel.length; i++) {
      maxSample = Math.max(maxSample, Math.abs(outputChannel[i]));
    }
    
    if (maxSample > 0.95) {
      const normFactor = 0.95 / maxSample;
      for (let i = 0; i < outputChannel.length; i++) {
        outputChannel[i] *= normFactor;
      }
    }
  }
  
  static get parameterDescriptors() {
    return [];
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—à –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
registerProcessor('advanced-noise-processor', AdvancedNoiseProcessor); 