// Advanced Noise Suppression Processor
// –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è Miscord - –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç Krisp
class AdvancedNoiseProcessor extends AudioWorkletProcessor {
  constructor(options) {
    super();
    
    this.frameSize = 128; // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤–µ–±-–∞—É–¥–∏–æ
    this.sampleRate = sampleRate || 48000;
    this.sensitivity = options.processorOptions?.sensitivity || 70;
    
    // –ë—É—Ñ–µ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    this.inputBuffer = new Float32Array(this.frameSize);
    this.outputBuffer = new Float32Array(this.frameSize);
    this.bufferIndex = 0;
    
    // –ú–Ω–æ–≥–æ–ø–æ–ª–æ—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (8 –ø–æ–ª–æ—Å)
    this.bands = 8;
    this.bandFilters = [];
    this.bandBuffers = [];
    this.initializeBandFilters();
    
    // –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    this.fftSize = 256;
    this.hopSize = 128;
    this.window = this.createHammingWindow(this.fftSize);
    this.prevFrame = new Float32Array(this.fftSize);
    this.overlapBuffer = new Float32Array(this.hopSize);
    
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ª–æ—Å—ã
    this.noisePowers = new Float32Array(this.bands).fill(0.001);
    this.speechPowers = new Float32Array(this.bands).fill(0.01);
    this.adaptationRates = new Float32Array(this.bands).fill(0.001);
    
    // –î–µ—Ç–µ–∫—Ç–æ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (VAD)
    this.vadHistory = new Array(10).fill(0);
    this.vadThreshold = 0.3;
    
    // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è
    this.smoothingFactors = new Float32Array(this.bands).fill(1.0);
    this.smoothingRate = 0.1;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.processedFrames = 0;
    this.isInitialized = true;
    
    console.log('üîá Advanced Noise Processor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    this.port.onmessage = (event) => {
      this.handleMessage(event.data);
    };
  }
  
  handleMessage(data) {
    switch (data.type) {
      case 'setSensitivity':
        this.sensitivity = Math.max(0, Math.min(100, data.sensitivity));
        this.updateSensitivity();
        console.log('üîá –û–±–Ω–æ–≤–ª–µ–Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', this.sensitivity);
        break;
      case 'getStats':
        this.port.postMessage({
          type: 'stats',
          data: {
            processedFrames: this.processedFrames,
            sensitivity: this.sensitivity,
            noisePowers: Array.from(this.noisePowers),
            speechPowers: Array.from(this.speechPowers)
          }
        });
        break;
    }
  }
  
  initializeBandFilters() {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–æ—Å–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (IIR —Ñ–∏–ª—å—Ç—Ä—ã –ë–∞—Ç—Ç–µ—Ä–≤–æ—Ä—Ç–∞)
    const nyquist = this.sampleRate / 2;
    const bandWidth = nyquist / this.bands;
    
    for (let i = 0; i < this.bands; i++) {
      const lowFreq = i * bandWidth;
      const highFreq = (i + 1) * bandWidth;
      
      this.bandFilters.push({
        // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π)
        lowFreq: lowFreq,
        highFreq: highFreq,
        prevInput: 0,
        prevOutput: 0,
        // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
        a: Math.exp(-2 * Math.PI * highFreq / this.sampleRate),
        b: Math.exp(-2 * Math.PI * lowFreq / this.sampleRate)
      });
      
      this.bandBuffers.push(new Float32Array(this.frameSize));
    }
  }
  
  createHammingWindow(size) {
    const window = new Float32Array(size);
    for (let i = 0; i < size; i++) {
      window[i] = 0.54 - 0.46 * Math.cos(2 * Math.PI * i / (size - 1));
    }
    return window;
  }
  
  updateSensitivity() {
    const normalizedSensitivity = this.sensitivity / 100;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä–æ–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    for (let i = 0; i < this.bands; i++) {
      // –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ - –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
      const freqFactor = (i + 1) / this.bands;
      this.adaptationRates[i] = 0.0005 + normalizedSensitivity * 0.002 * freqFactor;
    }
    
    this.vadThreshold = 0.2 + normalizedSensitivity * 0.3;
  }
  
  process(inputs, outputs, parameters) {
    const input = inputs[0];
    const output = outputs[0];
    
    if (!input || !output || input.length === 0 || output.length === 0) {
      return true;
    }
    
    const inputChannel = input[0];
    const outputChannel = output[0];
    
    if (!inputChannel || !outputChannel) {
      return true;
    }
    
    this.processAdvanced(inputChannel, outputChannel);
    
    return true;
  }
  
  processAdvanced(inputChannel, outputChannel) {
    // 1. –ú–Ω–æ–≥–æ–ø–æ–ª–æ—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    const bandPowers = this.analyzeBands(inputChannel);
    
    // 2. –î–µ—Ç–µ–∫—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const isVoiceActive = this.detectVoiceActivity(bandPowers);
    
    // 3. –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —à—É–º–∞ –∏ —Ä–µ—á–∏
    this.updateNoiseModels(bandPowers, isVoiceActive);
    
    // 4. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ª–æ—Å—ã
    const suppressionFactors = this.calculateSuppressionFactors(bandPowers);
    
    // 5. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≤—ã—á–∏—Ç–∞–Ω–∏—è
    this.applySpectralSubtraction(inputChannel, outputChannel, suppressionFactors);
    
    // 6. –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞
    this.postProcess(outputChannel);
    
    this.processedFrames++;
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if (this.processedFrames % 2000 === 0) {
      const avgSuppression = suppressionFactors.reduce((a, b) => a + b, 0) / suppressionFactors.length;
      console.log(`üîá Advanced: VAD=${isVoiceActive}, –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ=${avgSuppression.toFixed(3)}, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å=${this.sensitivity}`);
    }
  }
  
  analyzeBands(inputChannel) {
    const bandPowers = new Float32Array(this.bands);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª–æ—Å–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –≤—ã—á–∏—Å–ª—è–µ–º –º–æ—â–Ω–æ—Å—Ç—å
    for (let band = 0; band < this.bands; band++) {
      const filter = this.bandFilters[band];
      const buffer = this.bandBuffers[band];
      let power = 0;
      
      for (let i = 0; i < inputChannel.length; i++) {
        // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä (IIR)
        const input = inputChannel[i];
        const output = filter.b * input + filter.a * filter.prevOutput;
        filter.prevInput = input;
        filter.prevOutput = output;
        
        buffer[i] = output;
        power += output * output;
      }
      
      bandPowers[band] = power / inputChannel.length;
    }
    
    return bandPowers;
  }
  
  detectVoiceActivity(bandPowers) {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ —á–∞—Å—Ç–æ—Ç–∞–º
    const totalPower = bandPowers.reduce((sum, power) => sum + power, 0);
    
    if (totalPower < 0.0001) return false;
    
    // –ì–æ–ª–æ—Å –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç –±–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Å—Ä–µ–¥–Ω–∏—Ö —á–∞—Å—Ç–æ—Ç–∞—Ö (–ø–æ–ª–æ—Å—ã 2-5)
    const speechBands = bandPowers.slice(2, 6);
    const speechPower = speechBands.reduce((sum, power) => sum + power, 0);
    const speechRatio = speechPower / totalPower;
    
    // –î–µ—Ç–µ–∫—Ç–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã (F0) - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π
    const f0Strength = this.detectF0(bandPowers);
    
    // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä
    const vadScore = speechRatio * 0.7 + f0Strength * 0.3;
    
    // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    this.vadHistory.shift();
    this.vadHistory.push(vadScore > this.vadThreshold ? 1 : 0);
    
    const recentActivity = this.vadHistory.reduce((sum, val) => sum + val, 0);
    
    return recentActivity >= 3; // –ì–æ–ª–æ—Å –∞–∫—Ç–∏–≤–µ–Ω –µ—Å–ª–∏ 3+ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Ñ—Ä–µ–π–º–æ–≤
  }
  
  detectF0(bandPowers) {
    // –ü—Ä–æ—Å—Ç–æ–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ–Ω–∞
    // –ò—â–µ–º –≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª–æ—Å–∞–º–∏
    let harmonicStrength = 0;
    
    for (let i = 1; i < this.bands - 1; i++) {
      const current = bandPowers[i];
      const prev = bandPowers[i - 1];
      const next = bandPowers[i + 1];
      
      // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –ø–æ–ª–æ—Å–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–∏–ª—å–Ω–µ–µ —Å–æ—Å–µ–¥–Ω–∏—Ö,
      // —ç—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –≥–∞—Ä–º–æ–Ω–∏–∫—É
      if (current > prev * 1.5 && current > next * 1.5) {
        harmonicStrength += current / (prev + next + 0.001);
      }
    }
    
    return Math.min(harmonicStrength / this.bands, 1.0);
  }
  
  updateNoiseModels(bandPowers, isVoiceActive) {
    for (let i = 0; i < this.bands; i++) {
      const power = bandPowers[i];
      const adaptRate = this.adaptationRates[i];
      
      if (isVoiceActive) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å —Ä–µ—á–∏
        this.speechPowers[i] = (1 - adaptRate) * this.speechPowers[i] + adaptRate * power;
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å —à—É–º–∞ (–±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è)
        this.noisePowers[i] = (1 - adaptRate * 2) * this.noisePowers[i] + adaptRate * 2 * power;
      }
    }
  }
  
  calculateSuppressionFactors(bandPowers) {
    const suppressionFactors = new Float32Array(this.bands);
    const sensitivity = this.sensitivity / 100;
    
    for (let i = 0; i < this.bands; i++) {
      const signalPower = bandPowers[i];
      const noisePower = this.noisePowers[i];
      const speechPower = this.speechPowers[i];
      
      // SNR –æ—Ü–µ–Ω–∫–∞
      const snr = signalPower / (noisePower + 0.0001);
      
      // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ—á–∏ (–±–∞–π–µ—Å–æ–≤—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥)
      const speechProb = speechPower / (speechPower + noisePower + 0.0001);
      
      // Wiener —Ñ–∏–ª—å—Ç—Ä
      let wienerGain = snr / (snr + 1);
      
      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏
      wienerGain = wienerGain * speechProb + (1 - speechProb) * 0.1;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      let suppressionFactor = wienerGain;
      if (sensitivity > 0.5) {
        // –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
        suppressionFactor = Math.pow(suppressionFactor, 1 + (sensitivity - 0.5));
      } else {
        // –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
        suppressionFactor = Math.sqrt(suppressionFactor * (0.5 + sensitivity));
      }
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
      suppressionFactors[i] = Math.max(0.02, Math.min(1.0, suppressionFactor));
    }
    
    // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
    for (let i = 0; i < this.bands; i++) {
      this.smoothingFactors[i] = (1 - this.smoothingRate) * this.smoothingFactors[i] + 
                                 this.smoothingRate * suppressionFactors[i];
      suppressionFactors[i] = this.smoothingFactors[i];
    }
    
    return suppressionFactors;
  }
  
  applySpectralSubtraction(inputChannel, outputChannel, suppressionFactors) {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ª–æ—Å—ã
    for (let i = 0; i < inputChannel.length; i++) {
      let sample = inputChannel[i];
      
      // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å FFT)
      let processedSample = 0;
      let totalWeight = 0;
      
      for (let band = 0; band < this.bands; band++) {
        const bandSample = this.bandBuffers[band][i];
        const weight = suppressionFactors[band];
        processedSample += bandSample * weight;
        totalWeight += weight;
      }
      
      if (totalWeight > 0) {
        sample = processedSample / totalWeight;
      } else {
        sample *= 0.1; // –°–∏–ª—å–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤—Å–µ –≤–µ—Å–∞ –º–∞–ª—ã
      }
      
      outputChannel[i] = sample;
    }
  }
  
  postProcess(outputChannel) {
    // –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞: —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    for (let i = 1; i < outputChannel.length - 1; i++) {
      const current = outputChannel[i];
      const prev = outputChannel[i - 1];
      const next = outputChannel[i + 1];
      
      // –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑–∫–∏—Ö —Å–∫–∞—á–∫–æ–≤ (–∏–º–ø—É–ª—å—Å–æ–≤)
      if (Math.abs(current) > Math.abs(prev) * 3 && Math.abs(current) > Math.abs(next) * 3) {
        outputChannel[i] = (prev + next) / 2;
      }
      
      // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
      if (i % 4 === 0) {
        outputChannel[i] = 0.7 * current + 0.15 * prev + 0.15 * next;
      }
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    let maxSample = 0;
    for (let i = 0; i < outputChannel.length; i++) {
      maxSample = Math.max(maxSample, Math.abs(outputChannel[i]));
    }
    
    if (maxSample > 0.95) {
      const normFactor = 0.95 / maxSample;
      for (let i = 0; i < outputChannel.length; i++) {
        outputChannel[i] *= normFactor;
      }
    }
  }
  
  static get parameterDescriptors() {
    return [];
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—à –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
registerProcessor('advanced-noise-processor', AdvancedNoiseProcessor); 